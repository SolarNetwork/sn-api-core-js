{"version":3,"file":"solarnetwork-api-core.es.js","sources":["../src/data/array.js","../src/util/enum.js","../src/util/comparableEnum.js","../src/domain/aggregation.js","../src/format/date.js","../src/util/date.js","../src/data/nest.js","../src/data/data.js","../src/domain/authTokenStatus.js","../src/domain/authTokenType.js","../src/domain/pagination.js","../src/domain/sortDescriptor.js","../src/util/propMap.js","../src/domain/location.js","../src/domain/datumFilter.js","../src/domain/generalMetadata.js","../src/domain/instructionState.js","../src/domain/locationPrecision.js","../src/domain/securityPolicy.js","../src/domain/domain.js","../src/format/scale.js","../src/format/format.js","../src/util/multiMap.js","../src/util/configuration.js","../src/net/environment.js","../src/net/httpHeaders.js","../src/net/urlQuery.js","../src/net/authV2.js","../src/net/urlHelper.js","../src/net/locationUrlHelperMixin.js","../src/net/queryUrlHelperMixin.js","../src/net/locationDatumMetadataUrlHelperMixin.js","../src/net/locationDatumUrlHelperMixin.js","../src/net/nodeUrlHelperMixin.js","../src/net/nodeDatumMetadataUrlHelperMixin.js","../src/net/nodeDatumUrlHelperMixin.js","../src/net/userUrlHelperMixin.js","../src/net/nodeInstructionUrlHelperMixin.js","../src/net/nodeMetadataUrlHelperMixin.js","../src/net/userAuthTokenUrlHelperMixin.js","../src/net/userMetadataUrlHelperMixin.js","../src/net/net.js","../src/util/logger.js","../src/util/util.js"],"sourcesContent":["/**\n * Normalize a data array of time series data based on an aggregate time step.\n * \n * This method is useful for \"filling in\" gaps of data in situations where something expects\n * the data include placeholders for the gaps. Charting applications often expect this, for\n * example.\n * \n * Each element in the `data` array is expected to provide a `date` property that is a `Date`\n * object. When gaps are discovered in the array, \"filler\" objects will be inserted with\n * an approprate `date` value and all other properties copied from the previous element but\n * set to `null`.\n * \n * Here's an example where a new element is added to an array to fill in a missing time slot:\n * \n * ```\n * const queryData = [\n *     {date : new Date('2018-05-05T11:00Z'), Generation : 357, Consumption: 345},\n *     {date : new Date('2018-05-05T12:00Z'), Generation : 1023, Consumption: 678}\n * ]\n * \n * timeNormalizeDataArray(queryData, Aggregations.ThirtyMinute);\n * ```\n * \n * Then `queryData` would look like this:\n * \n * ```\n * [\n *     {date : new Date('2018-05-05T11:00Z'), Generation : 357, Consumption: 345},\n *     {date : new Date('2018-05-05T11:30Z'), Generation : null, Consumption: null},\n *     {date : new Date('2018-05-05T12:00Z'), Generation : 1023, Consumption: 678}\n * ]\n * ```\n * \n * @param {object[]} data the raw data returned from SolarNetwork; this array is modified in-place\n * @param {module:domain~Aggregation} aggregate the expected aggregate level of the data\n * @returns {void}\n */\nexport function timeNormalizeDataArray(data, aggregate) {\n    const aggMillseconds = aggregate.level * 1000;\n    if ( !Array.isArray(data) || data.length < 2 ) {\n        return data;\n    }\n    var i = 0;\n    while ( i < data.length - 1 ) {\n        const d = data[i];\n        const currTime = d.date.getTime();\n        const expectedNextTime = currTime + aggMillseconds;\n        let nextTime = data[i+1].date.getTime();\n        if ( nextTime > expectedNextTime ) {\n            let fill = [i + 1, 0];\n            for ( let fillTime = currTime + aggMillseconds; fillTime < nextTime; fillTime += aggMillseconds ) {\n                let f = Object.create(Object.getPrototypeOf(d), Object.getOwnPropertyDescriptors(d));\n                for ( let p in f ) {\n                    f[p] = null;\n                }\n                f.date = new Date(fillTime);\n                fill.push(f);\n            }\n            Array.prototype.splice.apply(data, fill);\n            i += fill.length;\n        }\n        i += 1;            \n    }\n}\n\nexport default Object.freeze({\n\ttimeNormalizeDataArray : timeNormalizeDataArray,\n});\n","/**\n * An enumerated object base class.\n * \n * This class is essentially abstract, and must be extended by another\n * class that overrides the {@link module:util~Enum.enumValues} method.\n * \n * @abstract\n * @alias module:util~Enum\n */\nclass Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        this._name = name;\n        if ( this.constructor === Enum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the enum name.\n     * \n     * @returns {string} the  name\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Test if a string is equal to this enum's name.\n     * \n     * As long as enum values are consistently obtained from the {@link module:util~Enum.enumValues}\n     * array then enum instances can be compared with `===`. If unsure, this method can be used\n     * to compare string values instead.\n     * \n     * If `value` is passed as an actual Enum instance, then if that enum is the same class\n     * as this enum it's `name` is compared to this instance's `name`.\n     * \n     * @param {string|Enum} value the value to test\n     * @returns {boolean} `true` if `value` is the same as this instance's `name` value \n     */\n    equals(value) {\n        if ( this.constructor === value.constructor ) {\n            return (value.name === this.name);\n        }\n        return (value === this.name);\n    }\n\n    /**\n     * Get all enum values.\n     * \n     * This method must be overridden by subclasses to return something meaningful.\n     * This implementation returns an empty array.\n     * \n     * @abstract\n     * @returns {module:util~Enum[]} get all enum values\n     */\n    static enumValues() {\n        return [];\n    }\n\n    /**\n     * This method takes an array of enums and turns them into a mapped object, using the enum\n     * `name` as object property names.\n     * \n     * @param {module:util~Enum[]} enums the enum list to turn into a value object\n     * @returns {object} an object with enum `name` properties with associated enum values \n     */\n    static enumsValue(enums) {\n        return Object.freeze(enums.reduce((obj, e) => {\n            obj[e.name] = e;\n            return obj;\n        }, {}));\n    }\n\n    /**\n     * Get an enum instance from its name.\n     * \n     * This method searches the {@link module:util~Enum#enumVvalues} array for a matching value.\n     * \n     * @param {string} name the enum name to get an instnace for\n     * @returns {module:util~Enum} the instance, or `undefined` if no instance exists for the given `name`\n     */\n    static valueOf(name) {\n        const enums = this.enumValues();\n        if ( !Array.isArray(enums) ) {\n            return undefined;\n        }\n        for ( let i = 0, len = enums.length; i < len; i += 1 ) {\n            if ( name === enums[i].name ) {\n                return enums[i];\n            }\n        }\n    }\n\n    static namesFor(set) {\n        const result = [];\n        if ( set ) {\n            for ( const e of set ) {\n                result.push(e.name);\n            }\n        }\n        return result;\n    }\n}\n\nexport default Enum;\n","import Enum from './enum';\n\n/**\n * An immutable enum-like object with an associated comparable value.\n *\n * This class is essentially abstract, and must be extended by another\n * class that overrides the inerited {@link module:util~Enum.enumValues} method.\n * \n * @abstract\n * @extends module:util~Enum\n * @alias module:util~ComparableEnum\n */\nclass ComparableEnum extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     * @param {number} value the comparable value\n     */\n    constructor(name, value) {\n        super(name);\n        this._value = value;\n        if ( this.constructor === ComparableEnum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the comparable value.\n     * \n     * @returns {number} the value\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * Compare two ComparableEnum objects based on their `value` values.\n     * \n     * @param {ComparableEnum} other the object to compare to\n     * @returns {number} `-1` if `this.value` is less than `other.value`, \n     *                   `1` if `this.value` is greater than `other.value`,\n     *                   `0` otherwise (when the values are equal) \n     */\n    compareTo(other) {\n        return this.value < other.value ? -1 : this.value > other.value ? 1 : 0;\n    }\n\n    /**\n     * Compute a complete set of enum values based on a minimum enum and/or set of enums.\n     * \n     * If `cache` is provided, then results computed via `minAggregation` \n     * will be cached there, and subsequent calls will returned the cached result when appropriate.\n     * \n     * @param {ComparableEnum} [minEnum] a minimum enum value\n     * @param {Map<string, Set<ComparableEnum>>} [cache] a cache of computed values\n     * @returns {Set<ComparableEnum>|null} the computed set, or `null` if no values match\n     */\n    static minimumEnumSet(minEnum, cache) {\n        if ( !minEnum ) {\n            return null;\n        }\n        let result = (cache ? cache.get(minEnum.name) : undefined);\n        if ( result ) {\n            return result;\n        }\n        result = new Set();\n        for ( const agg of minEnum.constructor.enumValues() ) {\n            if ( agg.compareTo(minEnum) > -1 ) {\n                result.add(agg);\n            }\n        }\n        if ( cache ) {\n            cache.set(minEnum.name, result);\n        }\n        return (result.size > 0 ? result : null);\n    }\n\n}\n\nexport default ComparableEnum;\n","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A named aggregation.\n * \n * @extends module:util~ComparableEnum\n * @alias module:domain~Aggregation\n */\nclass Aggregation extends ComparableEnum {\n\n\t/**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} level a relative aggregation level value \n     */\n    constructor(name, level) {\n\t\tsuper(name, level);\n\t\tif ( this.constructor === Aggregation ) {\n\t\t\tObject.freeze(this);\n\t\t}\n    }\n\n    /**\n     * Get the aggregate level value.\n\t * \n\t * This is an alias for {@link module:util~ComparableEnum#value}.\n     */\n    get level() {\n        return this.value;\n\t}\n\t\n\t/**\n\t * Get the {@link module:domain~Aggregations} values.\n\t * \n\t * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AggregationValues;\n\t}\n\n}\n\n\nconst AggregationValues = Object.freeze([\n\tnew Aggregation('Minute', 60),\n\tnew Aggregation('FiveMinute', 60 * 5),\n\tnew Aggregation('TenMinute', 60 * 10),\n\tnew Aggregation('FifteenMinute', 60 * 15),\n\tnew Aggregation('ThirtyMinute', 60 * 30),\n\tnew Aggregation('Hour', 3600),\n\tnew Aggregation('HourOfDay', 3600),\n\tnew Aggregation('SeasonalHourOfDay', 3600),\n\tnew Aggregation('Day', 86400),\n\tnew Aggregation('DayOfWeek', 86400),\n\tnew Aggregation('SeasonalDayOfWeek', 86400),\n\tnew Aggregation('Week', 604800),\n\tnew Aggregation('WeekOfYear', 604800),\n\tnew Aggregation('Month', 2419200),\n\tnew Aggregation('Year', 31536000),\n\tnew Aggregation('RunningTotal', Number.MAX_SAFE_INTEGER),\n]);\n\n/**\n * The enumeration of supported Aggregation values.\n * \n * @readonly\n * @enum {module:domain~Aggregation}\n * @property {module:domain~Aggregation} Minute minute\n * @property {module:domain~Aggregation} FiveMinute 5 minutes\n * @property {module:domain~Aggregation} TenMinute 10 minutes\n * @property {module:domain~Aggregation} FifeteenMinute 15 minutes\n * @property {module:domain~Aggregation} ThirtyMinute 30 minutes\n * @property {module:domain~Aggregation} Hour an hour\n * @property {module:domain~Aggregation} HourOfDay an hour of a day, e.g. 1-24\n * @property {module:domain~Aggregation} SeasonalHourOfDay an hour of a day, further grouped into 4 seasons\n * @property {module:domain~Aggregation} Day a day\n * @property {module:domain~Aggregation} DayOfWeek a day of the week, e.g. Monday - Sunday\n * @property {module:domain~Aggregation} SeasonalDayOfWeek a day of the week, further grouped into 4 seasons\n * @property {module:domain~Aggregation} Week a week\n * @property {module:domain~Aggregation} WeekOfYear the week within a year, e.g. 1 - 52\n * @property {module:domain~Aggregation} Month a month\n * @property {module:domain~Aggregation} Year a year\n * @property {module:domain~Aggregation} RunningTotal a complete running total over a time span\n * @alias module:domain~Aggregations\n */\nconst Aggregations = Aggregation.enumsValue(AggregationValues);\n\nexport default Aggregations;\nexport { Aggregation };","import { utcFormat, utcParse, isoParse } from 'd3-time-format';\n\n/**\n * Format a date into a SolarNet UTC timestamp format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd HH:mm:ss.SSS'Z'`\n * @alias module:format~timestampFormat\n */\nexport const timestampFormat = utcFormat(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\n/**\n * Format a date into a SolarNet UTC date/time format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd HH:mm`\n * @alias module:format~dateTimeFormat\n */\nexport const dateTimeFormat = utcFormat(\"%Y-%m-%d %H:%M\");\n\n/**\n * Format a date into a SolarNet URL UTC date/time format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd'T'HH:mm`\n * @alias module:format~dateTimeUrlFormat\n */\nexport const dateTimeUrlFormat = utcFormat(\"%Y-%m-%dT%H:%M\");\n\n/**\n * Format a date into a SolarNet UTC date format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd`\n * @alias module:format~dateFormat\n */\nexport const dateFormat = utcFormat(\"%Y-%m-%d\");\n\n/**\n * Parse a SolarNet UTC timestamp value.\n * @function\n * @param {string} str the string to parse - `yyyy-MM-dd HH:mm:ss.SSS'Z'\n * @returns {Date} the parsed date, or `null`\n * @alias module:format~timestampParse\n */\nexport const timestampParse = utcParse(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\n/**\n * Parse a SolarNet UTC date/time.\n * @function\n * @param {string} str the string to parse - `yyyy-MM-dd HH:mm\n * @returns {Date} the parsed date, or `null`\n * @alias module:format~dateTimeParse\n */\nexport const dateTimeParse = utcParse(\"%Y-%m-%d %H:%M\");\n\nexport { \n\t/**\n\t * Parse a SolarNet URL UTC date/time value.\n\t * @function\n\t * @param {string} str the string to parse - `yyyy-MM-dd'T'HH:mm`\n\t * @returns {Date} the parsed date, or `null`\n\t * @alias module:format~dateTimeUrlParse\n\t */\n\tisoParse as dateTimeUrlParse, \n\t\n\t/**\n\t * Parse a SolarNet UTC date value.\n\t * @function\n\t * @param {string} str the string to parse - `yyyy-MM-dd`\n\t * @returns {Date} the parsed date, or `null`\n\t * @alias module:format~dateParse\n\t */\n\tisoParse as dateParse } from 'd3-time-format';\n\n/**\n * Parse a UTC date string, from a variety of supported formats.\n *\n * @param {String} str the string to parse into a date\n * @returns {Date} the parsed `Date`, or `null` if the date can't be parsed\n * @alias module:format~dateParser\n */\nexport function dateParser(str) {\n\tvar date = isoParse(str)\n\t\t|| timestampParse(str)\n\t\t|| dateTimeParse(str);\n\treturn date;\n}\n\n/**\n * Format a date into an ISO 8601 timestamp or date string, in the UTC time zone.\n * \n * @param {Date} date the date to format \n * @param {boolean} [includeTime=false] `true` to format as a timestamp, `false` as just a date\n * @returns {string} the formatted date string\n * @alias module:format~iso8601Date\n */\nexport function iso8601Date(date, includeTime) {\n\treturn ''+date.getUTCFullYear()\n\t\t\t+(date.getUTCMonth() < 9 ? '0' : '') +(date.getUTCMonth()+1)\n\t\t\t+(date.getUTCDate() < 10 ? '0' : '') + date.getUTCDate()\n\t\t\t+(includeTime ?\n\t\t\t\t'T'\n\t\t\t\t+(date.getUTCHours() < 10 ? '0' : '') + date.getUTCHours()\n\t\t\t\t+(date.getUTCMinutes() < 10 ? '0' : '') + date.getUTCMinutes()\n\t\t\t\t+(date.getUTCSeconds() < 10 ? '0' : '') +date.getUTCSeconds()\n\t\t\t\t+'Z'\n\t\t\t\t: '');\n}\n\n/**\n * Get a UTC season constant for a date. Seasons are groups of 3 months, e.g. \n * Spring, Summer, Autumn, Winter.\n * \n * The returned value will be a number between 0 and 3, where:\n * \n *  * (Mar, Apr, May) = `0`\n *  * (Jun, Jul, Aug) = `1`\n *  * (Sep, Oct, Nov) = `2`\n *  * (Dec, Jan, Feb) = `3`\n * \n * @param {Date|number} date either a date to get the season for, or a number representing the UTC month of a date\n * @returns {number} a season constant number, from 0 - 3\n * @alias module:format~seasonForDate\n */\nexport function seasonForDate(date) {\n\tconst m = (date.getUTCMonth ? date.getUTCMonth() : Number(date));\n\tif ( m < 2 || m === 11 ) {\n\t\treturn 3;\n\t} else if ( m < 5 ) {\n\t\treturn 0;\n\t} else if ( m < 8 ) {\n\t\treturn 1;\n\t} else {\n\t\treturn 2;\n\t}\n}\n","import {\n    utcMinute,\n    utcHour,\n    utcDay,\n    utcMonth,\n    utcYear\n} from 'd3-time';\nimport Aggregations from '../domain/aggregation';\nimport { dateTimeParse, dateTimeUrlParse, timestampParse } from '../format/date';\n\n/**\n * An object that defines levels of date range configuration.\n *  \n * @typedef {Object} module:util~DateRangeConfiguration\n * @property {number} [numHours] the number of hours to use\n * @property {number} [numDays] the number of days to use\n * @property {number} [numMonths] the number of months to use\n * @property {number} [numYears] the number of years to use\n */\n\n/**\n * An object that defines a date range.\n *  \n * @typedef {Object} module:util~DateRange\n * @property {Date} start the starting date\n * @property {Date} end the ending date\n * @property {module:domain~Aggregation} timeUnit the time unit used by the date range\n * @property {number} timeCount the number of time units in the date range\n * @property {module:domain~Aggregation} aggregate the aggregate to query with\n */\n\n/**\n * Get a query range appropriate for a given aggregate level.\n * \n * Returns an object with `start` and `end` Date properties, using the given `endDate`\n * parameter as the basis for calculating the start as an offset backwards in time\n * based on the given `aggregate` level.\n * \n * When `aggregateTimeCount` will be treated as a \"next higher\" aggregate level from\n * `aggregate`, like this:\n * \n *  * < `Hour`: `numHours`\n *  * `Hour` : `numDays`\n *  * `Day` : `numMonths`\n *  * `Month` : `numYears`\n * \n * For example, you might like to render a chart using `TenMinute` aggregate data for the \n * last 24 hours. You'd call this function like this:\n * \n * ```\n * const range = rollingQueryDateRange(Aggregates.TenMinute, 24);\n * \n * // or, passing a DateRangeConfiguration\n * const range = rollingQueryDateRange(Aggregates.TenMinute, {numHours:24});\n * ```\n * \n * @param {module:domain~Aggregation} aggregate the aggregate level to get a query range for\n * @param {number|module:util~DateRangeConfiguration} aggregateTimeCount the number of aggregate time units to use\n * @param {Date} [endDate] the ending date; if not provided the current date will be used\n * @returns {module:util~DateRange} the calculated date range\n * @alias module:util~rollingQueryDateRange\n */\nexport function rollingQueryDateRange(aggregate, aggregateTimeCount, endDate) {\n    endDate = endDate || new Date();\n\t\n\tfunction exclusiveEndDate(interval, date) {\n\t\tvar result = interval.ceil(date);\n\t\tif ( result.getTime() === date.getTime() ) {\n\t\t\t// already on exact aggregate, so round up to next\n\t\t\tresult = interval.offset(result, 1);\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tfunction timeCountValue(propName) {\n\t\tvar result;\n\t\tif ( isNaN(Number(aggregateTimeCount)) ) {\n\t\t\tif ( aggregateTimeCount[propName] !== undefined ) {\n\t\t\t\tresult = Number(aggregateTimeCount[propName]);\n\t\t\t} else {\n\t\t\t\tresult = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tresult = aggregateTimeCount;\n\t\t}\n\t\tif ( typeof result !== 'number' ) {\n\t\t\tresult = 1;\n\t\t}\n\t\treturn result;\n\t}\n\n    var end,\n        start,\n        timeUnit,\n        timeCount;\n\n\tif ( aggregate.compareTo(Aggregations.Hour) < 0 ) {\n\t\ttimeCount = timeCountValue('numHours');\n\t\ttimeUnit = Aggregations.Hour;\n\t\tend = exclusiveEndDate(utcMinute, endDate);\n\t\tlet precision = Math.min(30, aggregate.level / 60);\n\t\tend.setUTCMinutes((end.getUTCMinutes() + precision - (end.getUTCMinutes() % precision)), 0, 0);\n\t\tstart = utcHour.offset(end, -timeCount);\n\t} else if ( Aggregations.Month.equals(aggregate) ) {\n\t\ttimeCount = timeCountValue('numYears');\n\t\ttimeUnit = Aggregations.Year;\n\t\tend = exclusiveEndDate(utcMonth, endDate);\n\t\tstart = utcYear.offset(utcMonth.floor(endDate), -timeCount);\n\t} else if ( Aggregations.Day.equals(aggregate) ) {\n\t\ttimeCount = timeCountValue('numMonths');\n\t\ttimeUnit = Aggregations.Month;\n\t\tend = exclusiveEndDate(utcDay, endDate);\n\t\tstart = utcMonth.offset(utcDay.floor(endDate), -timeCount);\n\t} else {\n\t\t// assume Hour\n\t\ttimeCount = timeCountValue('numDays');\n\t\ttimeUnit = Aggregations.Day;\n\t\tend = exclusiveEndDate(utcHour, endDate);\n\t\tstart = utcDay.offset(utcHour.floor(end), -timeCount);\n\t}\n\treturn {\n\t\tstart : start, \n\t\tend : end, \n\t\ttimeUnit : timeUnit, \n        timeCount : timeCount,\n        aggregate : aggregate\n\t};\n}\n\n/**\n * Get a date associated with a \"datum\" style object.\n * \n * This function will return a `Date` instance found via a property on `d` according to these rules:\n * \n *  1. `date` - assumed to be a `Date` object already and returned directly\n *  2. `localDate` - a string in `yyyy-MM-dd` form, optionally with a string\n *     `localTime` property for an associated time in `HH:mm` form, treated as UTC\n *  3. `created` - a string in `yyyy-MM-dd HH:mm:ss.SSS'Z'` or `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'` form\n * \n * These properties are commonly returned in results from the SolarNetwork API, and thus\n * this method is a handy way to get the dates for those objects.\n * \n * **Note** that the `localDate` and `localTime` values are parsed as UTC. When formatted the\n * date for display they should be formatted in UTC as well to preserve the expected value.\n * \n * @param {Object} d the datum object to extract a date from\n * @returns {Date} the extracted date, or `null` if no date could be extracted\n * @alias module:util~datumDate\n */\nexport function datumDate(d) {\n\tif ( !d ) {\n        return null;\n    }\n    if ( d.date ) {\n        return d.date;\n    } else if ( d.localDate ) {\n        return dateTimeParse(d.localDate +(d.localTime ? ' ' +d.localTime : ' 00:00'));\n    } else if ( d.created ) {\n        return timestampParse(d.created) || dateTimeUrlParse(d.created);\n    }\n}\n\nexport default Object.freeze({\n    datumDate : datumDate,\n    rollingQueryDateRange : rollingQueryDateRange,\n});\n\n","import { ascending, max, sum } from 'd3-array';\nimport { nest } from 'd3-collection';\n\nimport { datumDate } from '../util/date'\n\n/**\n * A callback function that operates on a nested data layer datum object.\n * \n * @callback module:data~NestedDataOperatorFunction\n * @param {object} datum the datum object being operated on\n * @param {string} key the layer key the datum object is a member of\n * @param {object} [prevDatum] the previous datum object in the layer, if available\n * @returns {void}\n */\n\n/**\n * Normalize the data arrays resulting from a `d3.nest` operation so that all group \n * value arrays have the same number of elements, based on a Date property named \n * `date`.\n * \n * The data values are assumed to be sorted by `date` already, and are modified in-place.\n * This makes the data suitable to passing to `d3.stack`, which expects all stack data\n * arrays to have the same number of values, for the same keys. When querying for data\n * in SolarNetwork there might be gaps in the results, so this function can be used to\n * \"fill in\" those gaps with \"dummy\" values so that there are no more gaps.\n * \n * Filled-in data objects are automatically populated with an appropriate `date` property\n * and a `sourceId` property taken from the `key` of the layer the gap if found in. You\n * can pass a `fillTemplate` object with static properties to also include on all filled-in\n * data objects. You can also pass a `fillFn` function to populate the filled-in objects\n * with dynamic data. \n *\n * For example, given:\n * \n * ```\n * const layerData = [\n *   { key : 'A', values : [{date : new Date('2011-12-02 12:00')}, {date : new Date('2011-12-02 12:10')}] },\n *   { key : 'B', values : [{date : new Date('2011-12-02 12:00')}] }\n * ];\n * \n * normalizeNestedStackDataByDate(layerData);\n * ```\n * \n * The `layerData` would be modified in-place and look like this (notice the filled in second data value in the **B** group):\n * \n * ```\n * [\n *   { key : 'A', values : [{date : new Date('2011-12-02 12:00')}, {date : new Date('2011-12-02 12:10')}] },\n *   { key : 'B', values : [{date : new Date('2011-12-02 12:00')}, {date : new Date('2011-12-02 12:10'), sourceId : 'B'}] }\n * ]\n * ```\n * \n * @param {object[]} layerData - An array of objects with `key` and `values` properties, as returned from `d3.nest().entries()`\n * @param {string} layerData.key - The layer's key value.\n * @param {object[]} layerData.values - The layer's value array.\n * @param {object} [fillTemplate] - An object to use as a template for any filled-in data objects.\n *                                  The `date` property will be populated automatically, and a `sourceId`\n *                                  property will be populated by the layer's `key`.\n * @param {module:data~NestedDataOperatorFunction} [fillFn] - An optional function to populate filled-in data objects with.\n *                                                            This function is invoked **after** populating any `fillTemplate` values.\n * @returns {void}\n * @alias module:data~normalizeNestedStackDataByDate\n */\nexport function normalizeNestedStackDataByDate(layerData, fillTemplate, fillFn) {\n\tvar i = 0,\n\t\tj,\n\t\tk,\n\t\tjMax = layerData.length - 1,\n\t\tdummy,\n\t\tprop,\n\t\tcopyIndex;\n\t// fill in \"holes\" for each stack, if more than one stack. we assume data already sorted by date\n\tif ( jMax > 0 ) {\n\t\twhile ( i < max(layerData.map(function(e) { return e.values.length; })) ) {\n\t\t\tdummy = undefined;\n\t\t\tfor ( j = 0; j <= jMax; j++ ) {\n\t\t\t\tif ( layerData[j].values.length <= i ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( j < jMax ) {\n\t\t\t\t\tk = j + 1;\n\t\t\t\t} else {\n\t\t\t\t\tk = 0;\n\t\t\t\t}\n\t\t\t\tif ( layerData[k].values.length <= i || layerData[j].values[i].date.getTime() < layerData[k].values[i].date.getTime() ) {\n\t\t\t\t\tdummy = {date : layerData[j].values[i].date, sourceId : layerData[k].key};\n\t\t\t\t\tif ( fillTemplate ) {\n\t\t\t\t\t\tfor ( prop in fillTemplate ) {\n\t\t\t\t\t\t\tif ( fillTemplate.hasOwnProperty(prop) ) {\n\t\t\t\t\t\t\t\tdummy[prop] = fillTemplate[prop];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( fillFn ) {\n\t\t\t\t\t\tcopyIndex = (layerData[k].values.length > i ? i : i > 0 ? i - 1 : null);\n\t\t\t\t\t\tfillFn(dummy, layerData[k].key, (copyIndex !== null ? layerData[k].values[copyIndex] : undefined));\n\t\t\t\t\t}\n\t\t\t\t\tlayerData[k].values.splice(i, 0, dummy);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( dummy === undefined ) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Combine the layers resulting from a `d3.nest` operation into a single, aggregated\n * layer.\n * \n * This can be used to combine all sources of a single data type, for example\n * to show all \"power\" sources as a single layer of chart data. The resulting object\n * has the same structure as the input `layerData` parameter, with just a\n * single layer of data.\n * \n * For example:\n * \n * ```\n * const layerData = [\n *   { key : 'A', values : [{watts : 123, foo : 1}, {watts : 234, foo : 2}] },\n *   { key : 'B', values : [{watts : 345, foo : 3}, {watts : 456, foo : 4}] }\n * ];\n * \n * const result = aggregateNestedDataLayers(layerData, \n *     'A and B', ['foo'], ['watts'], {'combined' : true});\n * ```\n * \n * Then `result` would look like this:\n * \n * ```\n * [\n *   { key : 'A and B', values : [{watts : 468, foo : 1, combined : true}, \n *                                {watts : 690, foo : 2, combined : true}] }\n * ]\n * ```\n * \n * @param {object[]} layerData - An array of objects with `key` and `values` properties, as returned from `d3.nest().entries()`\n * @param {string} layerData.key - The layer's key value.\n * @param {object[]} layerData.values - The layer's value array.\n * @param {string} resultKey - The `key` property to assign to the returned layer.\n * @param {string[]} copyProperties - An array of string property names to copy as-is from the **first** layer's data values.\n * @param {string[]} sumProperties - An array of string property names to add together from **all** layer data.\n * @param {object} staticProperties - Static properties to copy as-is to **all** output data values.\n * @return {object[]} An array of objects with `key` and `value` properties, the same structure as the provided `layerData` argument\n * @alias module:data~aggregateNestedDataLayers\n */\nexport function aggregateNestedDataLayers(layerData, resultKey, copyProperties, sumProperties, staticProperties) {\n\t// combine all layers into a single source\n\tvar layerCount = layerData.length,\n\t\tdataLength,\n\t\ti,\n\t\tj,\n\t\tk,\n\t\tcopyPropLength = (copyProperties ? copyProperties.length : 0),\n\t\tsumPropLength = (sumProperties ? sumProperties.length : 0),\n\t\td,\n\t\tval,\n\t\tclone,\n\t\tarray;\n\n\tdataLength = layerData[0].values.length;\n\tif ( dataLength > 0 ) {\n\t\tarray = [];\n\t\tfor ( i = 0; i < dataLength; i += 1 ) {\n\t\t\td = layerData[0].values[i];\n\t\t\tclone = {};\n\t\t\tif ( staticProperties !== undefined ) {\n\t\t\t\tfor ( val in staticProperties ) {\n\t\t\t\t\tif ( staticProperties.hasOwnProperty(val) ) {\n\t\t\t\t\t\tclone[val] = staticProperties[val];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor ( k = 0; k < copyPropLength; k += 1 ) {\n\t\t\t\tclone[copyProperties[k]] = d[copyProperties[k]];\n\t\t\t}\n\t\t\tfor ( k = 0; k < sumPropLength; k += 1 ) {\n\t\t\t\tclone[sumProperties[k]] = 0;\n\t\t\t}\n\t\t\tfor ( j = 0; j < layerCount; j += 1 ) {\n\t\t\t\tfor ( k = 0; k < sumPropLength; k += 1 ) {\n\t\t\t\t\tval = layerData[j].values[i][sumProperties[k]];\n\t\t\t\t\tif ( val !== undefined ) {\n\t\t\t\t\t\tclone[sumProperties[k]] += val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarray.push(clone);\n\t\t}\n\t\tlayerData = [{ key : resultKey, values : array }];\n\t}\n\n\treturn layerData;\n}\n\n/**\n * Transform raw SolarNetwork timeseries data by combining datum from multiple sources into a single\n * data per time key.\n * \n * This method produces a single array of objects with metric properties derived by grouping \n * that property within a single time slot across one or more source IDs. Conceptually this is\n * similar to {@link module:data~aggregateNestedDataLayers} except groups of source IDs can be\n * produced in the final result.\n * \n * The data will be passed through {@link module:data~normalizeNestedStackDataByDate} so that every\n * result object will contain every configured output group, but missing data will result in a\n * `null` value.\n * \n * Here's an example where two sources `A` and `B` are combined into a single group `Generation`\n * and a third source `C` is passed through as another group `Consumption`:\n * \n * ```\n * const queryData = [\n *     {localDate: '2018-05-05', localTime: '11:00', sourceId: 'A', watts : 123}, \n *     {localDate: '2018-05-05', localTime: '11:00', sourceId: 'B', watts : 234},\n *     {localDate: '2018-05-05', localTime: '11:00', sourceId: 'C', watts : 345},\n *     {localDate: '2018-05-05', localTime: '12:00', sourceId: 'A', watts : 456}, \n *     {localDate: '2018-05-05', localTime: '12:00', sourceId: 'B', watts : 567},\n *     {localDate: '2018-05-05', localTime: '12:00', sourceId: 'C', watts : 678},\n * ];\n * const sourceMap = new Map([\n *     ['A', 'Generation'],\n *     ['B', 'Generation'],\n *     ['C', 'Consumption'],\n * ]);\n * \n * const result = groupedBySourceMetricDataArray(queryData, 'watts', sourceMap);\n * ```\n * \n * Then `result` would look like this:\n * \n * ```\n * [\n *     {date : new Date('2018-05-05T11:00Z'), Generation : 357, Consumption: 345},\n *     {date : new Date('2018-05-05T12:00Z'), Generation : 1023, Consumption: 678}\n * ]\n * ```\n * \n * @param {object[]} data the raw data returned from SolarNetwork\n * @param {string} metricName the datum property name to extract\n * @param {Map} [sourceIdMap] an optional mapping of input source IDs to output source IDs; this can be used\n *                            to control the grouping of data, by mapping multiple input source IDs to the same\n *                            output source ID\n * @param {function} [aggFn] an optional aggregate function to apply to the metric values;\n *                           defaults to `d3.sum`; **note** that the function will be passed an array of input\n *                           data objects, not metric values\n * @returns {object[]} array of datum objects, each with a date and one metric value per source ID\n */\nexport function groupedBySourceMetricDataArray(data, metricName, sourceIdMap, aggFn) {\n\tconst metricExtractorFn = function metricExtractor(d) {\n\t\treturn d[metricName];\n\t};\n\tconst rollupFn = (typeof aggFn === 'function' ? aggFn : sum);\n\tconst layerData = nest()\n\t\t// group first by source\n\t\t.key((d) => {\n\t\t\treturn sourceIdMap && sourceIdMap.has(d.sourceId)\n\t\t\t\t? sourceIdMap.get(d.sourceId)\n\t\t\t\t: d.sourceId;\n\t\t})\n\t\t.sortKeys(ascending)\n\t\t// group second by date\n\t\t.key((d) => {\n\t\t\treturn d.localDate + ' ' +d.localTime;\n\t\t})\n\t\t// sum desired property in date group\n\t\t.rollup((values) => {\n\t\t\tconst r = {\n\t\t\t\tdate: datumDate(values[0])\n\t\t\t};\n\t\t\tlet metricKey = values[0].sourceId;\n\t\t\tif ( sourceIdMap && sourceIdMap.has(metricKey) ) {\n\t\t\t\tmetricKey = sourceIdMap.get(metricKey);\n\t\t\t}\n\t\t\tr[metricKey] = rollupFn(values, metricExtractorFn);\n\t\t\treturn r;\n\t\t})\n\t\t// un-nest to single group by source\n\t\t.entries(data).map(function(layer) {\n\t\t\treturn {\n\t\t\t\tkey: layer.key, \n\t\t\t\tvalues: layer.values.map(function(d) {\n\t\t\t\t\treturn d.value;\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t\n\t// ensure all layers have the same time keys\n\tnormalizeNestedStackDataByDate(layerData, null, (d, key) => {\n\t\t// make sure filled-in data has the metric property defined\n\t\td[key] = null;\n\t});\n\n\t// reduce to single array with multiple metric properties\n\treturn layerData.reduce(function(combined, layer) {\n\t\tif ( !combined ) {\n\t\t\treturn layer.values;\n\t\t}\n\t\tcombined.forEach(function(d, i) {\n\t\t\tconst v = layer.values[i][layer.key];\n\t\t\td[layer.key] = v;\n\t\t});\n\t\treturn combined;\n\t}, null);\n}\n\nexport default Object.freeze({\n\taggregateNestedDataLayers : aggregateNestedDataLayers,\n\tgroupedBySourceMetricDataArray : groupedBySourceMetricDataArray,\n    normalizeNestedStackDataByDate : normalizeNestedStackDataByDate,\n});\n","/** @module data */\n\nexport { default as arrayData } from './array';\nexport { default as nestData } from './nest';\n","import Enum from '../util/enum';\n\n/**\n * An auth token status.\n * \n * @extends module:util~Enum\n * @alias module:domain~AuthTokenStatus\n */\nexport class AuthTokenStatus extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenStatus ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link module:domain~AuthTokenStatuses} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenStatusValues;\n\t}\n\n}\n\nconst AuthTokenStatusValues = Object.freeze([\n\tnew AuthTokenStatus('Active'),\n    new AuthTokenStatus('Disabled'),\n]);\n\n/**\n * The enumeration of supported AuthTokenStatus values.\n * \n * @readonly\n * @enum {module:domain~AuthTokenStatus}\n * @property {module:domain~AuthTokenStatus} Active the token is active and usable\n * @property {module:domain~AuthTokenStatus} Disabled the token is disabled and not usable\n * @alias module:domain~AuthTokenStatuses\n */\nconst AuthTokenStatuses = AuthTokenStatus.enumsValue(AuthTokenStatusValues);\n\nexport default AuthTokenStatuses;\n","import Enum from '../util/enum';\n\n/**\n * A named auth token type.\n * \n * @extends module:util~Enum\n * @alias module:domain~AuthTokenType\n */\nexport class AuthTokenType extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenType ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link AuthTokenTypes} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenTypeValues;\n\t}\n\n}\n\nconst AuthTokenTypeValues = Object.freeze([\n\tnew AuthTokenType('ReadNodeData'),\n    new AuthTokenType('User'),\n]);\n\n/**\n * The enumeration of supported AuthTokenType values.\n * \n * @readonly\n * @enum {module:domain~AuthTokenType}\n * @property {module:domain~AuthTokenType} ReadNodeData a read-only token for reading SolarNode data\n * @property {module:domain~AuthTokenType} User full access as the user that owns the token\n * @alias module:domain~AuthTokenTypes\n */\nconst AuthTokenTypes = AuthTokenType.enumsValue(AuthTokenTypeValues);\n\nexport default AuthTokenTypes;\n","/**\n * A pagination criteria object.\n * @alias module:domain~Pagination\n */\nclass Pagination {\n\n    /**\n     * Construct a pagination object.\n     * \n     * @param {number} max the maximum number of results to return \n     * @param {number} [offset] the 0-based starting offset \n     */\n    constructor(max, offset) {\n        this._max = (max > 0 ? +max : 0);\n        this._offset = (offset > 0 ? +offset : 0);\n    }\n\n    /**\n     * Get the maximum number of results to return.\n     * \n     * @returns {number} the maximum number of results\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     * Get the results starting offset.\n     * \n     * The first available result starts at offset <code>0</code>. Note this is \n     * a raw offset value, not a \"page\" offset.\n     * \n     * @returns {number} the starting result offset\n     */\n    get offset() {\n        return this._offset;\n    }\n\n    /**\n     * Copy constructor with a new <code>offset</code> value.\n     * \n     * @param {number} offset the new offset to use\n     * @return {Pagination} a new instance\n     */\n    withOffset(offset) {\n        return new Pagination(this.max, offset);\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * @return {string} the URI encoded string\n     */\n    toUriEncoding() {\n        let result = '';\n        if ( this.max > 0 ) {\n            result += 'max=' +this.max;\n        }\n        if ( this.offset > 0 ) {\n            if ( result.length > 0 ) {\n                result += '&';\n            }\n            result += 'offset=' +this.offset;\n        }\n        return result;\n    }\n}\n\nexport default Pagination;\n","/**\n * A description of a sort applied to a property of a collection.\n * @alias module:domain~SortDescriptor\n */\nclass SortDescriptor {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} key the property to sort on\n     * @param {boolean} [descending] `true` to sort in descending order, `false` for ascending\n     */\n    constructor(key, descending) {\n        this._key = key;\n        this._descending = !!descending;\n    }\n\n    /**\n     * Get the sort property name.\n     * \n     * @returns {string} the sort key\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * Get the sorting direction.\n     * \n     * @returns {boolean} `true` if descending order, `false` for ascending\n     */\n    get descending() {\n        return this._descending;\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * If `index` is provided and non-negative, then the query parameters will\n     * be encoded as an array property named `sorts`. Otherwise just\n     * bare `key` and `descending` properties will be used. The \n     * `descending` property is only added if it is `true`.\n     * \n     * @param {number} [index] an optional array property index\n     * @param {string} [propertyName=sorts] an optional array property name, only used if `index` is also provided\n     * @return {string} the URI encoded string\n     */\n    toUriEncoding(index, propertyName) {\n        let result,\n            propName = (propertyName || 'sorts');\n        if ( index !== undefined && index >= 0 ) {\n            result = encodeURIComponent(propName +'[' +index +'].key') + '=';\n        } else {\n            result = 'key=';\n        }\n        result += encodeURIComponent(this.key);\n        if ( this.descending ) {\n            if ( index !== undefined && index >= 0 ) {\n                result += '&' +encodeURIComponent(propName +'[' +index +'].descending') + '=true';\n            } else {\n                result += '&descending=true';\n            }\n        }\n        return result;\n    }\n\n}\n\nexport default SortDescriptor;\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport Enum from './enum';\n\n/**\n * A basic map-like object.\n * \n * <p>This object includes some utility functions that make it well suited to using\n * as an API query object. For example, the {@link module:util~PropMap#toUriEncoding}\n * method provides a way to serialize this object into URL query parameters.</p>\n * \n * @alias module:util~PropMap\n */\nclass PropMap {\n    /**\n     * Constructor.\n     * @param {PropMap|object} props the initial properties; if a `PropMap` instance is provided, the properties\n     *                               of that object will be copied into this one; otherwise the object will be\n     *                               used directly to hold property values\n     */\n    constructor(props) {\n        /**\n         * The object that all properties are stored on. \n         * @member {object} \n         */\n        this.props = (props instanceof PropMap ? props.properties() : \n            typeof props === 'object' ? props : {});\n    }\n\n    /**\n\t * Get, set, or remove a property value.\n\t *\n\t * @param {string} key the key to get or set the value for\n\t * @param {*} [newValue] if defined, the new value to set for the given `key`;\n\t *                       if `null` then the `key` property will be removed\n\t * @returns {*} if called as a getter, the associated value for the given `key`,\n\t *              otherwise this object\n\t */\n\tprop(key, newValue) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn this.props[key];\n\t\t}\n\t\tif ( newValue === null ) {\n\t\t\tdelete this.props[key];\n\t\t} else {\n\t\t\tthis.props[key] = newValue;\n\t\t}\n\t\treturn this;\n\t}\n\n    /**\n\t * Get, set, or remove multiple properties.\n\t * \n\t * @param {object} [newProps] the new values to set; if any value is `null` that property\n     *                            will be deleted\n\t * @returns {object} if called as a getter, all properties of this object copied into a \n     *                   simple object; otherwise this object\n\t */\n\tproperties(newProps) {\n\t\tif ( newProps ) {\n\t\t\tfor ( const k of Object.keys(newProps) ) {\n\t\t\t\tthis.prop(k, newProps[k]);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn Object.assign({}, this.props);\n\t}\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * All enumerable properties of the <code>props</code> property will be added to the\n     * result. If any property value is an array, the values of the array will be joined\n     * by a comma. Any {@link module:util~Enum} values will have their `name` property used.\n     * Any value that has a `toUriEncoding()` function property will have that function\n     * invoked, passing the associated property name as the first argument, and the returned\n     * value will be used.\n     * \n     * @param {string} [propertyName] an optional object property prefix to add to all properties\n     * @param {function} [callbackFn] An optional function that will be called for each property.\n     *                   The function will be passed property name and value arguments, and must\n     *                   return either `null` to skip the property, a 2-element array with the property\n     *                   name and value to use, or anything else to use the property as- is.\n     * @return {string} the URI encoded string\n     */\n    toUriEncoding(propertyName, callbackFn) {\n        let result = '';\n        for ( let k of Object.keys(this.props) ) {\n            if ( result.length > 0 ) {\n                result += '&';\n            }\n            let v = this.props[k];\n            if ( callbackFn ) {\n                const kv = callbackFn(k, v);\n                if ( kv === null ) {\n                    continue;\n                } else if ( Array.isArray(kv) && kv.length > 1 ) {\n                    k = kv[0];\n                    v = kv[1];\n                }\n            }\n            \n            if ( typeof v.toUriEncoding === 'function' ) {\n                result += v.toUriEncoding(propertyName ? encodeURIComponent(propertyName) + '.' + k : k);\n                continue;\n            }\n            \n            if ( propertyName ) {\n                result += encodeURIComponent(propertyName) + '.';\n            }\n            result += encodeURIComponent(k) + '=';\n            if ( Array.isArray(v) ) {\n                v.forEach((e, i) => {\n                    if ( i > 0 ) {\n                        result += ',';\n                    }\n                    if ( e instanceof Enum ) {\n                        e = e.name;\n                    }\n                    result += encodeURIComponent(e);\n                });\n            } else {\n                if ( v instanceof Enum ) {\n                    v = v.name;\n                }\n                result += encodeURIComponent(v);\n            }\n        }\n        return result;\n    }\n\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value with\n     * sorting and pagination parameters.\n     * \n     * <p>This calls {@link module:util~PropMap#toUriEncoding} first, then encodes \n     * the `sorts` and `pagination` parameters, if provided.\n     * \n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n     * @param {string} [propertyName] an optional object property prefix to add to all properties\n     * @param {function} [callbackFn] An optional function that will be called for each property.\n     *                   The function will be passed property name and value arguments, and must\n     *                   return either `null` to skip the property, a 2-element array with the property\n     *                   name and value to use, or anything else to use the property as- is.\n     * @return {string} the URI encoded string\n     */\n    toUriEncodingWithSorting(sorts, pagination, propertyName, callbackFn) {\n        let params = this.toUriEncoding(propertyName, callbackFn);\n        if ( Array.isArray(sorts) ) {\n            sorts.forEach((sort, i) => {\n                if ( sort instanceof SortDescriptor ) {\n                    if ( params.length > 0 ) {\n                        params += '&';\n                    }\n                    params += sort.toUriEncoding(i);\n                }\n            });\n        }\n        if ( pagination instanceof Pagination ) {\n            const paginationParams = pagination.toUriEncoding();\n            if ( paginationParams ) {\n                if ( params.length > 0 ) {\n                    params += '&';\n                }\n                params += paginationParams;\n            }\n        }\n        return params;\n    }\n\n}\n\nexport default PropMap;\n","import PropMap from '../util/propMap';\n\nconst CountryKey = 'country';\nconst ElevationKey = 'elevation';\nconst LatitudeKey = 'latitude';\nconst IdKey = 'id';\nconst LocalityKey = 'locality';\nconst LongitudeKey = 'longitude';\nconst NameKey = 'name';\nconst PostalCodeKey = 'postalCode';\nconst RegionKey = 'region';\nconst StateOrProvinceKey = 'stateOrProvince';\nconst StreetKey = 'street';\nconst TimeZoneIdKey = 'timeZoneId';\n\n/**\n * A geographic location.\n * \n * @extends module:util~PropMap\n * @alias module:domain~Location\n */\nclass Location extends PropMap {\n\n    /**\n\t * Constructor.\n\t * \n\t * @param {module:domain~Location|object} loc the location to copy properties from\n\t */\n\tconstructor(loc) {\n        super(loc);\n   }\n    \n    /**\n     * A SolarNetwork assigned unique identifier.\n     * @type {number}\n     */\n    get id() {\n        return this.prop(IdKey);\n    }\n\n    set id(val) {\n        this.prop(IdKey, val);\n    }\n\n    /**\n     * A generalized name, can be used for \"virtual\" locations.\n     * @type {string}\n     */\n    get name() {\n        return this.prop(NameKey);\n    }\n\n    set name(val) {\n        this.prop(NameKey, val);\n    }\n\n    /**\n     * An ISO 3166-1 alpha-2 character country code.\n     * @type {string}\n     */\n    get country() {\n        return this.prop(CountryKey);\n    }\n\n    set country(val) {\n        this.prop(CountryKey, val);\n    }\n\n    /**\n     * A country-specific regional identifier.\n     * @type {string}\n     */\n    get region() {\n        return this.prop(RegionKey);\n    }\n\n    set region(val) {\n        this.prop(RegionKey, val);\n    }\n\n    /**\n     * A country-specific state or province identifier.\n     * @type {string}\n     */\n    get stateOrProvince() {\n        return this.prop(StateOrProvinceKey);\n    }\n\n    set stateOrProvince(val) {\n        this.prop(StateOrProvinceKey, val);\n    }\n\n    /**\n     * Get the locality (city, town).\n     * @type {string}\n     */\n    get locality() {\n        return this.prop(LocalityKey);\n    }\n\n    set locality(val) {\n        this.prop(LocalityKey, val);\n    }\n\n    /**\n     * A country-specific postal code.\n     * @type {string}\n     */\n    get postalCode() {\n        return this.prop(PostalCodeKey);\n    }\n\n    set postalCode(val) {\n        this.prop(PostalCodeKey, val);\n    }\n\n    /**\n     * The street address.\n     * @type {string}\n     */\n    get street() {\n        return this.prop(StreetKey);\n    }\n\n    set street(val) {\n        this.prop(StreetKey, val);\n    }\n\n    /**\n     * The decimal world latitude.\n     * @type {number}\n     */\n    get latitude() {\n        return this.prop(LatitudeKey);\n    }\n\n    set latitude(val) {\n        this.prop(LatitudeKey, val);\n    }\n\n    /**\n     * The decimal world longitude.\n     * @type {number}\n     */\n    get longitude() {\n        return this.prop(LongitudeKey);\n    }\n\n    set longitude(val) {\n        this.prop(LongitudeKey, val);\n    }\n\n    /**\n     * The elevation above sea level, in meters.\n     * @type {number}\n     */\n    get elevation() {\n        return this.prop(ElevationKey);\n    }\n\n    set elevation(val) {\n        this.prop(ElevationKey, val);\n    }\n\n    /**\n     * A time zone ID, for example `Pacific/Auckland`.\n     * @type {string}\n     */\n    get timeZoneId() {\n        return this.prop(TimeZoneIdKey)\n    }\n\n    set timeZoneId(val) {\n        this.prop(TimeZoneIdKey, val);\n    }\n\n}\n\nexport default Location;\n","import { Aggregation } from './aggregation';\nimport Location from './location';\nimport PropMap from '../util/propMap';\n\nimport { dateTimeUrlFormat } from '../format/date'\n\nconst AggregationKey = 'aggregation';\nconst DataPathKey = 'dataPath';\nconst EndDateKey = 'endDate';\nconst LocationIdsKey = 'locationIds';\nconst LocationKey = 'location';\nconst MetadataFilterKey = 'metadataFilter';\nconst MostRecentKey = 'mostRecent';\nconst NodeIdsKey = 'nodeIds';\nconst QueryKey = 'query';\nconst SourceIdsKey = 'sourceIds';\nconst StartDateKey =  'startDate';\nconst TagsKey = 'tags';\nconst UserIdsKey = 'userIds';\nconst WithoutTotalResultsCountKey = 'withoutTotalResultsCount';\n\n/**\n * A filter criteria object for datum.\n * \n * <p>This filter is used to query both node datum and location datum. Not all properties are\n * applicable to both types. Be sure to consult the SolarNet API documentation on the \n * supported properties for each type.</p>\n * \n * @extends module:util~PropMap\n * @alias module:domain~DatumFilter\n */\nclass DatumFilter extends PropMap {\n\n    /**\n     * Constructor.\n     * @param {object} [props] initial property values \n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A node ID.\n     * \n     * This manages the first available node ID from the `nodeIds` property.\n     * \n     * @type {number}\n     */\n    get nodeId() {\n        const nodeIds = this.nodeIds;\n        return (Array.isArray(nodeIds) && nodeIds.length > 0 ? nodeIds[0] : null);\n    }\n\n    set nodeId(nodeId) {\n        if ( nodeId ) {\n            this.nodeIds = [nodeId];\n        } else {\n            this.nodeIds = null;\n        }\n    }\n\n    /**\n     * An array of node IDs.\n     * @type {number[]}\n     */\n    get nodeIds() {\n        return this.prop(NodeIdsKey);\n    }\n\n    set nodeIds(nodeIds) {\n        this.prop(NodeIdsKey, Array.isArray(nodeIds) ? nodeIds : null);\n    }\n\n    /**\n     * A location ID.\n     * \n     * This manages the first available location ID from the `locationIds` property.\n     * \n     * @type {number}\n     */\n    get locationId() {\n        const locationIds = this.locationIds;\n        return (Array.isArray(locationIds) && locationIds.length > 0 ? locationIds[0] : null);\n    }\n\n    set locationId(locationId) {\n        if ( locationId ) {\n            this.locationIds = [locationId];\n        } else {\n            this.locationIds = null;\n        }\n    }\n\n    /**\n     * An array of location IDs.\n     * @type {number[]}\n     */\n    get locationIds() {\n        return this.prop(LocationIdsKey);\n    }\n\n    set locationIds(locationIds) {\n        this.prop(LocationIdsKey, Array.isArray(locationIds) ? locationIds : null);\n    }\n\n    /**\n     * A source ID.\n     * \n     * This manages the first available source ID from the `sourceIds` property.\n     * \n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        if ( sourceId ) {\n            this.sourceIds = [sourceId];\n        } else {\n            this.sourceIds = null;\n        }\n    }\n\n    /**\n     * An array of source IDs.\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.prop(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.prop(SourceIdsKey, Array.isArray(sourceIds) ? sourceIds : null);\n    }\n\n    /**\n     * A user ID.\n     * \n     * This manages the first available location ID from the `userIds` property.\n     * \n     * @type {number}\n     */\n    get userId() {\n        const userIds = this.userIds;\n        return (Array.isArray(userIds) && userIds.length > 0 ? userIds[0] : null);\n    }\n\n    set userId(userId) {\n        if ( userId ) {\n            this.userIds = [userId];\n        } else {\n            this.userIds = null;\n        }\n    }\n\n    /**\n     * An array of user IDs.\n     * @type {number[]}\n     */\n    get userIds() {\n        return this.prop(UserIdsKey);\n    }\n\n    set userIds(userIds) {\n        this.prop(UserIdsKey, Array.isArray(userIds) ? userIds : null);\n    }\n\n    /**\n     * The \"most recent\" flag.\n     * @type {boolean}\n     */\n    get mostRecent() {\n        return !!this.prop(MostRecentKey);\n    }\n\n    set mostRecent(value) {\n        this.prop(MostRecentKey, !!value);\n    }\n\n    /**\n     * A minimumin date.\n     * @type {Date}\n     */\n    get startDate() {\n        return this.prop(StartDateKey);\n    }\n\n    set startDate(date) {\n        this.prop(StartDateKey, date);\n    }\n\n    /**\n     * A maximum date.\n     * @type {Date}\n     */\n    get endDate() {\n        return this.prop(EndDateKey);\n    }\n\n    set endDate(date) {\n        this.prop(EndDateKey, date);\n    }\n\n    /**\n     * A data path, in dot-delimited notation like `i.watts`.\n     * @type {string}\n     */\n    get dataPath() {\n        return this.prop(DataPathKey);\n    }\n\n    set dataPath(path) {\n        this.prop(DataPathKey, path);\n    }\n\n    /**\n     * An aggregation.\n     * \n     * Including this in a filter will cause SolarNet to return aggregated results, rather\n     * than raw results.\n     * \n     * @type {module:domain~Aggregation}\n     */\n    get aggregation() {\n        return this.prop(AggregationKey);\n    }\n\n    set aggregation(agg) {\n        this.prop(AggregationKey, agg instanceof Aggregation ? agg : null);\n    }\n\n    /**\n     * An array of tags.\n     * @type {string[]}\n     */\n    get tags() {\n        return this.prop(TagsKey);\n    }\n\n    set tags(val) {\n        this.prop(TagsKey, Array.isArray(val) ? val : null);\n    }\n\n    /**\n     * A location, used as an example-based search criteria.\n     * @type {module:domain~Location}\n     */\n    get location() {\n        return this.prop(LocationKey);\n    }\n\n    set location(val) {\n        this.prop(LocationKey, val instanceof Location ? val : null);\n    }\n\n    /**\n     * A general full-text style query string.\n     * @type {string}\n     */\n    get query() {\n        return this.prop(QueryKey);\n    }\n\n    set query(val) {\n        this.prop(QueryKey, val);\n    }\n\n    /**\n     * A metadata filter (LDAP style search criteria).\n     * @type {string}\n     */\n    get metadataFilter() {\n        return this.prop(MetadataFilterKey);\n    }\n\n    set metadataFilter(val) {\n        this.prop(MetadataFilterKey, val);\n    }\n\n    /**\n     * Get the _without total results_ flag.\n     * @type {boolean}\n     */\n    get withoutTotalResultsCount() {\n        return this.prop(WithoutTotalResultsCountKey);\n    }\n\n    set withoutTotalResultsCount(val) {\n        this.prop(WithoutTotalResultsCountKey, !!val);\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * @override\n     * @inheritdoc\n     */\n    toUriEncoding(propertyName, callbackFn) {\n        return super.toUriEncoding(propertyName, callbackFn || datumFilterUriEncodingPropertyMapper);\n    }\n\n}\n\n/**\n * Map DatumFilter properties for URI encoding.\n * \n * @param {string} key the property key\n * @param {*} value the property value\n * @returns {*} 2-element array for mapped key+value, `null` to skip, or `key` to keep as-is\n * @private\n */\nfunction datumFilterUriEncodingPropertyMapper(key, value) {\n    if ( key === NodeIdsKey || key === LocationIdsKey || key === SourceIdsKey || key === UserIdsKey ) {\n        // check for singleton array value, and re-map to singular property by chopping of \"s\"\n        if  ( Array.isArray(value) && value.length === 1 ) {\n            return [key.substring(0, key.length - 1), value[0]];\n        }\n    } else if ( key === StartDateKey || key === EndDateKey ) {\n        return [key, dateTimeUrlFormat(value)];\n    } else if ( key === MostRecentKey && !value ) {\n        return null;\n    }\n    return key;\n}\n\nexport default DatumFilter;\n","/**\n * General metadata with a basic structure.\n * \n * This metadata can be associated with a variety of objects within SolarNetwork, such\n * as users, nodes, and datum.\n * \n * @alias module:domain~GeneralMetadata\n */\nclass GeneralMetadata {\n\n    /**\n     * Constructor.\n     * \n     * @param {Map<string, *>} [info] the general metadata map\n     * @param {Map<string, Map<string, *>>} [propertyInfo] the property metadata map\n     * @param {Set<string>} [tags] the tags\n     */\n    constructor(info, propertyInfo, tags) {\n        this.info = info || null;\n        this.propertyInfo = propertyInfo || null;\n        this.tags = (tags instanceof Set ? tags : Array.isArray(tags) ? new Set(tags) : null);\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        const info = this.info;\n        if ( info ) {\n            result['m'] = stringMapToObject(info);\n        }\n        const propertyInfo = this.propertyInfo;\n        if ( propertyInfo ) {\n            result['pm'] = stringMapToObject(propertyInfo);\n        }\n        const tags = this.tags;\n        if ( tags ) {\n            result['t'] = Array.from(tags);\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~GeneralMetadata} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~GeneralMetadata#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @returns {module:domain~GeneralMetadata} the metadata instance \n     */\n    static fromJsonEncoding(json) {\n        let m, pm, t;\n        if ( json ) {\n            const obj = JSON.parse(json);\n            m = (obj['m'] ? objectToStringMap(obj['m']) : null);\n            pm = (obj['pm'] ? objectToStringMap(obj['pm']) : null);\n            t = (Array.isArray(obj['t']) ? new Set(obj['t']) : null);\n        }\n        return new GeneralMetadata(m, pm, t);\n    }\n}\n\n/**\n * Convert a `Map` into a simple object.\n * \n * The keys are assumed to be strings. Values that are themselves `Map` instances\n * will be converted to simple objects as well.\n * \n * @param {Map<string, *>} strMap a Map with string keys; nested Map objects are also handled\n * @returns {object} a simple object\n * @see {@link objectToStringMap} for the reverse conversion\n * @alias module:domain~stringMapToObject\n */\nfunction stringMapToObject(strMap) {\n    const obj = Object.create(null);\n    if ( strMap ) {\n        for (const [k,v] of strMap) {\n            obj[k] = (v instanceof Map ? stringMapToObject(v) : v);\n        }\n    }\n    return obj;\n}\n\n/**\n * Convert a simple object into a `Map` instance.\n * \n * Property values that are themselves objects will be converted into `Map`\n * instances as well.\n * \n * @param {object} obj a simple object\n * @returns {Map<string, *>} a Map with string keys; nested Map objects are also handled\n * @see {@link module:domain~stringMapToObject} for the reverse conversion\n * @alias module:domain~objectToStringMap\n */\nfunction objectToStringMap(obj) {\n    const strMap = new Map();\n    if ( obj ) {\n        for (const k of Object.keys(obj)) {\n            const v = obj[k];\n            strMap.set(k, (typeof v === 'object' ? objectToStringMap(v) : v));\n        }\n    }\n    return strMap;\n}\n\nexport default GeneralMetadata;\nexport { stringMapToObject, objectToStringMap };\n","import Enum from '../util/enum';\n\n/**\n * A named instruction state.\n * \n * @extends module:util~Enum\n * @alias module:domain~InstructionState\n */\nclass InstructionState extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === InstructionState ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link module:domain~InstructionStates} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn InstructionStateValues;\n\t}\n\n}\n\nconst InstructionStateValues = Object.freeze([\n\tnew InstructionState('Unknown'),\n\tnew InstructionState('Queued'),\n    new InstructionState('Received'),\n    new InstructionState('Executing'),\n    new InstructionState('Declined'),\n    new InstructionState('Completed'),\n]);\n\n/**\n * The enumeration of supported InstructionState values.\n * \n * @readonly\n * @enum {module:domain~InstructionState}\n * @property {module:domain~InstructionState} Unknown an unknown state\n * @property {module:domain~InstructionState} Queued the instruction has been received by SolarNet but not yet delivered to its destination\n * @property {module:domain~InstructionState} Received the instruction has been delivered to its destination but not yet acted upon\n * @property {module:domain~InstructionState} Executed the instruction is currently being acted upon\n * @property {module:domain~InstructionState} Declined the destination has declined to execute the instruction, or the execution failed\n * @property {module:domain~InstructionState} Completed the destination has executed successfully\n * @alias module:domain~InstructionStates\n */\nconst InstructionStates = InstructionState.enumsValue(InstructionStateValues);\n\nexport default InstructionStates;\nexport { InstructionState };","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A location precision object for use with defining named geographic precision.\n * \n * @extends module:util~ComparableEnum\n * @alias module:domain~LocationPrecision\n */\nclass LocationPrecision extends ComparableEnum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} precision a relative precision value for this precision \n     */\n    constructor(name, precision) {\n        super(name, precision);\n        if ( this.constructor === LocationPrecision ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the relative precision value.\n     * \n     * This is an alias for {@link #name}.\n     * \n     * @returns {number} the precision\n     */\n    get precision() {\n        return this.value;\n    }\n\n\t/**\n\t * Get the {@link module:domain~LocationPrecisions} values.\n\t * \n     * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn LocationPrecisionValues;\n\t}\n}\n\nconst LocationPrecisionValues = Object.freeze([\n    new LocationPrecision('LatLong', 1),\n    new LocationPrecision('Block', 5),\n    new LocationPrecision('Street', 10),\n    new LocationPrecision('PostalCode', 20),\n    new LocationPrecision('Locality', 30),\n    new LocationPrecision('StateOrProvince', 40),\n    new LocationPrecision('Region', 50),\n    new LocationPrecision('TimeZone', 60),\n    new LocationPrecision('Country', 70),\n]);\n\n/**\n * The enumeration of supported LocationPrecision values.\n * \n * @readonly\n * @enum {module:domain~LocationPrecision}\n * @property {module:domain~LocationPrecision} LatLong GPS coordinates\n * @property {module:domain~LocationPrecision} Block a city block\n * @property {module:domain~LocationPrecision} Street a street\n * @property {module:domain~LocationPrecision} PostalCode a postal code (or \"zip code\")\n * @property {module:domain~LocationPrecision} Locality a town or city\n * @property {module:domain~LocationPrecision} StateOrProvince a state or province\n * @property {module:domain~LocationPrecision} Region a large region\n * @property {module:domain~LocationPrecision} TimeZone a time zone\n * @property {module:domain~LocationPrecision} Country a country\n * @alias module:domain~LocationPrecisions\n */\nconst LocationPrecisions = LocationPrecision.enumsValue(LocationPrecisionValues);\n\nexport default LocationPrecisions;\nexport { LocationPrecision };","import { Aggregation } from './aggregation';\nimport { LocationPrecision } from './locationPrecision';\n\n/**\n * Get a Set from a Set or array or object, returning `null` if the set would be empty.\n * \n * @param {Object[]|Set<*>} obj the array, Set, or singleton object to get as a Set\n * @returns {Set<*>} the Set, or `null`\n * @private\n */\nfunction setOrNull(obj) {\n\tlet result = null;\n\tif ( obj instanceof Set ) {\n\t\tresult = (obj.size > 0 ? obj : null);\n\t} else if ( Array.isArray(obj) ) {\n\t\tresult = (obj.length > 0 ? new Set(obj) : null);\n\t} else if ( obj ) {\n\t\tresult = new Set([obj]);\n\t}\n\treturn result;\n}\n\n/**\n * Merge two sets.\n * \n * @param {Object[]|Set<*>} [set1] the first set \n * @param {Object[]|Set<*>} [set2] the second set \n * @returns {Set<*>} the merged Set, or `null` if neither arguments are sets or \n *                   neither argument have any values\n * @private\n */\nfunction mergedSets(set1, set2) {\n\tlet s1 = setOrNull(set1);\n\tlet s2 = setOrNull(set2);\n\tif ( s1 === null && s2 === null ) {\n\t\treturn null;\n\t} else if ( s2 === null ) {\n\t\treturn s1;\n\t} else if ( s1 === null ) {\n\t\treturn s2;\n\t} else {\n\t\tfor ( let v of s2.values() ) {\n\t\t\ts1.add(v);\n\t\t}\n\t\treturn s1;\n\t}\n}\n\n\n/**\n * An immutable set of security restrictions that can be attached to other objects, like auth tokens.\n * \n * Use the {@link module:domain~SecurityPolicyBuilder} to create instances of this class with a fluent API.\n * @alias module:domain~SecurityPolicy\n */\nclass SecurityPolicy {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {number[]|Set<number>} [nodeIds] the node IDs to restrict to, or `null` for no restriction\n\t * @param {string[]|Set<string>} [sourceIds] the source ID to restrict to, or `null` for no restriction\n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} [aggregations] the aggregation names to restrict to, or `null` for no restriction\n\t * @param {module:domain~Aggregation} [minAggregation] if specified, a minimum aggregation level that is allowed\n\t * @param {Set<module:domain~LocationPrecision>} [locationPrecisions] the location precision names to restrict to, or `null` for no restriction\n\t * @param {module:domain~LocationPrecision} [minLocationPrecision] if specified, a minimum location precision that is allowed\n\t * @param {Set<string>} [nodeMetadataPaths] the `SolarNodeMetadata` paths to restrict to, or `null` for no restriction\n\t * @param {Set<string>} [userMetadataPaths] the `UserNodeMetadata` paths to restrict to, or `null` for no restriction\n\t */\n    constructor(nodeIds, sourceIds, aggregations, minAggregation, locationPrecisions,\n\t\t\tminLocationPrecision, nodeMetadataPaths, userMetadataPaths) {\n\t\tthis._nodeIds = setOrNull(nodeIds);\n\t\tthis._sourceIds = setOrNull(sourceIds);\n\t\tthis._aggregations = setOrNull(aggregations);\n\t\tthis._minAggregation = (minAggregation instanceof Aggregation ? minAggregation : null);\n\t\tthis._locationPrecisions = setOrNull(locationPrecisions);\n\t\tthis._minLocationPrecision = (minLocationPrecision instanceof LocationPrecision ? minLocationPrecision : null);\n\t\tthis._nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n        this._userMetadataPaths = setOrNull(userMetadataPaths);\n        if ( this.constructor === SecurityPolicy ) {\n            Object.freeze(this);\n        }\n\t}\n\n\t/**\n\t * Get the node IDs.\n\t * \n\t * @returns {Set<number>} the node IDs, or `null`\n\t */\n\tget nodeIds() {\n\t\treturn this._nodeIds;\n\t}\n\n\t/**\n\t * Get the source IDs.\n\t * \n\t * @returns {Set<string>} the source IDs, or `null`\n\t */\n\tget sourceIds() {\n\t\treturn this._sourceIds;\n\t}\n\n\t/**\n\t * Get the aggregations.\n\t * \n\t * @returns {Set<module:domain~Aggregation>} the aggregations, or `null`\n\t */\n\tget aggregations() {\n\t\treturn this._aggregations;\n\t}\n\n\t/**\n\t * Get the location precisions.\n\t * \n\t * @returns {Set<module:domain~LocationPrecision>} the precisions, or `null`\n\t */\n\tget locationPrecisions() {\n\t\treturn this._locationPrecisions;\n\t}\n\n\t/**\n\t * Get the minimum aggregation.\n\t * \n\t * @returns {module:domain~Aggregation} the minimum aggregation, or `null`\n\t */\n\tget minAggregation() {\n\t\treturn this._minAggregation;\n\t}\n\n\t/**\n\t * Get the minimum location precision.\n\t * \n\t * @returns {module:domain~LocationPrecision} the minimum precision, or `null`\n\t */\n\tget minLocationPrecision() {\n\t\treturn this._minLocationPrecision;\n\t}\n\n\t/**\n\t * Get the node metadata paths.\n\t * \n\t * @returns {Set<string>} the node metadata paths, or `null`\n\t */\n\tget nodeMetadataPaths() {\n\t\treturn this._nodeMetadataPaths;\n\t}\n\n\t/**\n\t * Get the user metadata paths.\n\t * \n\t * @returns {Set<string>} the user metadata paths, or `null`\n\t */\n\tget userMetadataPaths() {\n\t\treturn this._userMetadataPaths;\n\t}\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n\t\tlet result = {};\n\t\tlet val = this.nodeIds;\n\t\tif ( val ) {\n\t\t\tresult.nodeIds = Array.from(val);\n\t\t}\n\t\t\n\t\tval = this.sourceIds;\n\t\tif ( val ) {\n\t\t\tresult.sourceIds = Array.from(val);\n\t\t}\n\n\t\tval = this.aggregations;\n\t\tif ( val ) {\n\t\t\tresult.aggregations = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.locationPrecisions;\n\t\tif ( val ) {\n\t\t\tresult.locationPrecisions = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.minAggregation;\n\t\tif ( val ) {\n\t\t\tif ( result.length > 0 ) {\n\t\t\t\tresult += '&';\n\t\t\t}\n\t\t\tresult.minAggregation = val.name;\n\t\t}\n\n\t\tval = this.minLocationPrecision;\n\t\tif ( val ) {\n\t\t\tresult.minLocationPrecision = val.name;\n\t\t}\n\n\t\tval = this.nodeMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.nodeMetadataPaths = Array.from(val);\n\t\t}\n\n\t\tval = this.userMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.userMetadataPaths = Array.from(val);\n\t\t}\n\n\t\treturn JSON.stringify(result);\n    }\n}\n\nconst MIN_AGGREGATION_CACHE = new Map(); // Map<string, Set<Aggregation>>\nconst MIN_LOCATION_PRECISION_CACHE = new Map(); // Map<string, Set<LocationPrecision>>\n\n/**\n * A mutable builder object for {@link module:domain~SecurityPolicy} instances.\n * @alias module:domain~SecurityPolicyBuilder\n */\nclass SecurityPolicyBuilder {\n\n\t/**\n\t * Apply all properties from another SecurityPolicy.\n\t * \n\t * @param {module:domain~SecurityPolicy} policy the SecurityPolicy to apply\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.withAggregations(policy.aggregations)\n\t\t\t\t.withMinAggregation(policy.minAggregation)\n\t\t\t\t.withLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t.withMinLocationPrecision(policy.minLocationPrecision)\n\t\t\t\t.withNodeIds(policy.nodeIds)\n\t\t\t\t.withSourceIds(policy.sourceIds)\n\t\t\t\t.withNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t.withUserMetadataPaths(policy.userMetadataPaths);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Merge all properties from another SecurityPolicy.\n\t * \n\t * @param {module:domain~SecurityPolicy} policy the SecurityPolicy to merge\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.addAggregations(policy.aggregations)\n\t\t\t\t\t.addLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t\t.addNodeIds(policy.nodeIds)\n\t\t\t\t\t.addSourceIds(policy.sourceIds)\n\t\t\t\t\t.addNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t\t.addUserMetadataPaths(policy.userMetadataPaths);\n\t\t\tif ( policy.minAggregation ) {\n\t\t\t\tthis.withMinAggregation(policy.minAggregation);\n\t\t\t}\n\t\t\tif ( policy.minLocationPrecision ) {\n\t\t\t\tthis.withMinLocationPrecision(policy.minLocationPrecision);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithNodeIds(nodeIds) {\n\t\tthis.nodeIds = setOrNull(nodeIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddNodeIds(nodeIds) {\n\t\treturn this.withNodeIds(mergedSets(this.nodeIds, nodeIds));\n\t}\n\n\t/**\n\t * Set the node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithNodeMetadataPaths(nodeMetadataPaths) {\n\t\tthis.nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddNodeMetadataPaths(nodeMetadataPaths) {\n\t\treturn this.withNodeMetadataPaths(mergedSets(this.nodeMetadataPaths, nodeMetadataPaths));\n\t}\n\n\t/**\n\t * Set the user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithUserMetadataPaths(userMetadataPaths) {\n\t\tthis.userMetadataPaths = setOrNull(userMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddUserMetadataPaths(userMetadataPaths) {\n\t\treturn this.withUserMetadataPaths(mergedSets(this.userMetadataPaths, userMetadataPaths));\n\t}\n\n\t/**\n\t * Set the source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithSourceIds(sourceIds) {\n\t\tthis.sourceIds = setOrNull(sourceIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddSourceIds(sourceIds) {\n\t\treturn this.withSourceIds(mergedSets(this.sourceIds, sourceIds));\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} aggregations the aggregations to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithAggregations(aggregations) {\n\t\tthis.aggregations = setOrNull(aggregations);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} aggregations the aggregations to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddAggregations(aggregations) {\n\t\treturn this.withAggregations(mergedSets(this.aggregations, aggregations));\n\t}\n\n\t/**\n\t * Set the location precisions.\n\t * \n\t * @param {module:domain~LocationPrecision[]|Set<module:domain~LocationPrecision>} locationPrecisions the precisions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithLocationPrecisions(locationPrecisions) {\n\t\tthis.locationPrecisions = setOrNull(locationPrecisions);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add location precisions.\n\t * \n\t * @param {module:domain~LocationPrecision[]|Set<module:domain~LocationPrecision>} locationPrecisions the precisions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddLocationPrecisions(locationPrecisions) {\n\t\treturn this.withLocationPrecisions(mergedSets(this.locationPrecisions, locationPrecisions));\n\t}\n\n\t/**\n\t * Set a minimum aggregation level.\n\t * \n\t * @param {module:domain~Aggregation} minAggregation the minimum aggregation level to set\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithMinAggregation(minAggregation) {\n\t\tthis.minAggregation = minAggregation;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of aggregation levels based on the configured `minAggregation`\n\t * and `aggregations` values.\n\t * \n\t * @returns {Set<module:domain~Aggregation>} the aggregation set\n\t * @private\n\t */\n\tbuildAggregations() {\n\t\tconst minAggregation = this.minAggregation;\n\t\tconst aggregations = this.aggregations;\n\t\tif ( !minAggregation && aggregations && aggregations.size > 0 ) {\n\t\t\treturn aggregations;\n\t\t} else if ( !minAggregation ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn Aggregation.minimumEnumSet(minAggregation, MIN_AGGREGATION_CACHE);\n\t}\n\n\t/**\n\t * Treat the configured `locationPrecisions` set as a single\n\t * minimum value or a list of exact values.\n\t * \n\t * By default if `locationPrecisions` is configured with a single\n\t * value it will be treated as a <em>minimum</em> value, and any\n\t * {@link module:domain~LocationPrecision} with a {@link module:domain~LocationPrecision#precision} equal \n\t * to or higher than that value's level will be included in the generated\n\t * {@link module:domain~SecurityPolicy#locationPrecisions} set. Set this to\n\t * `null` to disable that behavior and treat\n\t * `locationPrecisions` as the exact values to include in the\n\t * generated {@link module:domain~SecurityPolicy#locationPrecisions} set.\n\t * \n\t * @param {module:domain~LocationPrecision|null} minLocationPrecision\n\t *        `null` to treat configured location precision values\n\t *        as-is, or else the minimum threshold\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithMinLocationPrecision(minLocationPrecision) {\n\t\tthis.minLocationPrecision = minLocationPrecision;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of location precision levels based on the configured `minLocationPrecision`\n\t * and `locationPrecisions` values.\n\t * \n\t * @returns {Set<module:domain~LocationPrecision>} the precision set\n\t * @private\n\t */\n\tbuildLocationPrecisions() {\n\t\tconst minLocationPrecision = this.minLocationPrecision;\n\t\tconst locationPrecisions = this.locationPrecisions;\n\t\tif ( !minLocationPrecision && locationPrecisions && locationPrecisions.size > 0 ) {\n\t\t\treturn locationPrecisions;\n\t\t} else if ( !minLocationPrecision ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn LocationPrecision.minimumEnumSet(minLocationPrecision, MIN_LOCATION_PRECISION_CACHE);\n\t}\n\n\t/**\n\t * Create a new {@link SecurityPolicy} out of the properties configured on this builder.\n\t * \n\t * @returns {module:domain~SecurityPolicy} the new policy instance\n\t */\n\tbuild() {\n\t\treturn new SecurityPolicy(this.nodeIds, this.sourceIds, \n\t\t\t\tthis.buildAggregations(), this.minAggregation,\n\t\t\t\tthis.buildLocationPrecisions(), this.minLocationPrecision,\n\t\t\t\tthis.nodeMetadataPaths, this.userMetadataPaths);\n\t}\n}\n\nexport default SecurityPolicy;\nexport { SecurityPolicyBuilder };","/** @module domain */\n\nexport { default as Aggregations, Aggregation } from './aggregation';\nexport { default as AuthTokenStatuses, AuthTokenStatus } from './authTokenStatus';\nexport { default as AuthTokenTypes, AuthTokenType } from './authTokenType';\nexport { default as DatumFilter } from './datumFilter';\nexport { default as GeneralMetadata,\n    stringMapToObject,\n    objectToStringMap } from './generalMetadata';\nexport { default as InstructionStates, InstructionState } from './instructionState';\nexport { default as Location } from './location';\nexport { default as LocationPrecisions, LocationPrecision } from './locationPrecision';\nexport { default as Pagination } from './pagination';\nexport { default as SecurityPolicy, SecurityPolicyBuilder } from './securityPolicy';\nexport { default as SortDescriptor } from './sortDescriptor';\n","/**\n * Get an appropriate multiplier value for scaling a given value to a more display-friendly form.\n * \n * This will return values suitable for passing to {@link module:format~displayUnitsForScale}.\n * \n * @param {number} value the value to get a display scale factor for, for example the maximum value\n *                       in a range of values\n * @return {number} the display scale factor\n * @alias module:format~displayScaleForValue\n */\nexport function displayScaleForValue(value) {\n    var result = 1,\n        num = Math.abs(Number(value));\n\tif ( isNaN(num) === false ) {\n\t\tif ( num >= 1000000000 ) {\n\t\t\tresult = 1000000000;\n\t\t} else if ( num >= 1000000 ) {\n\t\t\tresult = 1000000;\n\t\t} else if ( num >= 1000 ) {\n\t\t\tresult = 1000;\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Get an appropriate display unit for a given base unit and scale factor.\n * \n * Use this method to render scaled data value units. Typically you would first call\n * {@link module:module:format~displayScaleForValue}, passing in the largest expected value\n * in a set of data, and then pass the result to this method to generate a display unit\n * for the base unit for that data.\n * \n * For example, given a base unit of `W` (watts) and a maximum data value of `10000`:\n * \n * ```\n * const fmt = import { * } from 'format/scale';\n * const displayScale = fmt.displayScaleForValue(10000);\n * const displayUnit = fmt.displayUnitForScale('W', displayScale);\n * ```\n * \n * The `displayUnit` result in that example would be `kW`.\n *\n * @param {string} baseUnit the base unit, for example `W` or `Wh`\n * @param {number} scale the unit scale, which must be a recognized SI scale, such \n *                       as `1000` for `k`\n * @return {string} the display unit value\n * @alias module:format~displayUnitsForScale\n */\nexport function displayUnitsForScale(baseUnit, scale) {\n\treturn (scale === 1000000000 ? 'G' \n\t\t\t: scale === 1000000 ? 'M' \n\t\t\t: scale === 1000 ? 'k' \n\t\t\t: '') + baseUnit;\n}\n","/** @module format */\n\nexport *  from './date';\nexport *  from './scale';\n","/**\n * A case-insensitive string key multi-value map object.\n * @alias module:util~MultiMap\n */\nclass MultiMap {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {*} [values] an object who's enumerable properties will be added to this map\n\t */\n\tconstructor(values) {\n\t\tthis.mappings = {}; // map of lower-case header names to {name:X, val:[]} values\n\t\tthis.mappingNames = []; // to keep insertion order\n\t\tif ( values ) {\n\t\t\tthis.putAll(values);\n\t\t}\n\t}\n\n\t/**\n\t * Add a value.\n\t * \n\t * This method will append values to existing keys.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to add\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tadd(key, value) {\n\t\treturn addValue(this, key, value);\n\t}\n\n\t/**\n\t * Set a value.\n\t * \n\t * This method will replace any existing values with just <code>value</code>.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to set\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tput(key, value) {\n\t\treturn addValue(this, key, value, true);\n\t}\n\n\t/**\n\t * Set multiple values.\n\t * \n\t * This method will replace any existing values with those provided on <code>values</code>.\n\t * \n\t * @param {*} values an object who's enumerable properties will be added to this map\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tputAll(values) {\n\t\tfor ( let key in values ) {\n\t\t\tif ( values.hasOwnProperty(key) ) {\n                addValue(this, key, values[key], true);\n            }\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the values associated with a key.\n\t * \n\t * @param {string} key the key of the values to get\n\t * @returns {object[]} the array of values associated with the key, or <code>undefined</code> if not available\n\t */\n\tvalue(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst mapping = this.mappings[keyLc];\n\t\treturn (mapping ? mapping.val : undefined);\n\t}\n\n\t/**\n\t * Get the first avaialble value assocaited with a key.\n\t * \n\t * @param {string} key the key of the value to get\n\t * @returns {*} the first available value associated with the key, or <code>undefined</code> if not available\n\t */\n\tfirstValue(key) {\n\t\tconst values = this.value(key);\n\t\treturn (values && values.length > 0 ? values[0] : undefined);\n\t}\n\n\t/**\n\t * Remove all properties from this map.\n\t * \n\t * @returns {module:util~MutliMap} this object\n\t */\n\tclear() {\n\t\tthis.mappingNames.length = 0;\n\t\tthis.mappings = {};\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all values associated with a key.\n\t * \n\t * @param {string} key the key of the values to remove\n\t * @returns {object[]} the removed values, or <code>undefined</code> if no values were present for the given key\n\t */\n\tremove(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst index = this.mappingNames.indexOf(keyLc);\n\t\tconst result = this.mappings[keyLc];\n\t\tif ( result ) {\n\t\t\tdelete this.mappings[keyLc];\n\t\t\tthis.mappingNames.splice(index, 1);\n\t\t}\n\t\treturn (result ? result.val : undefined);\n\t}\n\n\t/**\n\t * Get the number of entries in this map.\n\t * \n\t * @returns {number} the number of entries in the map\n\t */\n\tsize() {\n\t\treturn this.mappingNames.length;\n\t}\n\n\t/**\n\t * Test if the map is empty.\n\t * \n\t * @returns {boolean} <code>true</code> if there are no entries in this map\n\t */\n\tisEmpty() {\n\t\treturn this.size() < 1;\n\t}\n\n\t/**\n\t * Test if there are any values associated with a key.\n\t * \n\t * @param {string} key the key to test\n\t * @returns {boolean} <code>true</code> if there is at least one value associated with the key\n\t */\n\tcontainsKey(key) {\n\t\treturn (this.value(key) !== undefined);\n\t}\n\n\t/**\n\t * Get an array of all keys in this map.\n\t * \n\t * @returns {string[]} array of keys in this map, or an empty array if the map is empty\n\t */\n\tkeySet() {\n\t\tconst result = [];\n\t\tconst len = this.size();\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tresult.push(this.mappings[this.mappingNames[i]].key);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * Add/replace values on a map.\n * \n * @param {module:util~MutliMap} map the map to mutate \n * @param {string} key the key to change \n * @param {*} value the value to add\n * @param {boolean} replace if <code>true</code> then replace all existing values;\n *                          if <code>false</code> append to any existing values\n * @returns {module:util~MutliMap} the passed in <code>map</code>\n * @private\n */\nfunction addValue(map, key, value, replace) {\n\tconst keyLc = key.toLowerCase();\n\tlet mapping = map.mappings[keyLc];\n\tif ( !mapping ) {\n\t\tmapping = {key:key, val:[]};\n\t\tmap.mappings[keyLc] = mapping;\n\t\tmap.mappingNames.push(keyLc);\n\t}\n\tif ( replace ) {\n\t\tmapping.val.length = 0;\n\t}\n\tif ( Array.isArray(value) ) {\n\t\tconst len = value.length;\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tmapping.val.push(value[i]);\n\t\t}\n\t} else {\n\t\tmapping.val.push(value);\n\t}\n\treturn map;\n}\n\nexport default MultiMap;\n","function createGetter(me, prop) {\n\treturn function() { return me.map[prop]; };\n}\n\nfunction createSetter(me, prop) {\n\treturn function(value) { me.map[prop] = value; };\n}\n\nfunction createProperty(me, prop) {\n\tObject.defineProperty(me, prop, {\n\t\tenumerable : true,\n\t\tconfigurable : true,\n\t\tget : createGetter(me, prop),\n\t\tset : createSetter(me, prop)\n\t});\n}\n\n/**\n * A configuration utility object.\n *\n * Properties can be get/set by using the {@link module:util~Configuration#value} function.\n * @alias module:util~Configuration\n */\nclass Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * For any properties passed on `initialMap`, {@link module:util~Configuration#value} will\n\t * be called so those properties are defined on this instance.\n\t *\n\t * @param {object} initialMap the optional initial properties to store\n\t */\n\tconstructor(initialMap) {\n\t\tthis.map = {};\n\t\tif ( initialMap !== undefined ) {\n\t\t\tthis.values(initialMap);\n\t\t}\n\t}\n\n\t/**\n\t * Test if a key is truthy.\n\t *\n\t * @param {string} key the key to test\n\t * @returns {boolean} `true` if the key is enabled\n\t */\n\tenabled(key) {\n\t\tif ( key === undefined ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !!this.map[key];\n\t}\n\n\t/**\n\t * Set or toggle the enabled status of a given key.\n\t *\n\t * <p>If the `enabled` parameter is not passed, then the enabled\n\t * status will be toggled to its opposite value.</p>\n\t *\n\t * @param {string} key they key to set\n\t * @param {boolean} enabled the optional enabled value to set\n\t * @returns {module:util~Configuration} this object to allow method chaining\n\t */\n\ttoggle(key, enabled) {\n\t\tvar val = enabled;\n\t\tif ( key === undefined ) {\n\t\t\treturn this;\n\t\t}\n\t\tif ( val === undefined ) {\n\t\t\t// in 1-argument mode, toggle current value\n\t\t\tval = (this.map[key] === undefined);\n\t\t}\n\t\treturn this.value(key, (val === true ? true : null));\n\t}\n\n\t/**\n\t * Get or set a configuration value.\n\t *\n\t * @param {string} key The key to get or set the value for\n\t * @param {object} [newValue] If defined, the new value to set for the given `key`.\n\t *                            If `null` then the value will be removed.\n\t * @returns {object} If called as a getter, the associated value for the given `key`,\n\t *                   otherwise this object.\n\t */\n\tvalue(key, newValue) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn this.map[key];\n\t\t}\n\t\tif ( newValue === null ) {\n\t\t\tdelete this.map[key];\n\t\t\tif ( this.hasOwnProperty(key) ) {\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t} else {\n\t\t\tthis.map[key] = newValue;\n\t\t\tif ( !this.hasOwnProperty(key) ) {\n\t\t\t\tcreateProperty(this, key);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set multiple properties.\n\t * \n\t * @param {object} [newMap] a map of values to set\n\t * @returns {object} if called as a getter, all properties of this object copied into a simple object;\n\t *                   otherwise this object\n\t */\n\tvalues(newMap) {\n\t\tif ( newMap ) {\n\t\t\tfor ( let prop in newMap ) {\n\t\t\t\tif ( newMap.hasOwnProperty(prop) ) {\n\t\t\t\t\tthis.value(prop, newMap[prop]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn Object.assign({}, this.map);\n\t}\n\n}\n\nexport default Configuration;\n","import Configuration from '../util/configuration';\n\n/**\n * Normailze a protocol value.\n * \n * This method is used to normalize protocol values which might come from a `Location`\n * object and thus contain a trailing colon.\n * \n * @param {String} [val] the protocol value to normalize\n * @returns {String} the normalized protocol value\n * @alias module:net~normalizedProtocol\n */\nfunction normalizedProtocol(val) {\n\tif ( !val ) {\n\t\treturn 'https';\n\t}\n\treturn val.replace(/:$/, '');\n}\n\n/**\n * Normalize the environment configuration.\n * \n * Passing a browser `Location` object, like `window.location`, is supported. The\n * `protocol`, `hostname`, and `port` values will be used.\n * \n * @param {Object} [config] the initial configuration\n * @returns {Object} a new object with normalized configuration values\n * @alias module:net~normalizedConfig\n */\nfunction normalizedConfig(config) {\n\tvar result = Object.assign({\n\t\thost: 'data.solarnetwork.net'\n\t}, config);\n\tresult.protocol = normalizedProtocol(result.protocol || 'https');\n\tresult.port = (result.port || (result.protocol === 'https'  ? 443  : 80));\n\tresult.host = (result.port && result.hostname ? result.hostname : result.host);\n\treturn result;\n}\n\n/**\n * An environment configuration utility object.\n *\n * This extends {@link module:util~Configuration} to add support for standard properties\n * needed to access the SolarNetwork API, such as host and protocol values.\n *\n * @extends module:util~Configuration\n * @alias module:net~Environment\n */\nclass Environment extends Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * This will define the following default properties, if not supplied on the\n\t * `config` argument:\n\t *\n\t * <dl>\n\t * <dt>host</dt><dd>`data.solarnetwork.net`</dd>\n\t * <dt>protocol</dt><dd>`https`</dd>\n\t * <dt>port</dt><dd>`443`</dd>\n\t * </dl>\n\t * \n\t * These properties correspond to those on the `window.location` object when\n\t * running in a browser. Thus to construct an environment based on the location\n\t * of the current page you can create an instance like this:\n\t * \n\t * ```\n\t * const env = new Environment(window.location);\n\t * ```\n\t *\n\t * @param {Object} [config] an optional set of properties to start with\n\t */\n\tconstructor(config) {\n\t\tsuper(normalizedConfig(config));\n\t}\n\n    /**\n\t * Check if TLS is in use via the `https` protocol.\n\t *\n     * @returns {boolean} `true` if the `protocol` is set to `https`\n     */\n\tuseTls() {\n\t\treturn (this.value('protocol') === 'https');\n\t}\n\n}\n\nexport default Environment;\n","import MultiMap from '../util/multiMap';\n\nconst HttpMethod = Object.freeze(\t\n\t/**\n\t * Enumeration of HTTP methods (verbs).\n\t * @enum {string}\n\t * @alias module:net~HttpMethod\n\t * @constant\n\t */\n\t{\n\tGET: 'GET',\n\tHEAD: 'HEAD',\n\tPOST: 'POST',\n\tPUT: 'PUT',\n\tPATCH: 'PATCH',\n\tDELETE: 'DELETE',\n\tOPTIONS: 'OPTIONS',\n\tTRACE: 'TRACE',\n});\n\nconst HttpContentType = Object.freeze(\t\n\t/**\n\t * Enumeration of common HTTP `Content-Type` values.\n\t * @enum {string}\n\t * @alias module:net~HttpContentType\n\t * @constant\n\t */\n\t{\n\t\tAPPLICATION_JSON:\t\t'application/json',\n\t\tAPPLICATION_JSON_UTF8:\t'application/json; charset=UTF-8',\n\t\tFORM_URLENCODED: \t\t'application/x-www-form-urlencoded',\n\t\tFORM_URLENCODED_UTF8:\t'application/x-www-form-urlencoded; charset=UTF-8',\n});\n\n/**\n * Support for HTTP headers.\n * \n * @extends module:util~MultiMap\n * @alias module:net~HttpHeaders\n */\nclass HttpHeaders extends MultiMap {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n\nObject.defineProperties(HttpHeaders, {\n\t/**\n\t * The `Authorization` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'AUTHORIZATION':\t{ value: 'Authorization' },\n\n\t/**\n\t * The `Content-MD5` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_MD5':\t\t{ value: 'Content-MD5' },\n\n\t/**\n\t * The `Content-Type` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_TYPE': \t{ value: 'Content-Type' },\n\n\t/**\n\t * The `Date` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DATE':\t\t\t\t{ value: 'Date' },\n\n\t/**\n\t * The `Digest` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DIGEST':\t\t\t{ value: 'Digest' },\n\n\t/**\n\t * The `Host` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'HOST': \t\t\t{ value: 'Host' },\n\n\t/**\n\t * The `X-SN-Date` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'X_SN_DATE': \t\t{ value: 'X-SN-Date' },\n});\n\nexport default HttpHeaders;\nexport { HttpContentType, HttpMethod };","/**\n * Parse the query portion of a URL string, and return a parameter object for the\n * parsed key/value pairs.\n *\n * <p>Multiple parameters of the same name will be stored as an array on the returned object.</p>\n *\n * @param {string} search the query portion of the URL, which may optionally include\n *                        the leading `?` character\n * @return {object} the parsed query parameters, as a parameter object\n * @alias module:net~urlQueryParse\n */\nfunction urlQueryParse(search) {\n    var params = {};\n    var pairs;\n    var pair;\n    var i, len, k, v;\n    if ( search !== undefined && search.length > 0 ) {\n        // remove any leading ? character\n        if ( search.match(/^\\?/) ) {\n            search = search.substring(1);\n        }\n        pairs = search.split('&');\n        for ( i = 0, len = pairs.length; i < len; i++ ) {\n            pair = pairs[i].split('=', 2);\n            if ( pair.length === 2 ) {\n                k = decodeURIComponent(pair[0]);\n                v = decodeURIComponent(pair[1]);\n                if ( params[k] ) {\n                    if ( !Array.isArray(params[k]) ) {\n                        params[k] = [params[k]]; // turn into array;\n                    }\n                    params[k].push(v);\n                } else {\n                    params[k] = v;\n                }\n            }\n        }\n    }\n    return params;\n}\n\n/**\n * Encode the properties of an object as a URL query string.\n *\n * <p>If an object property has an array value, multiple URL parameters will be encoded for that property.</p>\n *\n * <p>The optional `encoderFn` argument is a function that accepts a string value\n * and should return a URI-safe string for that value.</p>\n *\n * @param {object} parameters an object to encode as URL parameters\n * @param {function} encoderFn an optional function to encode each URI component with;\n *                             if not provided the built-in `encodeURIComponent()` function\n *                             will be used\n * @return {string} the encoded query parameters\n * @alias module:net~urlQueryEncode\n */\nfunction urlQueryEncode(parameters, encoderFn) {\n    var result = '',\n        prop,\n        val,\n        i,\n        len;\n    const encoder = (encoderFn || encodeURIComponent);\n    function handleValue(k, v) {\n        if ( result.length ) {\n            result += '&';\n        }\n        result += encoder(k) + '=' + encoder(v);\n    }\n    if ( parameters ) {\n        for ( prop in parameters ) {\n            if ( parameters.hasOwnProperty(prop) ) {\n                val = parameters[prop];\n                if ( Array.isArray(val) ) {\n                    for ( i = 0, len = val.length; i < len; i++ ) {\n                        handleValue(prop, val[i]);\n                    }\n                } else {\n                    handleValue(prop, val);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport { urlQueryParse, urlQueryEncode };\n\nexport default {\n    urlQueryParse : urlQueryParse,\n    urlQueryEncode : urlQueryEncode,\n}\n","import Base64 from 'crypto-js/enc-base64';\nimport Hex from 'crypto-js/enc-hex';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport SHA256 from 'crypto-js/sha256';\nimport { parse as uriParse } from 'uri-js';\n\nimport { iso8601Date } from '../format/date';\nimport MultiMap from '../util/multiMap';\nimport Environment from './environment';\nimport { HttpMethod, default as HttpHeaders } from './httpHeaders';\nimport { urlQueryParse } from './urlQuery';\n\n/**\n * The number of milliseconds a signing key is valid for.\n * @type {number}\n * @private\n */\nconst SIGNING_KEY_VALIDITY = (7 * 24 * 60 * 60 * 1000);\n\n/**\n * A builder object for the SNWS2 HTTP authorization scheme.\n *\n * This builder can be used to calculate a one-off header value, for example:\n *\n * ```\n * let authHeader = new AuthorizationV2Builder(\"my-token\")\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n * \n * Or the builder can be re-used for a given token:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n *\n * Additionally, a signing key can be generated and re-used for up to 7 days:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\")\n *   .saveSigningKey(\"my-token-secret\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .buildWithSavedKey(); // note previously generated key used\n * ```\n * @alias module:net~AuthorizationV2Builder\n */\nclass AuthorizationV2Builder {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} token the auth token to use\n     * @param {module:net~Environment} [environment] the environment to use; if not provided a default environment will be created \n     */\n    constructor(token, environment) {\n\n        /**\n         * The SolarNet auth token value.\n         * @member {string}\n         */\n        this.tokenId = token;\n\n        /**\n         * The SolarNet environment.\n         * @member {module:net~Environment}\n         */\n        this.environment = (environment || new Environment());\n\n        /**\n         * Force a port number to be added to host values, even if port would be implied.\n         * \n         * This can be useful when working with a server behind a proxy, where the \n         * proxy is configured to always forward the port even if the port is implied\n         * (i.e. HTTPS is used on the standard port 443).\n         * \n         * @member {boolean}\n         */\n        this.forceHostPort = false;\n\n        this.reset();\n    }\n\n    /**\n     * Reset to defalut property values.\n     *\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    reset() {\n        this.contentDigest = null;\n        this.httpHeaders = new HttpHeaders();\n        this.parameters = new MultiMap();\n        this.signedHeaderNames = [];\n        var host = this.environment.host;\n        if ( this.environment.protocol === 'https' || this.environment.port != 80 ) {\n            host += ':' +this.environment.port;\n        }\n        return this.method(HttpMethod.GET).host(host).path('/').date(new Date());\n    }\n\n    /**\n     * Compute and cache the signing key.\n     *\n     * Signing keys are derived from the token secret and valid for 7 days, so\n     * this method can be used to compute a signing key so that {@link module:net~AuthorizationV2Builder#build}\n     * can be called later. The signing date will be set to whatever date is\n     * currently configured via {@link module:net~AuthorizationV2Builder#date}, which defaults to the\n     * current time for newly created builder instances.\n     *\n     * @param {string} tokenSecret the secret to sign the digest with\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    saveSigningKey(tokenSecret) {\n        this.signingKey = this.computeSigningKey(tokenSecret);\n        this.signingKeyExpiration = new Date(this.requestDate.getTime() + SIGNING_KEY_VALIDITY)\n    }\n\n    /**\n     * Test if a signing key is present and not expired.\n     * @readonly\n     * @type {boolean}\n     */\n    get signingKeyValid() {\n        return (this.signingKey && this.signingKeyExpiration instanceof Date\n            && Date.now() < this.signingKeyExpiration.getTime() ? true : false);\n    }\n\n    /**\n     * Set the HTTP method (verb) to use.\n     *\n     * @param {string} val the method to use; see the {@link HttpMethod} enum for possible values\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    method(val) {\n        this.httpMethod = val;\n        return this;\n    }\n\n    /**\n     * Set the HTTP host.\n     *\n     * This is a shortcut for calling `HttpHeaders#put(HttpHeaders.HOST, val)`.\n     *\n     * @param {string} val the HTTP host value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    host(val) {\n        if ( this.forceHostPort && val.indexOf(':') < 0 && this.environment.port != 80 ) {\n            val += ':' +this.environment.port;\n        }\n        this.httpHeaders.put(HttpHeaders.HOST, val);\n        return this;\n    }\n\n    /**\n     * Set the HTTP request path to use.\n     *\n     * @param {string} val the request path to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    path(val) {\n        this.requestPath = val;\n        return this;\n    }\n\n    /**\n     * Set the host, path, and query parameters via a URL string.\n     *\n     * @param {string} url the URL value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    url(url) {\n        const uri = uriParse(url);\n        let host = uri.host;\n        if ( uri.port && (((uri.scheme === 'https' || uri.scheme === 'wss') && uri.port !== 443) \n                || ((uri.scheme === 'http' || uri.scheme === 'ws') && uri.port !== 80)) ) {\n            host += ':' + uri.port;\n        }\n        if ( uri.query ) {\n            this.queryParams(urlQueryParse(uri.query));\n        }\n        return this.host(host).path(uri.path);\n    }\n\n    /**\n     * Set the HTTP content type.\n     *\n     * This is a shortcut for calling {@link HttpHeaders#put} with the key {@link HttpHeaders#CONTENT_TYPE}.\n     *\n     * @param {string} val the HTTP content type value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    contentType(val) {\n        this.httpHeaders.put(HttpHeaders.CONTENT_TYPE, val);\n        return this;\n    }\n\n    /**\n     * Set the authorization request date.\n     *\n     * @param {Date} val the date to use; typically the current time, e.g. `new Date()`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    date(val) {\n        this.requestDate = (val ? val : new Date());\n        return this;\n    }\n\n    /**\n     * The authorization request date as a HTTP header string value.\n     *\n     * @readonly\n     * @type {string}\n     */\n    get requestDateHeaderValue() {\n        return this.requestDate.toUTCString();\n    }\n\n    /**\n     * Control using the `X-SN-Date` HTTP header versus the `Date` header.\n     *\n     * <p>Set to `true` to use the `X-SN-Date` header, `false` to use \n     * the `Date` header. This will return `true` if `X-SN-Date` has been\n     * added to the `signedHeaderNames` property or has been added to the `httpHeaders`\n     * property.</p>\n     *\n     * @type {boolean}\n     */\n    get useSnDate() {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        return existingIndex >= 0 || this.httpHeaders.containsKey(HttpHeaders.X_SN_DATE);\n    }\n\n    set useSnDate(enabled) {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        if ( enabled && existingIndex < 0 ) {\n            signedHeaders = (signedHeaders\n                ? signedHeaders.concat(HttpHeaders.X_SN_DATE)\n                : [HttpHeaders.X_SN_DATE]);\n            this.signedHeaderNames = signedHeaders;\n        } else if ( !enabled && existingIndex >= 0 ) {\n            signedHeaders.splice(existingIndex, 1);\n            this.signedHeaderNames = signedHeaders;\n        }\n\n        // also clear from httpHeaders\n        this.httpHeaders.remove(HttpHeaders.X_SN_DATE);\n    }\n\n    /**\n     * Set the `useSnDate` property.\n     *\n     * @param {boolean} enabled `true` to use the `X-SN-Date` header, `false` to use `Date`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    snDate(enabled) {\n        this.useSnDate = enabled;\n        return this;\n    }\n\n    /**\n     * Set a HTTP header value.\n     *\n     * This is a shortcut for calling `HttpHeaders#put(headerName, val)`.\n     *\n     * @param {string} headerName the header name to set\n     * @param {string} headerValue the header value to set\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    header(headerName, headerValue) {\n        this.httpHeaders.put(headerName, headerValue);\n        return this;\n    }\n\n    /**\n     * Set the HTTP headers to use with the request.\n     *\n     * The headers object must include all headers necessary by the\n     * authentication scheme, and any additional headers also configured via\n     * {@link module:net~AuthorizationV2Builder#signedHttpHeaders}.\n     *\n     * @param {HttpHeaders} headers the HTTP headers to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    headers(headers) {\n        this.httpHeaders = headers;\n        return this;\n    }\n\n    /**\n     * Set the HTTP `GET` query parameters, or `POST` form-encoded\n     * parameters.\n     *\n     * @param {MultiMap|Object} params the parameters to use, as either a {@link MultiMap} or simple `Object`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    queryParams(params) {\n        if ( params instanceof MultiMap ) {\n            this.parameters = params;\n        } else {\n            this.parameters.putAll(params);\n        }\n        return this;\n    }\n\n    /**\n     * Set additional HTTP header names to sign with the authentication.\n     *\n     * @param {sring[]} signedHeaderNames additional HTTP header names to include in the signature\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    signedHttpHeaders(signedHeaderNames) {\n        this.signedHeaderNames = signedHeaderNames;\n        return this;\n    }\n\n    /**\n     * Set the HTTP request body content SHA-256 digest value.\n     *\n     * @param {string|module:crypto-js/enc-hex~WordArray} digest the digest value to use; if a string it is assumed to be Hex encoded\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    contentSHA256(digest) {\n        var contentDigest;\n        if ( typeof digest === 'string' ) {\n            contentDigest = Hex.parse(digest);\n        } else {\n            contentDigest = digest;\n        }\n        this.contentDigest = contentDigest;\n        return this;\n    }\n\n    /**\n     * Compute the SHA-256 digest of the request body content and configure the result on this builder.\n     * \n     * This method will compute the digest and then save the result via the {@link module:net~AuthorizationV2Builder#contentSHA256}\n     * method. In addition, it will set the `Digest` HTTP header value via {@link module:net~AuthorizationV2Builder#header}. \n     * This means you <i>must</i> also pass the `Digest` HTTP header with the request. After calling this\n     * method, you can retrieve the `Digest` HTTP header value via the `httpHeaders`property.\n     * \n     * @param {string} content the request body content to compute a SHA-256 digest value from\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    computeContentDigest(content) {\n        var digest = SHA256(content);\n        this.contentSHA256(digest);\n        this.header('Digest', 'sha-256=' +Base64.stringify(digest));\n        return this;\n    }\n\n    /**\n     * Compute the canonical query parameters.\n     * \n     * @returns {string} the canonical query parameters string value\n     */\n    canonicalQueryParameters() {\n        const keys = this.parameters.keySet();\n        if ( keys.length < 1 ) {\n            return '';\n        }\n        keys.sort();\n        const len = keys.length;\n        var first = true,\n            result = '';\n        for ( let i = 0; i < len; i += 1 ) {\n            let key = keys[i];\n            let vals = this.parameters.value(key);\n            const valsLen = vals.length;\n            for ( let j = 0; j < valsLen; j += 1 ) {\n                if ( first ) {\n                    first = false;\n                } else {\n                    result += '&';\n                }\n                result += _encodeURIComponent(key) + '=' + _encodeURIComponent(vals[j]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical HTTP headers string value.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical headers string value\n     */\n    canonicalHeaders(sortedLowercaseHeaderNames) {\n        var result = '',\n            headerName,\n            headerValue;\n        const len = sortedLowercaseHeaderNames.length;\n        for ( let i = 0; i < len; i += 1 ) {\n            headerName = sortedLowercaseHeaderNames[i];\n            if ( \"date\" === headerName ||  \"x-sn-date\" === headerName ) {\n                headerValue = this.requestDate.toUTCString();\n            } else {\n                headerValue = this.httpHeaders.firstValue(headerName);\n            }\n            result += headerName +':' + (headerValue ? headerValue.trim() : '') + '\\n';\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical signed header names value from an array of HTTP header names.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical signed header names string value\n     * @private\n     */\n    canonicalSignedHeaderNames(sortedLowercaseHeaderNames) {\n        return sortedLowercaseHeaderNames.join(';');\n    }\n\n    /**\n     * Get the canonical request content SHA256 digest, hex encoded.\n     * \n     * @returns {string} the hex-encoded SHA256 digest of the request content\n     */\n    canonicalContentSHA256() {\n        return (this.contentDigest\n            ? Hex.stringify(this.contentDigest)\n            : AuthorizationV2Builder.EMPTY_STRING_SHA256_HEX);\n    }\n\n    /**\n     * Compute the canonical HTTP header names to include in the signature.\n     * \n     * @returns {string[]} the sorted, lower-cased HTTP header names to include\n     */\n    canonicalHeaderNames() {\n        const httpHeaders = this.httpHeaders;\n        const signedHeaderNames = this.signedHeaderNames;\n\n        // use a MultiMap to take advantage of case-insensitive keys\n        const map = new MultiMap();\n\n        map.put(HttpHeaders.HOST, true);\n        if ( this.useSnDate ) {\n            map.put(HttpHeaders.X_SN_DATE, true);\n        } else {\n            map.put(HttpHeaders.DATE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_MD5) ) {\n            map.put(HttpHeaders.CONTENT_MD5, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_TYPE) ) {\n            map.put(HttpHeaders.CONTENT_TYPE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.DIGEST) ) {\n            map.put(HttpHeaders.DIGEST, true);\n        }\n        if ( signedHeaderNames && signedHeaderNames.length > 0 ) {\n            signedHeaderNames.forEach(e => map.put(e, true));\n        }\n        return lowercaseSortedArray(map.keySet());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request.\n     * \n     * @returns {string} the canonical request data\n     */\n    buildCanonicalRequestData() {\n        return this.computeCanonicalRequestData(this.canonicalHeaderNames());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request,\n     * using a specific set of HTTP header names to sign.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to sign with the request\n     * @returns {string} the canonical request data\n     * @private\n     */\n    computeCanonicalRequestData(sortedLowercaseHeaderNames) {\n        // 1: HTTP verb\n        var result = this.httpMethod +'\\n';\n\n        // 2: Canonical URI\n        result += this.requestPath + '\\n';\n\n        // 3: Canonical query string\n        result += this.canonicalQueryParameters() + '\\n';\n\n        // 4: Canonical headers\n        result += this.canonicalHeaders(sortedLowercaseHeaderNames); // already includes newline\n\n        // 5: Signed header names\n        result += this.canonicalSignedHeaderNames(sortedLowercaseHeaderNames) + '\\n';\n\n        // 6: Content SHA256, hex encoded\n        result += this.canonicalContentSHA256();\n\n        return result;\n    }\n\n    /**\n     * Compute the signing key, from a secret key.\n     * \n     * @param {string} secretKey the secret key string \n     * @returns {CryptoJS#Hash} the computed key\n     * @private\n     */\n    computeSigningKey(secretKey) {\n        const datestring = iso8601Date(this.requestDate);\n        const key = HmacSHA256('snws2_request', HmacSHA256(datestring, 'SNWS2' + secretKey));\n        return key;\n    }\n\n    /**\n     * Compute the data to be signed by the signing key.\n     * \n     * @param {string} canonicalRequestData the request data, returned from {@link module:net~AuthorizationV2Builder#buildCanonicalRequestData}\n     * @returns {string} the data to sign\n     * @private\n     */\n    computeSignatureData(canonicalRequestData) {\n        /*- signature data is like:\n\n            SNWS2-HMAC-SHA256\\n\n            20170301T120000Z\\n\n            Hex(SHA256(canonicalRequestData))\n        */\n        return \"SNWS2-HMAC-SHA256\\n\" + iso8601Date(this.requestDate, true) + \"\\n\"\n                + Hex.stringify(SHA256(canonicalRequestData));\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured properties\n     * on the builder, using the provided signing key.\n     * \n     * @param {CryptoJS#Hash} signingKey the key to sign the computed signature data with\n     * @returns {string} the SNWS2 HTTP Authorization header value\n     * @private\n     */\n    buildWithKey(signingKey) {\n        const sortedHeaderNames = this.canonicalHeaderNames();\n        const canonicalReq = this.computeCanonicalRequestData(sortedHeaderNames);\n        const signatureData = this.computeSignatureData(canonicalReq);\n        const signature = Hex.stringify(HmacSHA256(signatureData, signingKey));\n        let result = 'SNWS2 Credential=' + this.tokenId\n            + ',SignedHeaders=' + sortedHeaderNames.join(';')\n            + ',Signature=' +signature;\n        return result;\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured\n     * properties on the builder, computing a new signing key based on the\n     * configured {@link module:net~AuthorizationV2Builder#date}.\n     *\n     * @param {string} tokenSecret the secret to sign the authorization with\n     * @return {string} the SNWS2 HTTP Authorization header value\n     */\n    build(tokenSecret) {\n        const signingKey = this.computeSigningKey(tokenSecret);\n        return this.buildWithKey(signingKey);\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured\n     * properties on the builder, using a signing key configured from a previous\n     * call to {@link module:net~AuthorizationV2Builder#saveSigningKey}.\n     *\n     * @return {string} the SNWS2 HTTP Authorization header value.\n     */\n    buildWithSavedKey() {\n        return this.buildWithKey(this.signingKey);\n    }\n\n}\n\n/**\n * @function stringMatchFn\n * @param {string} e the element to test\n * @returns {boolean} `true` if the element matches\n * @private\n */\n\n\n/**\n * Create a case-insensitive string matching function.\n * \n * @param {string} value the string to perform the case-insensitive comparison against\n * @returns {stringMatchFn} a matching function that performs a case-insensitive comparison\n * @private\n */\nfunction caseInsensitiveEqualsFn(value) {\n    const valueLc = value.toLowerCase();\n    return e => valueLc === e.toString().toLowerCase();\n}\n\n/**\n * Create a new array of lower-cased and sorted strings from another array.\n * \n * @param {string[]} items the items to lower-case and sort\n * @returns {string[]} a new array of the lower-cased and sorted items\n * @private\n */\nfunction lowercaseSortedArray(items) {\n    const sortedItems = [];\n    const len = items.length;\n    for ( let i = 0; i < len; i += 1 ) {\n        sortedItems.push(items[i].toLowerCase());\n    }\n    sortedItems.sort();\n    return sortedItems;\n}\n\nfunction _hexEscapeChar(c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n}\n\nfunction _encodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, _hexEscapeChar);\n}\n\nObject.defineProperties(AuthorizationV2Builder, {\n    /**\n     * The hex-encoded value for an empty SHA256 digest value.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    EMPTY_STRING_SHA256_HEX:    { value: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' },\n\n    /**\n     * The SolarNetwork V2 authorization scheme.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    SNWS2_AUTH_SCHEME:          { value: 'SNWS2' },\n});\n\nexport default AuthorizationV2Builder;\n","import Configuration from '../util/configuration';\nimport Environment from './environment';\n\n/**\n * A utility class for helping to compose SolarNet URLs for the REST API.\n *\n * This class is essentially abstract and meant to have mixin helper objects extend it.\n * @alias module:net~UrlHelper\n */\nclass UrlHelper {\n\n    /**\n     * Constructor.\n     *\n     * @param {module:net~Environment|object} [environment] the optional initial environment to use;\n     *        if a non-`Environment` object is passed then the properties of that object will\n     *        be used to construct a new `Environment` instance\n     */\n    constructor(environment) {\n        let env = (environment instanceof Environment ? environment\n            : new Environment(environment));\n        \n        /**\n         * The environment associated with this helper.\n         * @member {module:net~Environment}\n         */\n        this.environment = env;\n\n        this._parameters = new Configuration();\n    }\n\n    /**\n     * Get a parameters object that can be used to hold URL variables.\n     * \n     * @readonly\n     * @type {module:util~Configuration}\n     */\n    get parameters() {\n        return this._parameters;\n    }\n\n    /**\n     * Get or set an environment parameter.\n     * \n     * This is a shortcut for calling {@link module:net~Configuration#value} on the\n     * `environment` object.\n     * \n     * @param {string} key the environment parameter name to get\n     * @param {object} [val] the optional value to set\n     * @returns {object} when called as a getter, the environment parameter value;\n     *                   when called as a setter, the environment parameters object\n     */\n    env(...args) {\n        return this.environment.value(...args);\n    }\n\n    /**\n     * Get or set a parameter.\n     * \n     * This is a shortcut for calling {@link module:net~Configuration#value} on the\n     * `parameters` object.\n     * \n     * @param {string} key the parameter name to get\n     * @param {Object} [val] the optional value to set\n     * @returns {Object} when called as a getter, the parameter value;\n     *                   when called as a setter, the parameters object\n     */\n    parameter(...args) {\n        return this._parameters.value(...args);\n    }\n\n    /**\n     * Get a URL for just the SolarNet host, without any path.\n     *\n     * @returns {string} the URL to the SolarNet host\n     */\n    hostUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'http' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n    \n    /**\n     * Get a URL for just the SolarNet host using the WebSocket protocol, without any path.\n     * \n     * @returns {string} the URL to the SolarNet host WebSocket\n     */\n    hostWebSocketUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'ws' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n\n\t/**\n\t * Get the base URL to the REST API.\n\t * \n\t * This implementation is a stub, meant for subclasses to override. This implementation\n     * simply returns {@link module:net~UrlHelper#hostUrl}.\n\t * \n     * @abstract\n\t * @returns {string} the base URL to the REST API\n\t */\n\tbaseUrl() {\n\t\treturn this.hostUrl();\n\t}\n\n    /**\n     * Replace occurances of URL template variables with values from the `parameters`\n     * property and append to the host URL.\n     * \n     * This method provides a way to resolve an absolute URL based on the configured\n     * environment and parameters on this object.\n     * \n     * @param {string} template a URL path template\n     * @returns {string} an absolute URL\n     * @see module:net~UrlHelper#resolveTemplateUrl\n     */\n    resolveTemplatePath(template) {\n        return this.hostUrl() + this.resolveTemplateUrl(template);\n    }\n\n     /**\n     * Replace occurances of URL template variables with values from the `parameters`\n     * property.\n     * \n     * URL template variables are specified as `{<em>name</em>}`. The variable\n     * will be replaced by the value associated with property `name` in the\n     * `parameters` object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @returns {string} the URL with template variables resolved\n     */\n   resolveTemplateUrl(template) {\n        return UrlHelper.resolveTemplateUrl(template, this._parameters);\n    }\n\n    /**\n     * Replace occurances of URL template variables with values from a parameter object.\n     * \n     * URL template variables are specified as `{<em>name</em>}`. The variable\n     * will be replaced by the value associated with property `name` in the\n     * provided parameter object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @param {object} params an object whose properties should serve as template variables\n     * @returns {string} the URL\n     */\n    static resolveTemplateUrl(template, params) {\n        return template.replace(/\\{([^}]+)\\}/g, function(match, variableName) {\n            let variableValue = params[variableName];\n            return (variableValue !== undefined ? encodeURIComponent(variableValue) : '');\n        });\n    }\n\n}\n\nexport default UrlHelper;\n","const LocationIdsKey = 'locationIds';\nconst SourceIdsKey = 'sourceIds';\n\n/**\n * Create a LocationUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~LocationUrlHelperMixin} the mixin class\n */\nconst LocationUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds support for SolarLocation properties to a {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~LocationUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * The first available location ID from the `locationIds` property.\n     * Setting this replaces any existing location IDs with an array of just that value.\n     * @type {number}\n     */\n    get locationId() {\n        const locationIds = this.locationIds;\n        return (Array.isArray(locationIds) && locationIds.length > 0 ? locationIds[0] : null);\n    }\n\n    set locationId(locationId) {\n        this.parameter(LocationIdsKey, locationId ? [locationId] : null);\n    }\n\n    /**\n     * An array of location IDs, set on the `locationIds` parameter\n     * @type {number[]}\n     */\n    get locationIds() {\n        return this.parameter(LocationIdsKey);\n    }\n\n    set locationIds(locationIds) {\n        this.parameter(LocationIdsKey, locationIds);\n    }\n\n    /**\n     * The first available source ID from the `sourceIds` property.\n     * Setting this replaces any existing location IDs with an array of just that value.\n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        this.parameter(SourceIdsKey, sourceId ? [sourceId] : sourceId);\n    }\n\n    /**\n     * An array of source IDs, set on the `sourceIds` parameter\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.parameter(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.parameter(SourceIdsKey, sourceIds);\n    }\n\n    /**\n     * Generate a URL to find locations based on a search criteria.\n     * \n     * @param {module:domain~Location} filter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n     * @returns {string} the generated URL\n     */\n    findLocationsUrl(filter, sorts, pagination) {\n        return this.baseUrl() + '/location?' +filter.toUriEncodingWithSorting(sorts, pagination);\n    }\n\n}\n\nexport default LocationUrlHelperMixin;\n","/** \n * The SolarQuery default path.\n * @type {string}\n * @alias module:net~SolarQueryDefaultPath\n */\nexport const SolarQueryDefaultPath = '/solarquery';\n\n/** \n * The {@link module:net~UrlHelper#parameters} key for the SolarQuery path.\n * @type {string}\n * @alias module:net~SolarQueryPathKey\n */\nexport const SolarQueryPathKey = 'solarQueryPath';\n\n/** \n * The SolarQuery REST API path.\n * @type {string}\n * @alias module:net~SolarQueryApiPathV1\n */\nexport const SolarQueryApiPathV1 = '/api/v1';\n\n/** \n * The {@link module:net~UrlHelper#parameters} key that holds a `boolean` flag to\n * use the public path scheme (`/pub`) when constructing URLs.\n * @type {string}\n * @alias module:net~SolarQueryPublicPathKey\n */\nexport const SolarQueryPublicPathKey = 'publicQuery';\n\n/**\n * Create a QueryUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~QueryUrlHelperMixin} the mixin class\n */\nconst QueryUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarQuery specific support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~QueryUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Flag to set the `publicQuery` environment parameter.\n     * @type {boolean}\n     */\n    get publicQuery() {\n        return !!this.env(SolarQueryPublicPathKey);\n    }\n\n    set publicQuery(value) {\n        this.env(SolarQueryPublicPathKey, !!value);\n    }\n\n\t/**\n\t * Get the base URL to the SolarQuery v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the `hostUrl`, the `solarQueryPath` context path,\n     * and the `publicQuery` boolean flag. If the context path is not \n     * available, it will default to `/solarquery`.\n\t * \n\t * @returns {string} the base URL to SolarQuery\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarQueryPathKey) || SolarQueryDefaultPath;\n        const isPubPath = this.publicQuery;\n\t\treturn this.hostUrl() + path + SolarQueryApiPathV1\n            +(isPubPath ? '/pub' : '/sec');\n\t}\n\n};\n\nexport default QueryUrlHelperMixin;\n","import UrlHelper from './urlHelper';\nimport LocationUrlHelperMixin from './locationUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin'\n\n/**\n * Create a LocationDatumMetadataUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~LocationDatumMetadataUrlHelperMixin} the mixin class\n */\nconst LocationDatumMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum metadata support to {@link module:net~UrlHelper}.\n * \n * <p>Location datum metadata is metadata associated with a specific location and source, i.e. \n * a `locationId` and a `sourceId`.\n * \n * @mixin\n * @alias module:net~LocationDatumMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get a base URL for location datum metadata operations using a specific location ID.\n     * \n     * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n     * @returns {string} the base URL\n     * @private\n     */\n    baseLocationDatumMetadataUrl(locationId) {\n        return this.baseUrl() + '/location/meta/' +(locationId || this.locationId);\n    }\n\n    locationDatumMetadataUrlWithSource(locationId, sourceId) {\n        let result = this.baseLocationDatumMetadataUrl(locationId);\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            result += '?sourceId=' +encodeURIComponent(source);\n        }\n        return result;\n    }\n\n\t/**\n\t * Generate a URL for viewing datum metadata.\n     * \n     * If no `sourceId` is provided, then the API will return all available datum metadata for all sources.\n\t *\n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the `sourceId` property of this class will be used;\n     *                            if `null` then ignore any `sourceId` property of this class\n     * @returns {string} the URL\n\t */\n\tviewLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n    \n\t/**\n\t * Generate a URL for adding (merging) datum metadata via a `POST` request.\n     * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the `sourceId` property of this class will be used\n     * @returns {string} the URL\n\t */\n    addLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for setting datum metadata via a `PUT` request.\n     * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the `sourceId` property of this class will be used\n     * @returns {string} the URL\n\t */\n    replaceLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for deleting datum metadata via a `DELETE` request.\n     * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the `sourceId` property of this class will be used\n     * @returns {string} the URL\n\t */\n    deleteLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for searching for location metadata.\n\t * \n     * @param {module:domain~DatumFilter} [filter] a search filter; the `locationIds`, `sourceIds`, `tags`,\n\t *                                    `query`, and `location` properties are supported \n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindLocationDatumMetadataUrl(filter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/location/meta'\n\t\tlet params = filter.toUriEncodingWithSorting(sorts, pagination);\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~LocationDatumMetadataUrlHelperMixin},  \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~LocationUrlHelperMixin} mixins.\n * \n * @mixes module:net~LocationDatumMetadataUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~LocationUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~LocationDatumMetadataUrlHelper\n */\nclass LocationDatumMetadataUrlHelper extends LocationDatumMetadataUrlHelperMixin(QueryUrlHelperMixin(LocationUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default LocationDatumMetadataUrlHelperMixin;\nexport { LocationDatumMetadataUrlHelper };\n","import { dateTimeUrlFormat } from '../format/date';\nimport UrlHelper from './urlHelper';\nimport LocationUrlHelperMixin from './locationUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin';\n\n/**\n * Create a LocationDatumUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~LocationDatumUrlHelperMixin} the mixin class\n */\nconst LocationDatumUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarLocation datum query support to {@link module:net~UrlHelper}.\n * \n * <p>This mixin is commonly mixed with the {@link module:net~QueryUrlHelperMixin} to pick\n * up support for the SolarQuery base URL.</p>\n * \n * <p>This mixin is commonly mixed with the {@link module:net~LocationUrlHelperMixin} to\n * pick up support for `locationId` and `sourceId` properties.</p>\n * \n * @mixin\n * @alias module:net~LocationDatumUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for the \"reportable interval\" for a location, optionally limited to a specific source ID.\n\t *\n     * If no source IDs are provided, then the reportable interval query will return an interval for\n     * all available sources.\n     *\n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to limit query to; \n     *                 if not provided the `sourceId` property of this class will be used;\n     *                 if `null` the `sourceId` property of this class will be ignored\n\t * @returns {string} the URL\n\t */\n\treportableIntervalUrl(locationId, sourceId) {\n        let url = this.baseUrl() +'/location/datum/interval?locationId=' \n            +(locationId || this.locationId);\n        let source = (sourceId || this.sourceId);\n\t\tif ( sourceId !== null && source ) {\n\t\t\turl += '&sourceId=' + encodeURIComponent(source);\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Generate a URL for finding the available source IDs for a location or metadata filter.\n\t * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId`\n     *                              property of this class will be used\n\t * @param {Date} [startDate] a start date to limit the search to\n     * @param {Date} [endDate] an end date to limit the search to\n\t * @returns {string} the URL\n\t */\n\tavailableSourcesUrl(locationId, startDate, endDate) {\n\t\tlet result = this.baseUrl() + '/location/datum/sources?locationId='\n            +(locationId || this.locationId);\n        if ( startDate instanceof Date ) {\n            result += '&start=' +encodeURIComponent(dateTimeUrlFormat(startDate));\n        }\n        if ( endDate instanceof Date ) {\n            result += '&end=' +encodeURIComponent(dateTimeUrlFormat(endDate));\n        }\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate a URL for querying for location datum, in either raw or aggregate form.\n\t * \n\t * If the `datumFilter` has an `aggregate` value set, then aggregate results will be\n\t * returned by SolarNet.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tlistDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/location/datum/list';\n\t\tlet params = (datumFilter ? datumFilter.toUriEncodingWithSorting(sorts, pagination) : '');\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate a URL for querying for the most recent datum.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tmostRecentDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/location/datum/mostRecent';\n\t\tlet params = (datumFilter ? datumFilter.toUriEncodingWithSorting(sorts, pagination) : '');\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~LocationDatumUrlHelperMixin}, \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~LocationUrlHelperMixin} mixins.\n * \n * @mixes module:net~LocationDatumUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~LocationUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~LocationDatumUrlHelper\n */\nclass LocationDatumUrlHelper extends LocationDatumUrlHelperMixin(QueryUrlHelperMixin(LocationUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default LocationDatumUrlHelperMixin;\nexport { LocationDatumUrlHelper };\n","const NodeIdsKey = 'nodeIds';\nconst SourceIdsKey = 'sourceIds';\n\n/**\n * Create a NodeUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeUrlHelperMixin} the mixin class\n */\nconst NodeUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds support for SolarNode properties to a {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * The first available node ID from the `nodeIds` property.\n     * Setting this replaces any existing node IDs with an array of just that value.\n     * @type {number}\n     */\n    get nodeId() {\n        const nodeIds = this.nodeIds;\n        return (Array.isArray(nodeIds) && nodeIds.length > 0 ? nodeIds[0] : null);\n    }\n\n    set nodeId(nodeId) {\n        this.parameter(NodeIdsKey, nodeId ? [nodeId] : null);\n    }\n\n    /**\n     * An array of node IDs, set on the `nodeIds` parameter\n     * @type {number[]}\n     */\n    get nodeIds() {\n        return this.parameter(NodeIdsKey);\n    }\n\n    set nodeIds(nodeIds) {\n        this.parameter(NodeIdsKey, nodeIds);\n    }\n\n    /**\n     * The first available source ID from the `sourceIds` property.\n     * Setting this replaces any existing node IDs with an array of just that value.\n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        this.parameter(SourceIdsKey, sourceId ? [sourceId] : sourceId);\n    }\n\n    /**\n     * An array of source IDs, set on the `sourceIds` parameter\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.parameter(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.parameter(SourceIdsKey, sourceIds);\n    }\n\n}\n\nexport default NodeUrlHelperMixin;\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin'\n\n\n/**\n * Create a NodeDatumUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeDatumMetadataUrlHelperMixin} the mixin class\n */\nconst NodeDatumMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum metadata support to {@link module:net~UrlHelper}.\n * \n * <p>Datum metadata is metadata associated with a specific node and source, i.e. \n * a <code>nodeId</code> and a <code>sourceId</code>.\n * \n * @mixin\n * @alias module:net~NodeDatumMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get a base URL for datum metadata operations using a specific node ID.\n     * \n     * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n     * @returns {string} the base URL\n     * @private\n     */\n    baseNodeDatumMetadataUrl(nodeId) {\n        return this.baseUrl() + '/datum/meta/' +(nodeId || this.nodeId);\n    }\n\n    nodeDatumMetadataUrlWithSource(nodeId, sourceId) {\n        let result = this.baseNodeDatumMetadataUrl(nodeId);\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            result += '?sourceId=' +encodeURIComponent(source);\n        }\n        return result;\n    }\n\n\t/**\n\t * Generate a URL for viewing datum metadata.\n     * \n     * If no <code>sourceId</code> is provided, then the API will return all available datum metadata for all sources.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n     * @returns {string} the URL\n\t */\n\tviewNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n    \n\t/**\n\t * Generate a URL for adding (merging) datum metadata via a <code>POST</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    addNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for setting datum metadata via a <code>PUT</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    replaceNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for deleting datum metadata via a <code>DELETE</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    deleteNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for searching for datum metadata.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n\t * @param {SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindNodeDatumMetadataUrl(nodeId, sourceId, sorts, pagination) {\n        let result = this.baseNodeDatumMetadataUrl(nodeId);\n\t\tlet params = '';\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            params += 'sourceId=' +encodeURIComponent(source);\n        }\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n    userMetadataUrl(userId) {\n        let result = this.baseUrl() +'/users/meta';\n        let userParam = (userId || this.userId);\n        if ( Array.isArray(userParam) ) {\n            if ( userParam.length > 0 ) {\n                userParam = userParam[0];\n            } else {\n                userParam = null;\n            }\n        }\n        if ( userParam && userId !== null ) {\n            result += '/' +userParam;\n        }\n        return result;\n    }\n\n    /**\n\t * Generate a URL for viewing a specific user's metadata via a `GET` request.\n\t * \n\t * Note this URL is similar to {@link module:net~UserMetadataUrlHelperMixin#viewUserMetadataUrl}\n\t * but is for the read-only SolarQuery API, rather than the read-write SolarUser API.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the `userId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n    viewUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeDatumMetadataUrlHelperMixin},  \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeDatumMetadataUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeDatumMetadataUrlHelper\n */\nclass NodeDatumMetadataUrlHelper extends NodeDatumMetadataUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeDatumMetadataUrlHelperMixin;\nexport { NodeDatumMetadataUrlHelper };\n","import DatumFilter from '../domain/datumFilter';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin';\n\n/**\n * Create a NodeDatumUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeDatumUrlHelperMixin} the mixin class\n */\nconst NodeDatumUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum query support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeDatumUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for the \"reportable interval\" for a node, optionally limited to a specific set of source IDs.\n\t *\n     * If no source IDs are provided, then the reportable interval query will return an interval for\n     * all available sources.\n     *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @param {string[]} [sourceIds] an array of source IDs to limit query to; if not provided the `sourceIds` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\treportableIntervalUrl(nodeId, sourceIds) {\n\t\tlet url = (this.baseUrl() +'/range/interval?nodeId=' +(nodeId || this.nodeId));\n        let sources = (sourceIds || this.sourceIds);\n\t\tif ( Array.isArray(sources) && sources.length > 0 ) {\n\t\t\turl += '&sourceIds=' + sources.map(e => encodeURIComponent(e)).join(',');\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Generate a URL for finding the available source IDs for a node or metadata filter.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria, which can define `nodeId`, `startDate`, `endDate`,\n\t *                                                and `metadataFilter` properties to limit the results to; if `nodeId` not\n\t *                                                provided the `nodeIds` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tavailableSourcesUrl(datumFilter) {\n\t\tconst filter = (datumFilter || this.datumFilter());\n\t\tlet result = this.baseUrl() + '/range/sources';\n\t\tconst params = filter.toUriEncoding();\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate a URL for querying for datum, in either raw or aggregate form.\n\t * \n\t * If the `datumFilter` has an `aggregate` value set, then aggregate results will be\n\t * returned by SolarNet.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tlistDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/datum/list';\n\t\tconst filter = (datumFilter || this.datumFilter());\n\t\tconst params = filter.toUriEncodingWithSorting(sorts, pagination);\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get a new {@link module:domain~DatumFilter} configured with properties of this instance.\n\t * \n\t * This will configure the following properties:\n\t * \n\t *  * `nodeIds`\n\t *  * `sourceIds`\n\t * \n\t * @returns {module:domain~DatumFilter} the filter\n\t */\n\tdatumFilter() {\n\t\tconst filter = new DatumFilter();\n\t\tlet v;\n\t\t\n\t\tv = this.nodeIds;\n\t\tif ( v ) {\n\t\t\tfilter.nodeIds = v;\n\t\t}\n\n\t\tv = this.sourceIds;\n\t\tif ( v ) {\n\t\t\tfilter.sourceIds = v;\n\t\t}\n\n\t\treturn filter;\n\t}\n\n\t/**\n\t * Generate a URL for querying for the most recent datum.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tmostRecentDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/datum/mostRecent';\n\t\tconst filter = (datumFilter || this.datumFilter());\n\t\tconst params = filter.toUriEncodingWithSorting(sorts, pagination);\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeDatumUrlHelperMixin}, \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeDatumUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeDatumUrlHelper\n */\nclass NodeDatumUrlHelper extends NodeDatumUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeDatumUrlHelperMixin;\nexport { NodeDatumUrlHelper };\n","/** \n * The SolarUser default path.\n * @type {string}\n * @alias module:net~SolarUserDefaultPath\n */\nexport const SolarUserDefaultPath = '/solaruser';\n\n/**\n * The {@link module:net~UrlHelper} parameters key for the SolarUser path.\n * @type {string}\n * @alias module:net~SolarUserPathKey\n */\nexport const SolarUserPathKey = 'solarUserPath';\n\n/** \n * The SolarUser REST API path.\n * @type {string}\n * @alias module:net~SolarUserApiPathV1\n */\nexport const SolarUserApiPathV1 = '/api/v1/sec';\n\nconst UserIdsKey = 'userIds';\n\n/**\n * Create a UserUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserUrlHelperMixin} the mixin class\n */\nconst UserUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarUser specific support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get the default user ID.\n     * \n     * This gets the first available user ID from the `userIds` property.\n     * \n     * @returns {number} the default user ID, or `null`\n     */\n    get userId() {\n        const userIds = this.parameter(UserIdsKey);\n        return (Array.isArray(userIds) && userIds.length > 0 ? userIds[0] : null);\n    }\n\n    /**\n     * Set the user ID.\n     * \n     * This will set the `userIds` property to a new array of just the given value.\n     * \n     * @param {number} userId the user ID to set\n     */\n    set userId(userId) {\n        this.parameter(UserIdsKey, [userId]);\n    }\n\n    get userIds() {\n        return this.parameter(UserIdsKey);\n    }\n\n    set userIds(userIds) {\n        this.parameter(UserIdsKey, userIds);\n    }\n\n\t/**\n\t * Get the base URL to the SolarUser v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the `hostUrl` and a `solarUserPath` context path.\n\t * If the context path is not available, it will default to \n\t * `/solaruser`.\n\t * \n\t * @returns {string} the base URL to SolarUser\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarUserPathKey) || SolarUserDefaultPath;\n\t\treturn super.baseUrl() + path + SolarUserApiPathV1;\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all active nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's active nodes\n\t */\n\tviewNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all pending nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's pending nodes\n\t */\n\tviewPendingNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/pending';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all archived nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's archived nodes\n\t */\n\tviewArchivedNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/archived';\n\t}\n\n\t/**\n\t * Generate a URL to update the archived status of a set of nodes via a `POST` request.\n\t *\n\t * @param {number|number[]|null} nodeId a specific node ID, or array of node IDs, to update; if not provided the \n\t *                                      `nodeIds` property of this class will be used\n\t * @param {boolean} archived `true` to mark the nodes as archived; `false` to un-mark\n\t *                           and return to normal status\n\t * @return {string} the URL to update the nodes archived status\n\t */\n\tupdateNodeArchivedStatusUrl(nodeId, archived) {\n\t\tconst nodeIds = Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : this.nodeIds;\n\t\tlet result = this.baseUrl() + '/nodes/archived?nodeIds='\n\t\t\t+nodeIds.join(',') +'&archived='\n\t\t\t+(archived ? 'true' : 'false');\n\t\treturn result;\n\t}\n\n}\n\nexport default UserUrlHelperMixin;\n","import UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a NodeInstructionUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeInstructionUrlHelperMixin} the mixin class\n */\nconst NodeInstructionUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode instruction support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeInstructionUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL to get all details for a specific instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to get\n\t * @returns {string} the URL\n\t */\n\tviewInstructionUrl(instructionId) {\n\t\treturn (this.baseUrl() +'/instr/view?id=' +encodeURIComponent(instructionId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing active instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewActiveInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewActive?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing pending instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewPendingInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewPending?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for changing the state of an instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to update\n\t * @param {InstructionState} state the instruction state to set\n\t * @returns {string} the URL\n\t * @see the {@link InstructionStates} enum for possible state values\n\t */\n\tupdateInstructionStateUrl(instructionId, state) {\n\t\treturn (this.baseUrl()\n\t\t\t+'/instr/updateState?id=' +encodeURIComponent(instructionId)\n\t\t\t+'&state=' +encodeURIComponent(state.name));\n\t}\n\n\t/**\n\t * Generate a URL for posting an instruction request.\n\t *\n\t * @param {string} topic the instruction topic.\n\t * @param {Object[]} [parameters] an array of parameter objects in the form <code>{name:n1, value:v1}</code>.\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tqueueInstructionUrl(topic, parameters, nodeId) {\n\t\tvar url = (this.baseUrl()\n\t\t\t+'/instr/add?nodeId=' +(nodeId || this.nodeId)\n\t\t\t+'&topic=' +encodeURIComponent(topic));\n\t\tvar i, len;\n\t\tif ( Array.isArray(parameters) ) {\n\t\t\tfor ( i = 0, len = parameters.length; i < len; i++ ) {\n\t\t\t\turl += '&' +encodeURIComponent('parameters['+i+'].name') +'=' +encodeURIComponent(parameters[i].name)\n\t\t\t\t\t+ '&' +encodeURIComponent('parameters['+i+'].value') +'=' +encodeURIComponent(parameters[i].value);\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Create an instruction parameter suitable to passing to {@link NodeInstructionUrlHelperMixin#queueInstructionUrl}.\n\t * \n\t * @param {string} name the parameter name \n\t * @param {*} value the parameter value\n\t * @returns {object} with <code>name</code> and <code>value</code> properties\n\t */\n\tstatic instructionParameter(name, value) {\n\t\treturn {name:name, value:value};\n\t}\n};\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~NodeInstructionUrlHelperMixin},  \n * {@link module:net~UserUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeInstructionUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeInstructionUrlHelper\n */\nclass NodeInstructionUrlHelper extends NodeInstructionUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\n/**\n * The static {@link NodeInstructionUrlHelperMixin#instructionParameter} method so it can be imported directly.\n * \n * @alias module:net~instructionParameter\n */\nconst instructionParameter = NodeInstructionUrlHelper.instructionParameter;\n\nexport default NodeInstructionUrlHelperMixin;\nexport { instructionParameter, NodeInstructionUrlHelper };","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a NodeMetadataUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeMetadataUrlHelperMixin} the mixin class\n */\nconst NodeMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode metadata support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for viewing the configured node's metadata.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewNodeMetadataUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/nodes/meta/' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for adding metadata to a node via a `POST` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\taddNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for setting the metadata of a node via a `PUT` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\treplaceNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for deleting the metadata of a node via a `DELETE` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tdeleteNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for searching for node metadata.\n\t * \n\t * @param {number|number[]} [nodeId] a specific node ID, or array of node IDs, to use; if not provided the \n\t *                                   `nodeIds` property of this class will be used, unless `null`\n\t *                                   is passed in which case no node IDs will be added to the URL so that all available\n\t *                                   node metadata objects will be returned\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindNodeMetadataUrl(nodeId, sorts, pagination) {\n\t\tconst nodeIds = (Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : nodeId !== null ? this.nodeIds : undefined);\n\t\tlet result = this.baseUrl() + '/nodes/meta';\n\t\tlet params = '';\n\t\tif ( Array.isArray(nodeIds) ) {\n\t\t\tparams += 'nodeIds=' +nodeIds.join(',');\n\t\t}\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeMetadataUrlHelperMixin},  \n * {@link module:net~UserUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeMetadataUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeMetadataUrlHelper\n */\nclass NodeMetadataUrlHelper extends NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeMetadataUrlHelperMixin;\nexport { NodeMetadataUrlHelper };\n","import UrlHelper from './urlHelper';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a UserAuthTokenUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserAuthTokenUrlHelperMixin} the mixin class\n */\nconst UserAuthTokenUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds security token support to a SolarUser {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserAuthTokenUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Generate a URL for listing all available auth tokens.\n     * \n\t * @returns {string} the URL\n     */\n    listAllAuthTokensUrl() {\n        return this.baseUrl() + '/user/auth-tokens';\n    }\n\n    /**\n     * Generate a URL for creating a new auth token, via a `POST` request.\n     * \n     * The request body accepts a {@link module:domain~SecurityPolicy} JSON document.\n     * \n     * @param {AuthTokenType} type the auth token type to generate\n\t * @returns {string} the URL\n     */\n    generateAuthTokenUrl(type) {\n        return this.baseUrl() + '/user/auth-tokens/generate/' +type.name;\n    }\n\n    /**\n     * Generate a URL for accessing an auth token.\n     * \n     * @param {string} tokenId the token ID\n\t * @returns {string} the URL\n     * @private\n     */\n    authTokenUrl(tokenId) {\n        return this.baseUrl() + '/user/auth-tokens/' +encodeURIComponent(tokenId);\n    }\n\n    /**\n     * Generate a URL for deleting an auth token, via a `DELETE` request.\n     * \n     * @param {string} tokenId the token ID to delete\n\t * @returns {string} the URL\n     */\n    deleteAuthTokenUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating (merging) a security policy on an auth token,\n     * via a `PATCH` request.\n     * \n     * The request body accepts a {@link module:net~SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     */\n    updateAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for replacing a security policy on an auth token,\n     * via a `PUT` request.\n     * \n     * The request body accepts a {@link module:domain~SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     */\n    replaceAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating the status of an auth token,\n     * via a `POST` request.\n     * \n     * @param {string} tokenId the ID of the token to update\n     * @param {AuthTokenStatus} status the status to change to\n\t * @returns {string} the URL\n     */\n    updateAuthTokenStatusUrl(tokenId, status) {\n        return this.authTokenUrl(tokenId) + '?status=' +encodeURIComponent(status.name);\n    }\n}\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~UserAuthTokenUrlHelperMixin} and  \n * {@link module:net~UserUrlHelperMixin} mixins.\n * \n * @mixes module:net~UserAuthTokenUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~UserAuthTokenUrlHelper\n */\nclass UserAuthTokenUrlHelper extends UserAuthTokenUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {\n\n }\n\nexport default UserAuthTokenUrlHelperMixin;\nexport { UserAuthTokenUrlHelper };\n","import UrlHelper from './urlHelper';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a UserMetadataUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserMetadataUrlHelperMixin} the mixin class\n */\nconst UserMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds user metadata support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n\t * Generate a URL for viewing the configured user's metadata via a <code>GET</code> request.\n\t *\n\t * @param {module:domain~UserMetadataFilter} filter the search criteria\n\t * @returns {string} the URL\n\t */\n\tfindUserMetadataUrl(filter) {\n        let result = this.baseUrl() +'/users/meta';\n        if ( filter ) {\n            const params = filter.toUriEncoding();\n            if ( params.length > 0 ) {\n                result += '?' + params;\n            }\n        }\n        return result;\n    }\n    \n    userMetadataUrl(userId) {\n        let result = this.baseUrl() +'/users/meta';\n        let userParam = (userId || this.userId);\n        if ( Array.isArray(userParam) ) {\n            if ( userParam.length > 0 ) {\n                userParam = userParam[0];\n            } else {\n                userParam = null;\n            }\n        }\n        if ( userParam && userId !== null ) {\n            result += '/' +userParam;\n        }\n        return result;\n    }\n\n    /**\n\t * Generate a URL for viewing a specific user's metadata via a <code>GET</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then view metadata of the requesting user\n\t * @returns {string} the URL\n\t */\n    viewUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n    }\n\n    /**\n\t * Generate a URL for adding user metadata via a <code>POST</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then add metadata to the requesting user\n\t * @returns {string} the URL\n\t */\n\taddUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n    }\n    \n    /**\n\t * Generate a URL for replacing user metadata via a <code>PUT</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then add metadata to the requesting user\n\t * @returns {string} the URL\n\t */\n\treplaceUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n\t}\n    \n    /**\n\t * Generate a URL for deleting user metadata via a <code>DELETE</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then add metadata to the requesting user\n\t * @returns {string} the URL\n\t */\n\tdeleteUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n\t}\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~UserMetadataUrlHelperMixin}\n * and {@link module:net~UserUrlHelperMixin} mixins.\n * \n * @mixes module:net~UserMetadataUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~UserMetadataUrlHelper\n */\nclass UserMetadataUrlHelper extends UserMetadataUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {\n\n}\n\nexport default UserMetadataUrlHelperMixin;\nexport { UserMetadataUrlHelper };\n","/** @module net */\n\nexport { default as AuthorizationV2Builder } from './authV2';\nexport { default as Environment }  from './environment';\nexport { default as HttpHeaders,\n    HttpContentType,\n    HttpMethod } from './httpHeaders';\nexport { default as LocationDatumMetadataUrlHelperMixin,\n\tLocationDatumMetadataUrlHelper } from './locationDatumMetadataUrlHelperMixin';\nexport { default as LocationDatumUrlHelperMixin,\n\tLocationDatumUrlHelper } from './locationDatumUrlHelperMixin';\nexport { default as LocationUrlHelperMixin }  from './locationUrlHelperMixin';\nexport { default as NodeDatumMetadataUrlHelperMixin, \n    NodeDatumMetadataUrlHelper } from './nodeDatumMetadataUrlHelperMixin';\nexport { default as NodeDatumUrlHelperMixin,\n\tNodeDatumUrlHelper } from './nodeDatumUrlHelperMixin';\nexport { default as NodeInstructionUrlHelperMixin, \n    NodeInstructionUrlHelper ,\n    instructionParameter } from './nodeInstructionUrlHelperMixin';\nexport { default as NodeMetadataUrlHelperMixin, \n    NodeMetadataUrlHelper } from './nodeMetadataUrlHelperMixin';\nexport { default as NodeUrlHelperMixin }  from './nodeUrlHelperMixin';\nexport { default as QueryUrlHelperMixin,\n\tSolarQueryDefaultPath,\n\tSolarQueryPathKey,\n\tSolarQueryApiPathV1,\n\tSolarQueryPublicPathKey } from './queryUrlHelperMixin';\nexport { default as UserAuthTokenUrlHelperMixin, \n    UserAuthTokenUrlHelper } from './userAuthTokenUrlHelperMixin';\nexport { default as UserUrlHelperMixin,\n    SolarUserDefaultPath, \n    SolarUserPathKey, \n    SolarUserApiPathV1 } from './userUrlHelperMixin';\nexport { default as UserMetadataUrlHelperMixin,\n    UserMetadataUrlHelper } from './userMetadataUrlHelperMixin';\nexport { default as UrlHelper } from './urlHelper';\nexport { default as urlQuery } from './urlQuery';\n","/* eslint no-console: 0 */\n\nlet logLevel = 2;\n\nfunction consoleLog(level, ...args) {\n    if ( level > logLevel ) {\n        return;\n    }\n    if ( !console ) {\n        return;\n    }\n\n    let logFn;\n    switch ( level ) {\n        case 1:\n            logFn = console.error;\n            break;\n        case 2:\n            logFn = console.warn;\n            break;\n        case 3:\n            logFn = console.info;\n            break;\n    }\n    if ( !logFn ) {\n        logFn = console.log;\n    }\n    if ( !logFn ) {\n        return; // no console available\n    }\n    logFn(...args); // TODO formatting like sn.format.fmt.apply(this, arguments)?\n}\n\nconst logLevels = Object.freeze({\n    DEBUG: 4,\n    INFO: 3,\n    WARN: 2,\n    ERROR: 1,\n    OFF: 0,\n});\n\n/**\n * An application logger.\n * \n * Logging levels range from 0-4 and is controlled at the application level.\n * Level `0` is off, `1` is error, `2` is warn, `3` is info,  and `4` is debug.\n * The default level starts as `2`.\n */\nclass Logger {\n\n    static debug(...args) {\n        consoleLog(4, ...args);\n    }\n\n    static info(...args) {\n        consoleLog(3, ...args);\n    }\n\n    static warn(...args) {\n        consoleLog(2, ...args);\n    }\n\n    static error(...args) {\n        consoleLog(1, ...args);\n    }\n\n}\n\nObject.defineProperties(Logger, {\n\t/**\n\t * The global logging level. Set to `0` to disable all logging.\n\t * \n\t * @memberof module:util~Logger\n\t * @type {number}\n\t */\n    level: { \n        get:function() { return logLevel; }, \n        set:function(v) { logLevel = typeof v === 'number' ? v : 0}\n    },\n});\n\nexport default Logger;\nexport { logLevels };\n","/** @module util */\n\nexport { default as ComparableEnum } from './comparableEnum';\nexport { default as Configuration } from './configuration';\nexport { default as dateUtils } from './date';\nexport { default as Enum } from './enum';\nexport { default as Logger,\n logLevels } from './logger';\nexport { default as MultiMap } from './multiMap';\nexport { default as PropMap } from './propMap';\n"],"names":["timeNormalizeDataArray","data","aggregate","aggMillseconds","level","Array","isArray","length","i","d","currTime","date","getTime","expectedNextTime","nextTime","fill","fillTime","f","Object","create","getPrototypeOf","getOwnPropertyDescriptors","p","Date","push","prototype","splice","apply","freeze","Enum","name","_name","constructor","value","enums","reduce","obj","e","enumValues","undefined","len","set","result","ComparableEnum","_value","other","minEnum","cache","get","Set","agg","compareTo","add","size","Aggregation","AggregationValues","Number","MAX_SAFE_INTEGER","Aggregations","enumsValue","timestampFormat","utcFormat","dateTimeFormat","dateTimeUrlFormat","dateFormat","timestampParse","utcParse","dateTimeParse","dateParser","str","isoParse","iso8601Date","includeTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","seasonForDate","m","rollingQueryDateRange","aggregateTimeCount","endDate","exclusiveEndDate","interval","ceil","offset","timeCountValue","propName","isNaN","end","start","timeUnit","timeCount","Hour","utcMinute","precision","Math","min","setUTCMinutes","utcHour","Month","equals","Year","utcMonth","utcYear","floor","Day","utcDay","datumDate","localDate","localTime","created","dateTimeUrlParse","normalizeNestedStackDataByDate","layerData","fillTemplate","fillFn","j","k","jMax","dummy","prop","copyIndex","max","map","values","sourceId","key","hasOwnProperty","aggregateNestedDataLayers","resultKey","copyProperties","sumProperties","staticProperties","layerCount","dataLength","copyPropLength","sumPropLength","val","clone","array","groupedBySourceMetricDataArray","metricName","sourceIdMap","aggFn","metricExtractorFn","metricExtractor","rollupFn","sum","nest","has","sortKeys","ascending","rollup","r","metricKey","entries","layer","combined","forEach","v","AuthTokenStatus","AuthTokenStatusValues","AuthTokenStatuses","AuthTokenType","AuthTokenTypeValues","AuthTokenTypes","Pagination","_max","_offset","SortDescriptor","descending","_key","_descending","index","propertyName","encodeURIComponent","PropMap","props","properties","newValue","arguments","newProps","keys","assign","callbackFn","kv","toUriEncoding","sorts","pagination","params","sort","paginationParams","CountryKey","ElevationKey","LatitudeKey","IdKey","LocalityKey","LongitudeKey","NameKey","PostalCodeKey","RegionKey","StateOrProvinceKey","StreetKey","TimeZoneIdKey","Location","loc","AggregationKey","DataPathKey","EndDateKey","LocationIdsKey","LocationKey","MetadataFilterKey","MostRecentKey","NodeIdsKey","QueryKey","SourceIdsKey","StartDateKey","TagsKey","UserIdsKey","WithoutTotalResultsCountKey","DatumFilter","datumFilterUriEncodingPropertyMapper","nodeIds","nodeId","locationIds","locationId","sourceIds","userIds","userId","path","substring","GeneralMetadata","info","propertyInfo","tags","stringMapToObject","from","JSON","stringify","json","pm","t","parse","objectToStringMap","strMap","Map","InstructionState","InstructionStateValues","InstructionStates","LocationPrecision","LocationPrecisionValues","LocationPrecisions","setOrNull","mergedSets","set1","set2","s1","s2","SecurityPolicy","aggregations","minAggregation","locationPrecisions","minLocationPrecision","nodeMetadataPaths","userMetadataPaths","_nodeIds","_sourceIds","_aggregations","_minAggregation","_locationPrecisions","_minLocationPrecision","_nodeMetadataPaths","_userMetadataPaths","MIN_AGGREGATION_CACHE","MIN_LOCATION_PRECISION_CACHE","SecurityPolicyBuilder","policy","withAggregations","withMinAggregation","withLocationPrecisions","withMinLocationPrecision","withNodeIds","withSourceIds","withNodeMetadataPaths","withUserMetadataPaths","addAggregations","addLocationPrecisions","addNodeIds","addSourceIds","addNodeMetadataPaths","addUserMetadataPaths","minimumEnumSet","buildAggregations","buildLocationPrecisions","displayScaleForValue","num","abs","displayUnitsForScale","baseUnit","scale","MultiMap","mappings","mappingNames","putAll","addValue","keyLc","toLowerCase","mapping","indexOf","replace","createGetter","me","createSetter","createProperty","defineProperty","Configuration","initialMap","enabled","newMap","normalizedProtocol","normalizedConfig","config","protocol","port","host","hostname","Environment","HttpMethod","HttpContentType","HttpHeaders","defineProperties","urlQueryParse","search","pairs","pair","match","split","decodeURIComponent","urlQueryEncode","parameters","encoderFn","encoder","handleValue","SIGNING_KEY_VALIDITY","AuthorizationV2Builder","token","environment","tokenId","forceHostPort","reset","contentDigest","httpHeaders","signedHeaderNames","method","GET","tokenSecret","signingKey","computeSigningKey","signingKeyExpiration","requestDate","httpMethod","put","HOST","requestPath","url","uri","uriParse","scheme","query","queryParams","CONTENT_TYPE","useSnDate","headerName","headerValue","headers","digest","Hex","content","SHA256","contentSHA256","header","Base64","keySet","first","vals","valsLen","_encodeURIComponent","sortedLowercaseHeaderNames","toUTCString","firstValue","trim","join","EMPTY_STRING_SHA256_HEX","X_SN_DATE","DATE","containsKey","CONTENT_MD5","DIGEST","lowercaseSortedArray","computeCanonicalRequestData","canonicalHeaderNames","canonicalQueryParameters","canonicalHeaders","canonicalSignedHeaderNames","canonicalContentSHA256","secretKey","datestring","HmacSHA256","canonicalRequestData","sortedHeaderNames","canonicalReq","signatureData","computeSignatureData","signature","buildWithKey","now","signedHeaders","existingIndex","findIndex","caseInsensitiveEqualsFn","concat","remove","valueLc","toString","items","sortedItems","_hexEscapeChar","c","charCodeAt","toUpperCase","UrlHelper","env","_parameters","tls","useTls","hostUrl","template","resolveTemplateUrl","variableName","variableValue","LocationUrlHelperMixin","superclass","filter","baseUrl","toUriEncodingWithSorting","parameter","SolarQueryDefaultPath","SolarQueryPathKey","SolarQueryApiPathV1","SolarQueryPublicPathKey","QueryUrlHelperMixin","isPubPath","publicQuery","LocationDatumMetadataUrlHelperMixin","baseLocationDatumMetadataUrl","source","locationDatumMetadataUrlWithSource","LocationDatumMetadataUrlHelper","LocationDatumUrlHelperMixin","startDate","datumFilter","LocationDatumUrlHelper","NodeUrlHelperMixin","NodeDatumMetadataUrlHelperMixin","baseNodeDatumMetadataUrl","nodeDatumMetadataUrlWithSource","userParam","userMetadataUrl","NodeDatumMetadataUrlHelper","NodeDatumUrlHelperMixin","sources","NodeDatumUrlHelper","SolarUserDefaultPath","SolarUserPathKey","SolarUserApiPathV1","UserUrlHelperMixin","babelHelpers.get","archived","NodeInstructionUrlHelperMixin","instructionId","state","topic","NodeInstructionUrlHelper","instructionParameter","NodeMetadataUrlHelperMixin","viewNodeMetadataUrl","NodeMetadataUrlHelper","UserAuthTokenUrlHelperMixin","type","authTokenUrl","status","UserAuthTokenUrlHelper","UserMetadataUrlHelperMixin","UserMetadataUrlHelper","logLevel","consoleLog","console","logFn","error","warn","log","args","logLevels","Logger"],"mappings":"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"}