{"version":3,"sources":["../src/domain/generalMetadata.js","../src/domain/securityPolicy.js","../src/format/date.js","../src/util/multiMap.js","../src/util/configuration.js","../src/net/urlQuery.js","../src/net/authV2.js","../src/util/enum.js","../src/util/comparableEnum.js","../src/domain/aggregation.js","../src/domain/authTokenStatus.js","../src/domain/authTokenType.js","../src/domain/instructionState.js","../src/domain/locationPrecision.js","../src/domain/pagination.js","../src/domain/sortDescriptor.js","../src/net/environment.js","../src/net/httpHeaders.js","../src/net/urlHelper.js","../src/net/nodeUrlHelperMixin.js","../src/net/queryUrlHelperMixin.js","../src/net/datumMetadataUrlHelperMixin.js","../src/net/nodeDatumUrlHelperMixin.js","../src/net/userUrlHelperMixin.js","../src/net/nodeInstructionUrlHelperMixin.js","../src/net/nodeMetadataUrlHelperMixin.js","../src/net/userAuthTokenUrlHelperMixin.js"],"names":["stringMapToObject","strMap","obj","Object","create","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","k","_ref2","v","Map","objectToStringMap","_step2","keys","_iteratorNormalCompletion2","_iterator2","value","set","_typeof","setOrNull","result","Set","size","Array","isArray","length","mergedSets","set1","set2","s1","s2","values","add","iso8601Date","date","includeTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","addValue","map","key","replace","keyLc","toLowerCase","mapping","mappings","val","mappingNames","push","len","i","createGetter","me","prop","createSetter","createProperty","defineProperty","urlQueryParse","search","pairs","pair","params","undefined","match","substring","split","decodeURIComponent","caseInsensitiveEqualsFn","valueLc","e","toString","lowercaseSortedArray","items","sortedItems","sort","_hexEscapeChar","c","charCodeAt","_encodeURIComponent","str","encodeURIComponent","Enum","name","_name","this","constructor","freeze","enums","reduce","ComparableEnum","_value","_this","other","minEnum","cache","get","enumValues","agg","compareTo","Aggregation","_ComparableEnum","level","AggregationValues","Number","MAX_SAFE_INTEGER","Aggregations","enumsValue","AuthTokenStatus","_Enum","AuthTokenStatusValues","AuthTokenStatuses","AuthTokenType","AuthTokenTypeValues","AuthTokenTypes","GeneralMetadata","info","propertyInfo","tags","from","JSON","stringify","json","m","pm","t","parse","InstructionState","InstructionStateValues","InstructionStates","LocationPrecision","precision","LocationPrecisionValues","LocationPrecisions","Pagination","max","offset","_max","_offset","SecurityPolicy","nodeIds","sourceIds","aggregations","minAggregation","locationPrecisions","minLocationPrecision","nodeMetadataPaths","userMetadataPaths","_nodeIds","_sourceIds","_aggregations","_minAggregation","_locationPrecisions","_minLocationPrecision","_nodeMetadataPaths","_userMetadataPaths","MIN_AGGREGATION_CACHE","MIN_LOCATION_PRECISION_CACHE","SecurityPolicyBuilder","policy","withAggregations","withMinAggregation","withLocationPrecisions","withMinLocationPrecision","withNodeIds","withSourceIds","withNodeMetadataPaths","withUserMetadataPaths","addAggregations","addLocationPrecisions","addNodeIds","addSourceIds","addNodeMetadataPaths","addUserMetadataPaths","minimumEnumSet","buildAggregations","buildLocationPrecisions","SortDescriptor","descending","_key","_descending","index","propertyName","propName","timestampFormat","utcFormat","dateTimeFormat","dateTimeUrlFormat","dateFormat","timestampParse","utcParse","dateTimeParse","MultiMap","putAll","hasOwnProperty","indexOf","splice","Configuration","initialMap","enabled","newValue","arguments","newMap","assign","Environment","config","port","protocol","HttpMethod","HttpHeaders","defineProperties","urlQuery","parameters","encoderFn","handleValue","encoder","AuthorizationV2Builder","token","environment","tokenId","reset","contentDigest","httpHeaders","signedHeaderNames","host","method","GET","path","Date","tokenSecret","signingKey","computeSigningKey","httpMethod","put","HOST","requestPath","url","uri","uriParse","scheme","query","queryParams","CONTENT_TYPE","requestDate","useSnDate","headerName","headerValue","headers","digest","Hex","keySet","first","vals","valsLen","j","sortedLowercaseHeaderNames","toUTCString","firstValue","trim","join","EMPTY_STRING_SHA256_HEX","X_SN_DATE","DATE","containsKey","CONTENT_MD5","DIGEST","forEach","computeCanonicalRequestData","canonicalHeaderNames","canonicalQueryParameters","canonicalHeaders","canonicalSignedHeaderNames","canonicalContentSHA256","secretKey","datestring","HmacSHA256","canonicalRequestData","SHA256","sortedHeaderNames","canonicalReq","signatureData","computeSignatureData","signature","buildWithKey","signedHeaders","findIndex","existingIndex","concat","remove","UrlHelper","env","_parameters","_environment","apply","tls","useTls","hostUrl","template","resolveTemplateUrl","variableName","variableValue","NodeUrlHelperMixin","superclass","parameter","nodeId","sourceId","QueryUrlHelperMixin","isPubPath","DatumMetadataUrlHelperMixin","baseUrl","baseDatumMetadataUrl","source","datumMetadataUrlWithSource","sorts","pagination","toUriEncoding","DatumMetadataUrlHelper","_DatumMetadataUrlHelp","NodeDatumUrlHelperMixin","sources","metadataFilter","NodeDatumUrlHelper","_NodeDatumUrlHelperMi","UserUrlHelperMixin","babelHelpers.get","archived","userIds","userId","NodeInstructionUrlHelperMixin","instructionId","state","topic","NodeInstructionUrlHelper","_NodeInstructionUrlHe","instructionParameter","NodeMetadataUrlHelperMixin","viewNodeMetadataUrl","NodeMetadataUrlHelper","_NodeMetadataUrlHelpe","UserAuthTokenUrlHelperMixin","type","authTokenUrl","status","UserAuthTokenUrlHelper","_UserAuthTokenUrlHelp","isoParse"],"mappings":"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","file":"lib/solarnetwork-api-core.min.js.map","sourcesContent":["/**\n * General metadata with a basic structure.\n * \n * This metadata can be associated with a variety of objects within SolarNetwork, such\n * as users, nodes, and datum.\n */\nclass GeneralMetadata {\n\n    /**\n     * Constructor.\n     * \n     * @param {Map<string, *>} [info] the general metadata map\n     * @param {Map<string, Map<string, *>>} [propertyInfo] the property metadata map\n     * @param {Set<string>} [tags] the tags\n     */\n    constructor(info, propertyInfo, tags) {\n        this.info = info || null;\n        this.propertyInfo = propertyInfo || null;\n        this.tags = (tags instanceof Set ? tags : Array.isArray(tags) ? new Set(tags) : null);\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        const info = this.info;\n        if ( info ) {\n            result['m'] = stringMapToObject(info);\n        }\n        const propertyInfo = this.propertyInfo;\n        if ( propertyInfo ) {\n            result['pm'] = stringMapToObject(propertyInfo);\n        }\n        const tags = this.tags;\n        if ( tags ) {\n            result['t'] = Array.from(tags);\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link GeneralMetadata} instance.\n     * \n     * The JSON must be encoded the same way {@link GeneralMetadata#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @returns {GeneralMetadata} the metadata instance \n     */\n    static fromJsonEncoding(json) {\n        let m, pm, t;\n        if ( json ) {\n            const obj = JSON.parse(json);\n            m = (obj['m'] ? objectToStringMap(obj['m']) : null);\n            pm = (obj['pm'] ? objectToStringMap(obj['pm']) : null);\n            t = (Array.isArray(obj['t']) ? new Set(obj['t']) : null);\n        }\n        return new GeneralMetadata(m, pm, t);\n    }\n}\n\n/**\n * Convert a <code>Map</code> into a simple object.\n * \n * The keys are assumed to be strings. Values that are themselves <code>Map</code> instances\n * will be converted to simple objects as well.\n * \n * @param {Map<string, *>} strMap a Map with string keys; nested Map objects are also handled\n * @returns {Object} a simple object\n * @see {@link objectToStringMap} for the reverse conversion\n */\nfunction stringMapToObject(strMap) {\n    const obj = Object.create(null);\n    if ( strMap ) {\n        for (const [k,v] of strMap) {\n            obj[k] = (v instanceof Map ? stringMapToObject(v) : v);\n        }\n    }\n    return obj;\n}\n\n/**\n * Convert a simple object into a <code>Map</code> instance.\n * \n * Property values that are themselves objects will be converted into <code>Map</code>\n * instances as well.\n * \n * @param {Object} obj a simple object\n * @returns {Map<string, *>} a Map with string keys; nested Map objects are also handled\n * @see {@link stringMapToObject} for the reverse conversion\n */\nfunction objectToStringMap(obj) {\n    const strMap = new Map();\n    if ( obj ) {\n        for (const k of Object.keys(obj)) {\n            const v = obj[k];\n            strMap.set(k, (typeof v === 'object' ? objectToStringMap(v) : v));\n        }\n    }\n    return strMap;\n}\n\nexport default GeneralMetadata;\nexport { stringMapToObject, objectToStringMap };\n","import { Aggregation } from './aggregation';\nimport { LocationPrecision } from './locationPrecision';\n\n/**\n * Get a Set from a Set or array or object, returning <code>null</code> if the set would be empty.\n * \n * @param {Object[]|Set<*>} obj the array, Set, or singleton object to get as a Set\n * @returns {Set<*>} the Set, or <code>null</code>\n * @private\n */\nfunction setOrNull(obj) {\n\tlet result = null;\n\tif ( obj instanceof Set ) {\n\t\tresult = (obj.size > 0 ? obj : null);\n\t} else if ( Array.isArray(obj) ) {\n\t\tresult = (obj.length > 0 ? new Set(obj) : null);\n\t} else if ( obj ) {\n\t\tresult = new Set([obj]);\n\t}\n\treturn result;\n}\n\n/**\n * Merge two sets.\n * \n * @param {Object[]|Set<*>} [set1] the first set \n * @param {Object[]|Set<*>} [set2] the second set \n * @returns {Set<*>} the merged Set, or <code>null</code> if neither arguments are sets or \n *                   neither argument have any values\n * @private\n */\nfunction mergedSets(set1, set2) {\n\tlet s1 = setOrNull(set1);\n\tlet s2 = setOrNull(set2);\n\tif ( s1 === null && s2 === null ) {\n\t\treturn null;\n\t} else if ( s2 === null ) {\n\t\treturn s1;\n\t} else if ( s1 === null ) {\n\t\treturn s2;\n\t} else {\n\t\tfor ( let v of s2.values() ) {\n\t\t\ts1.add(v);\n\t\t}\n\t\treturn s1;\n\t}\n}\n\n\n/**\n * An immutable set of security restrictions that can be attached to other objects, like auth tokens.\n * \n * Use the {@link SecurityPolicyBuilder} to create instances of this class with a fluent API.\n */\nclass SecurityPolicy {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {number[]|Set<number>} [nodeIds] the node IDs to restrict to, or <code>null</code> for no restriction\n\t * @param {string[]|Set<string>} [sourceIds] the source ID to restrict to, or <code>null</code> for no restriction\n\t * @param {Aggregation[]|Set<Aggregation>} [aggregations] the aggregation names to restrict to, or <code>null</code> for no restriction\n\t * @param {Aggregation} [minAggregation] if specified, a minimum aggregation level that is allowed\n\t * @param {Set<LocationPrecision>} [locationPrecisions] the location precision names to restrict to, or <code>null</code> for no restriction\n\t * @param {LocationPrecision} [minLocationPrecision] if specified, a minimum location precision that is allowed\n\t * @param {Set<string>} [nodeMetadataPaths] the <code>SolarNodeMetadata</code> paths to restrict to, or <code>null</code> for no restriction\n\t * @param {Set<string>} [userMetadataPaths] the <code>UserNodeMetadata</code> paths to restrict to, or <code>null</code> for no restriction\n\t */\n    constructor(nodeIds, sourceIds, aggregations, minAggregation, locationPrecisions,\n\t\t\tminLocationPrecision, nodeMetadataPaths, userMetadataPaths) {\n\t\tthis._nodeIds = setOrNull(nodeIds);\n\t\tthis._sourceIds = setOrNull(sourceIds);\n\t\tthis._aggregations = setOrNull(aggregations);\n\t\tthis._minAggregation = (minAggregation instanceof Aggregation ? minAggregation : null);\n\t\tthis._locationPrecisions = setOrNull(locationPrecisions);\n\t\tthis._minLocationPrecision = (minLocationPrecision instanceof LocationPrecision ? minLocationPrecision : null);\n\t\tthis._nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n        this._userMetadataPaths = setOrNull(userMetadataPaths);\n        if ( this.constructor === SecurityPolicy ) {\n            Object.freeze(this);\n        }\n\t}\n\n\t/**\n\t * Get the node IDs.\n\t * \n\t * @returns {Set<number>} the node IDs, or <code>null</code>\n\t */\n\tget nodeIds() {\n\t\treturn this._nodeIds;\n\t}\n\n\t/**\n\t * Get the source IDs.\n\t * \n\t * @returns {Set<string>} the source IDs, or <code>null</code>\n\t */\n\tget sourceIds() {\n\t\treturn this._sourceIds;\n\t}\n\n\t/**\n\t * Get the aggregations.\n\t * \n\t * @returns {Set<Aggregation>} the aggregations, or <code>null</code>\n\t */\n\tget aggregations() {\n\t\treturn this._aggregations;\n\t}\n\n\t/**\n\t * Get the location precisions.\n\t * \n\t * @returns {Set<LocationPrecision>} the precisions, or <code>null</code>\n\t */\n\tget locationPrecisions() {\n\t\treturn this._locationPrecisions;\n\t}\n\n\t/**\n\t * Get the minimum aggregation.\n\t * \n\t * @returns {Aggregation} the minimum aggregation, or <code>null</code>\n\t */\n\tget minAggregation() {\n\t\treturn this._minAggregation;\n\t}\n\n\t/**\n\t * Get the minimum location precision.\n\t * \n\t * @returns {LocationPrecision} the minimum precision, or <code>null</code>\n\t */\n\tget minLocationPrecision() {\n\t\treturn this._minLocationPrecision;\n\t}\n\n\t/**\n\t * Get the node metadata paths.\n\t * \n\t * @returns {Set<string>} the node metadata paths, or <code>null</code>\n\t */\n\tget nodeMetadataPaths() {\n\t\treturn this._nodeMetadataPaths;\n\t}\n\n\t/**\n\t * Get the user metadata paths.\n\t * \n\t * @returns {Set<string>} the user metadata paths, or <code>null</code>\n\t */\n\tget userMetadataPaths() {\n\t\treturn this._userMetadataPaths;\n\t}\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n\t\tlet result = {};\n\t\tlet val = this.nodeIds;\n\t\tif ( val ) {\n\t\t\tresult.nodeIds = Array.from(val);\n\t\t}\n\t\t\n\t\tval = this.sourceIds;\n\t\tif ( val ) {\n\t\t\tresult.sourceIds = Array.from(val);\n\t\t}\n\n\t\tval = this.aggregations;\n\t\tif ( val ) {\n\t\t\tresult.aggregations = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.locationPrecisions;\n\t\tif ( val ) {\n\t\t\tresult.locationPrecisions = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.minAggregation;\n\t\tif ( val ) {\n\t\t\tif ( result.length > 0 ) {\n\t\t\t\tresult += '&';\n\t\t\t}\n\t\t\tresult.minAggregation = val.name;\n\t\t}\n\n\t\tval = this.minLocationPrecision;\n\t\tif ( val ) {\n\t\t\tresult.minLocationPrecision = val.name;\n\t\t}\n\n\t\tval = this.nodeMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.nodeMetadataPaths = Array.from(val);\n\t\t}\n\n\t\tval = this.userMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.userMetadataPaths = Array.from(val);\n\t\t}\n\n\t\treturn JSON.stringify(result);\n    }\n}\n\nconst MIN_AGGREGATION_CACHE = new Map(); // Map<string, Set<Aggregation>>\nconst MIN_LOCATION_PRECISION_CACHE = new Map(); // Map<string, Set<LocationPrecision>>\n\n/**\n * A mutable builder object for {@link SecurityPolicy} instances.\n */\nexport class SecurityPolicyBuilder {\n\n\t/**\n\t * Apply all properties from another SecurityPolicy.\n\t * \n\t * @param {SecurityPolicy} policy the SecurityPolicy to apply\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.withAggregations(policy.aggregations)\n\t\t\t\t.withMinAggregation(policy.minAggregation)\n\t\t\t\t.withLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t.withMinLocationPrecision(policy.minLocationPrecision)\n\t\t\t\t.withNodeIds(policy.nodeIds)\n\t\t\t\t.withSourceIds(policy.sourceIds)\n\t\t\t\t.withNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t.withUserMetadataPaths(policy.userMetadataPaths);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Merge all properties from another SecurityPolicy.\n\t * \n\t * @param {SecurityPolicy} policy the SecurityPolicy to merge\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\taddPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.addAggregations(policy.aggregations)\n\t\t\t\t\t.addLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t\t.addNodeIds(policy.nodeIds)\n\t\t\t\t\t.addSourceIds(policy.sourceIds)\n\t\t\t\t\t.addNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t\t.addUserMetadataPaths(policy.userMetadataPaths);\n\t\t\tif ( policy.minAggregation ) {\n\t\t\t\tthis.withMinAggregation(policy.minAggregation);\n\t\t\t}\n\t\t\tif ( policy.minLocationPrecision ) {\n\t\t\t\tthis.withMinLocationPrecision(policy.minLocationPrecision);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to use\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithNodeIds(nodeIds) {\n\t\tthis.nodeIds = setOrNull(nodeIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to add\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\taddNodeIds(nodeIds) {\n\t\treturn this.withNodeIds(mergedSets(this.nodeIds, nodeIds));\n\t}\n\n\t/**\n\t * Set the node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to use\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithNodeMetadataPaths(nodeMetadataPaths) {\n\t\tthis.nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to add\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\taddNodeMetadataPaths(nodeMetadataPaths) {\n\t\treturn this.withNodeMetadataPaths(mergedSets(this.nodeMetadataPaths, nodeMetadataPaths));\n\t}\n\n\t/**\n\t * Set the user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to use\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithUserMetadataPaths(userMetadataPaths) {\n\t\tthis.userMetadataPaths = setOrNull(userMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to add\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\taddUserMetadataPaths(userMetadataPaths) {\n\t\treturn this.withUserMetadataPaths(mergedSets(this.userMetadataPaths, userMetadataPaths));\n\t}\n\n\t/**\n\t * Set the source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to use\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithSourceIds(sourceIds) {\n\t\tthis.sourceIds = setOrNull(sourceIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to add\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\taddSourceIds(sourceIds) {\n\t\treturn this.withSourceIds(mergedSets(this.sourceIds, sourceIds));\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {Aggregation[]|Set<Aggregation>} aggregations the aggregations to use\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithAggregations(aggregations) {\n\t\tthis.aggregations = setOrNull(aggregations);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {Aggregation[]|Set<Aggregation>} aggregations the aggregations to add\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\taddAggregations(aggregations) {\n\t\treturn this.withAggregations(mergedSets(this.aggregations, aggregations));\n\t}\n\n\t/**\n\t * Set the location precisions.\n\t * \n\t * @param {LocationPrecision[]|Set<LocationPrecision>} locationPrecisions the precisions to use\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithLocationPrecisions(locationPrecisions) {\n\t\tthis.locationPrecisions = setOrNull(locationPrecisions);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add location precisions.\n\t * \n\t * @param {LocationPrecision[]|Set<LocationPrecision>} locationPrecisions the precisions to add\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\taddLocationPrecisions(locationPrecisions) {\n\t\treturn this.withLocationPrecisions(mergedSets(this.locationPrecisions, locationPrecisions));\n\t}\n\n\t/**\n\t * Set a minimum aggregation level.\n\t * \n\t * @param {Aggregation} minAggregation the minimum aggregation level to set\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithMinAggregation(minAggregation) {\n\t\tthis.minAggregation = minAggregation;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of aggregation levels based on the configured <code>minAggregation</code>\n\t * and <code>aggregations</code> values.\n\t * \n\t * @returns {Set<Aggregation>} the aggregation set\n\t * @private\n\t */\n\tbuildAggregations() {\n\t\tconst minAggregation = this.minAggregation;\n\t\tconst aggregations = this.aggregations;\n\t\tif ( !minAggregation && aggregations && aggregations.size > 0 ) {\n\t\t\treturn aggregations;\n\t\t} else if ( !minAggregation ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn Aggregation.minimumEnumSet(minAggregation, MIN_AGGREGATION_CACHE);\n\t}\n\n\t/**\n\t * Treat the configured <code>locationPrecisions</code> set as a single\n\t * minimum value or a list of exact values.\n\t * \n\t * By default if <code>locationPrecisions</code> is configured with a single\n\t * value it will be treated as a <em>minimum</em> value, and any\n\t * {@link LocationPrecision} with a {@link LocationPrecision#precision} equal \n\t * to or higher than that value's level will be included in the generated\n\t * {@link SecurityPolicy#locationPrecisions} set. Set this to\n\t * <code>null</code> to disable that behavior and treat\n\t * <code>locationPrecisions</code> as the exact values to include in the\n\t * generated {@link SecurityPolicy#locationPrecisions} set.\n\t * \n\t * @param {LocationPrecision|null} minLocationPrecision\n\t *        <code>null</code> to treat configured location precision values\n\t *        as-is, or else the minimum threshold\n\t * @returns {SecurityPolicyBuilder} this object\n\t */\n\twithMinLocationPrecision(minLocationPrecision) {\n\t\tthis.minLocationPrecision = minLocationPrecision;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of location precision levels based on the configured <code>minLocationPrecision</code>\n\t * and <code>locationPrecisions</code> values.\n\t * \n\t * @returns {Set<LocationPrecision>} the precision set\n\t * @private\n\t */\n\tbuildLocationPrecisions() {\n\t\tconst minLocationPrecision = this.minLocationPrecision;\n\t\tconst locationPrecisions = this.locationPrecisions;\n\t\tif ( !minLocationPrecision && locationPrecisions && locationPrecisions.size > 0 ) {\n\t\t\treturn locationPrecisions;\n\t\t} else if ( !minLocationPrecision ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn LocationPrecision.minimumEnumSet(minLocationPrecision, MIN_LOCATION_PRECISION_CACHE);\n\t}\n\n\t/**\n\t * Create a new {@link SecurityPolicy} out of the properties configured on this builder.\n\t * \n\t * @returns {SecurityPolicy} the new policy instance\n\t */\n\tbuild() {\n\t\treturn new SecurityPolicy(this.nodeIds, this.sourceIds, \n\t\t\t\tthis.buildAggregations(), this.minAggregation,\n\t\t\t\tthis.buildLocationPrecisions(), this.minLocationPrecision,\n\t\t\t\tthis.nodeMetadataPaths, this.userMetadataPaths);\n\t}\n}\n\nexport default SecurityPolicy;\n","import { utcFormat, utcParse, isoParse } from 'd3-time-format';\n\nexport const timestampFormat = utcFormat(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\nexport const dateTimeFormat = utcFormat(\"%Y-%m-%d %H:%M\");\n\nexport const dateTimeUrlFormat = utcFormat(\"%Y-%m-%dT%H:%M\");\n\nexport const dateFormat = utcFormat(\"%Y-%m-%d\");\n\nexport const timestampParse = utcParse(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\nexport const dateTimeParse = utcParse(\"%Y-%m-%d %H:%M\");\n\nexport { isoParse as dateTimeUrlParse, isoParse as dateParse } from 'd3-time-format';\n\n/**\n * Parse a UTC date string, from a variety of supported formats.\n *\n * @param {String} str the string to parse into a date\n * @returns {Date} the parsed <code>Date</code>, or <code>null</code> if the date can't be parsed\n */\nexport function dateParser(str) {\n\tvar date = isoParse(str)\n\t\t|| timestampParse(str)\n\t\t|| dateTimeParse(str);\n\treturn date;\n}\n\n/**\n * Format a date into an ISO 8601 timestamp or date string, in the UTC time zone.\n * \n * @param {Date} date the date to format \n * @param {boolean} [includeTime=false] <code>true</code> to format as a timestamp, <code>false</code> as just a date\n * @returns {string} the formatted date string\n */\nexport function iso8601Date(date, includeTime) {\n\treturn ''+date.getUTCFullYear()\n\t\t\t+(date.getUTCMonth() < 9 ? '0' : '') +(date.getUTCMonth()+1)\n\t\t\t+(date.getUTCDate() < 10 ? '0' : '') + date.getUTCDate()\n\t\t\t+(includeTime ?\n\t\t\t\t'T'\n\t\t\t\t+(date.getUTCHours() < 10 ? '0' : '') + date.getUTCHours()\n\t\t\t\t+(date.getUTCMinutes() < 10 ? '0' : '') + date.getUTCMinutes()\n\t\t\t\t+(date.getUTCSeconds() < 10 ? '0' : '') +date.getUTCSeconds()\n\t\t\t\t+'Z'\n\t\t\t\t: '');\n}\n","/**\n * A case-insensitive string key multi-value map object.\n */\nclass MultiMap {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {*} [values] an object who's enumerable properties will be added to this map\n\t */\n\tconstructor(values) {\n\t\tthis.mappings = {}; // map of lower-case header names to {name:X, val:[]} values\n\t\tthis.mappingNames = []; // to keep insertion order\n\t\tif ( values ) {\n\t\t\tthis.putAll(values);\n\t\t}\n\t}\n\n\t/**\n\t * Add a value.\n\t * \n\t * This method will append values to existing keys.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to add\n\t * @returns {MultiMap} this object\n\t */\n\tadd(key, value) {\n\t\treturn addValue(this, key, value);\n\t}\n\n\t/**\n\t * Set a value.\n\t * \n\t * This method will replace any existing values with just <code>value</code>.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to set\n\t * @returns {MultiMap} this object\n\t */\n\tput(key, value) {\n\t\treturn addValue(this, key, value, true);\n\t}\n\n\t/**\n\t * Set multiple values.\n\t * \n\t * This method will replace any existing values with those provided on <code>values</code>.\n\t * \n\t * @param {*} values an object who's enumerable properties will be added to this map\n\t * @returns {MultiMap} this object\n\t */\n\tputAll(values) {\n\t\tfor ( let key in values ) {\n\t\t\tif ( values.hasOwnProperty(key) ) {\n                addValue(this, key, values[key], true);\n            }\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the values associated with a key.\n\t * \n\t * @param {string} key the key of the values to get\n\t * @returns {Object[]} the array of values associated with the key, or <code>undefined</code> if not available\n\t */\n\tvalue(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst mapping = this.mappings[keyLc];\n\t\treturn (mapping ? mapping.val : undefined);\n\t}\n\n\t/**\n\t * Get the first avaialble value assocaited with a key.\n\t * \n\t * @param {string} key the key of the value to get\n\t * @returns {*} the first available value associated with the key, or <code>undefined</code> if not available\n\t */\n\tfirstValue(key) {\n\t\tconst values = this.value(key);\n\t\treturn (values && values.length > 0 ? values[0] : undefined);\n\t}\n\n\t/**\n\t * Remove all properties from this map.\n\t * \n\t * @returns {MultiMap} this object\n\t */\n\tclear() {\n\t\tthis.mappingNames.length = 0;\n\t\tthis.mappings = {};\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all values associated with a key.\n\t * \n\t * @param {string} key the key of the values to remove\n\t * @returns {Object[]} the removed values, or <code>undefined</code> if no values were present for the given key\n\t */\n\tremove(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst index = this.mappingNames.indexOf(keyLc);\n\t\tconst result = this.mappings[keyLc];\n\t\tif ( result ) {\n\t\t\tdelete this.mappings[keyLc];\n\t\t\tthis.mappingNames.splice(index, 1);\n\t\t}\n\t\treturn (result ? result.val : undefined);\n\t}\n\n\t/**\n\t * Get the number of entries in this map.\n\t * \n\t * @returns {number} the number of entries in the map\n\t */\n\tsize() {\n\t\treturn this.mappingNames.length;\n\t}\n\n\t/**\n\t * Test if the map is empty.\n\t * \n\t * @returns {boolean} <code>true</code> if there are no entries in this map\n\t */\n\tisEmpty() {\n\t\treturn this.size() < 1;\n\t}\n\n\t/**\n\t * Test if there are any values associated with a key.\n\t * \n\t * @param {string} key the key to test\n\t * @returns {boolean} <code>true</code> if there is at least one value associated with the key\n\t */\n\tcontainsKey(key) {\n\t\treturn (this.value(key) !== undefined);\n\t}\n\n\t/**\n\t * Get an array of all keys in this map.\n\t * \n\t * @returns {string[]} array of keys in this map, or an empty array if the map is empty\n\t */\n\tkeySet() {\n\t\tconst result = [];\n\t\tconst len = this.size();\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tresult.push(this.mappings[this.mappingNames[i]].key);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * Add/replace values on a map.\n * \n * @param {MultiMap} map the map to mutate \n * @param {string} key the key to change \n * @param {*} value the value to add\n * @param {boolean} replace if <code>true</code> then replace all existing values;\n *                          if <code>false</code> append to any existing values\n * @returns {MultiMap} the passed in <code>map</code>\n * @private\n */\nfunction addValue(map, key, value, replace) {\n\tconst keyLc = key.toLowerCase();\n\tlet mapping = map.mappings[keyLc];\n\tif ( !mapping ) {\n\t\tmapping = {key:key, val:[]};\n\t\tmap.mappings[keyLc] = mapping;\n\t\tmap.mappingNames.push(keyLc);\n\t}\n\tif ( replace ) {\n\t\tmapping.val.length = 0;\n\t}\n\tif ( Array.isArray(value) ) {\n\t\tconst len = value.length;\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tmapping.val.push(value[i]);\n\t\t}\n\t} else {\n\t\tmapping.val.push(value);\n\t}\n\treturn map;\n}\n\nexport default MultiMap;\n","function createGetter(me, prop) {\n\treturn function() { return me.map[prop]; };\n}\n\nfunction createSetter(me, prop) {\n\treturn function(value) { me.map[prop] = value; };\n}\n\nfunction createProperty(me, prop) {\n\tObject.defineProperty(me, prop, {\n\t\tenumerable : true,\n\t\tconfigurable : true,\n\t\tget : createGetter(me, prop),\n\t\tset : createSetter(me, prop)\n\t});\n}\n\n/**\n * A configuration utility object.\n *\n * Properties can be get/set by using the {@link Configuration#value} function.\n */\nclass Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * For any properties passed on <code>initialMap</code>, {@link Configutration#value} will\n\t * be called so those properties are defined on this instance.\n\t *\n\t * @param {Object} initialMap the optional initial properties to store\n\t */\n\tconstructor(initialMap) {\n\t\tthis.map = {};\n\t\tif ( initialMap !== undefined ) {\n\t\t\tthis.values(initialMap);\n\t\t}\n\t}\n\n\t/**\n\t * Test if a key is truthy.\n\t *\n\t * @param {String} key the key to test\n\t * @returns {Boolean} <code>true</code> if the key is enabled\n\t */\n\tenabled(key) {\n\t\tif ( key === undefined ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !!this.map[key];\n\t}\n\n\t/**\n\t * Set or toggle the enabled status of a given key.\n\t *\n\t * <p>If the <em>enabled</em> parameter is not passed, then the enabled\n\t * status will be toggled to its opposite value.</p>\n\t *\n\t * @param {String} key they key to set\n\t * @param {Boolean} enabled the optional enabled value to set\n\t * @returns {Configuration} this object to allow method chaining\n\t */\n\ttoggle(key, enabled) {\n\t\tvar val = enabled;\n\t\tif ( key === undefined ) {\n\t\t\treturn this;\n\t\t}\n\t\tif ( val === undefined ) {\n\t\t\t// in 1-argument mode, toggle current value\n\t\t\tval = (this.map[key] === undefined);\n\t\t}\n\t\treturn this.value(key, (val === true ? true : null));\n\t}\n\n\t/**\n\t * Get or set a configuration value.\n\t *\n\t * @param {String} key The key to get or set the value for\n\t * @param {Object} [newValue] If defined, the new value to set for the given <code>key</code>.\n\t *                            If <code>null</code> then the value will be removed.\n\t * @returns {Object} If called as a getter, the associated value for the given <code>key</code>,\n\t *                   otherwise this object.\n\t */\n\tvalue(key, newValue) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn this.map[key];\n\t\t}\n\t\tif ( newValue === null ) {\n\t\t\tdelete this.map[key];\n\t\t\tif ( this.hasOwnProperty(key) ) {\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t} else {\n\t\t\tthis.map[key] = newValue;\n\t\t\tif ( !this.hasOwnProperty(key) ) {\n\t\t\t\tcreateProperty(this, key);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set multiple properties.\n\t * \n\t * @param {Object} [newMap] a map of values to set\n\t * @returns {Object} if called as a getter, all properties of this object copied into a simple object;\n\t *                   otherwise this object\n\t */\n\tvalues(newMap) {\n\t\tif ( newMap ) {\n\t\t\tfor ( let prop in newMap ) {\n\t\t\t\tif ( newMap.hasOwnProperty(prop) ) {\n\t\t\t\t\tthis.value(prop, newMap[prop]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn Object.assign({}, this.map);\n\t}\n\n}\n\nexport default Configuration;\n","/**\n * Parse the query portion of a URL string, and return a parameter object for the\n * parsed key/value pairs.\n *\n * <p>Multiple parameters of the same name will be stored as an array on the returned object.</p>\n *\n * @param {String} search the query portion of the URL, which may optionally include\n *                        the leading '?' character\n * @return {Object} the parsed query parameters, as a parameter object\n */\nfunction urlQueryParse(search) {\n    var params = {};\n    var pairs;\n    var pair;\n    var i, len, k, v;\n    if ( search !== undefined && search.length > 0 ) {\n        // remove any leading ? character\n        if ( search.match(/^\\?/) ) {\n            search = search.substring(1);\n        }\n        pairs = search.split('&');\n        for ( i = 0, len = pairs.length; i < len; i++ ) {\n            pair = pairs[i].split('=', 2);\n            if ( pair.length === 2 ) {\n                k = decodeURIComponent(pair[0]);\n                v = decodeURIComponent(pair[1]);\n                if ( params[k] ) {\n                    if ( !Array.isArray(params[k]) ) {\n                        params[k] = [params[k]]; // turn into array;\n                    }\n                    params[k].push(v);\n                } else {\n                    params[k] = v;\n                }\n            }\n        }\n    }\n    return params;\n}\n\n/**\n * Encode the properties of an object as a URL query string.\n *\n * <p>If an object property has an array value, multiple URL parameters will be encoded for that property.</p>\n *\n * <p>The optional <code>encoderFn</code> argument is a function that accepts a string value\n * and should return a URI-safe string for that value.</p>\n *\n * @param {Object} parameters an object to encode as URL parameters\n * @param {Function} encoderFn an optional function to encode each URI component with;\n *                             if not provided the built-in encodeURIComponent() function\n *                             will be used\n * @return {String} the encoded query parameters\n */\nfunction urlQueryEncode(parameters, encoderFn) {\n    var result = '',\n        prop,\n        val,\n        i,\n        len;\n    const encoder = (encoderFn || encodeURIComponent);\n    function handleValue(k, v) {\n        if ( result.length ) {\n            result += '&';\n        }\n        result += encoder(k) + '=' + encoder(v);\n    }\n    if ( parameters ) {\n        for ( prop in parameters ) {\n            if ( parameters.hasOwnProperty(prop) ) {\n                val = parameters[prop];\n                if ( Array.isArray(val) ) {\n                    for ( i = 0, len = val.length; i < len; i++ ) {\n                        handleValue(prop, val[i]);\n                    }\n                } else {\n                    handleValue(prop, val);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport { urlQueryParse, urlQueryEncode };\n\nexport default {\n    urlQueryParse : urlQueryParse,\n    urlQueryEncode : urlQueryEncode,\n}\n","import Hex from 'crypto-js/enc-hex';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport SHA256 from 'crypto-js/sha256';\nimport { parse as uriParse } from 'uri-js';\n\nimport { iso8601Date } from '../format/date';\nimport MultiMap from '../util/multiMap';\nimport Environment from './environment';\nimport { HttpMethod, default as HttpHeaders } from './httpHeaders';\nimport { urlQueryParse } from './urlQuery';\n\n/**\n * A builder object for the SNWS2 HTTP authorization scheme.\n *\n * This builder can be used to calculate a one-off header value, for example:\n *\n * ```\n * let authHeader = new AuthorizationV2Builder(\"my-token\")\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n * \n * Or the builder can be re-used for a given token:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n *\n * Additionally, a signing key can be generated and re-used for up to 7 days:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\")\n *   .saveSigningKey(\"my-token-secret\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .buildWithSavedKey(); // note previously generated key used\n * ```\n */\nclass AuthorizationV2Builder {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} token the auth token to use\n     * @param {Environment} [environment] the environment to use; if not provided a default environment will be created \n     */\n    constructor(token, environment) {\n        this.tokenId = token;\n        this.environment = (environment || new Environment());\n        this.reset();\n    }\n\n    /**\n     * Reset to defalut property values.\n     *\n     * @returns {AuthorizationV2Builder} this object\n     */\n    reset() {\n        this.contentDigest = null;\n        this.httpHeaders = new HttpHeaders();\n        this.parameters = new MultiMap();\n        this.signedHeaderNames = [];\n        var host = this.environment.host;\n        if ( this.environment.protocol === 'https' || this.environment.port != 80 ) {\n            host += ':' +this.environment.port;\n        }\n        return this.method(HttpMethod.GET).host(host).path('/').date(new Date());\n    }\n\n    /**\n     * Compute and cache the signing key.\n     *\n     * Signing keys are derived from the token secret and valid for 7 days, so\n     * this method can be used to compute a signing key so that {@link AuthorizationV2Builder#build}\n     * can be called later. The signing date will be set to whatever date is\n     * currently configured via {@link AuthorizationV2Builder#date}, which defaults to the\n     * current time for newly created builder instances.\n     *\n     * @param {string} tokenSecret the secret to sign the digest with\n     * @returns {AuthorizationV2Builder} this object\n     */\n    saveSigningKey(tokenSecret) {\n        this.signingKey = this.computeSigningKey(tokenSecret);\n        return this;\n    }\n\n    /**\n     * Set the HTTP method (verb) to use.\n     *\n     * @param {string} val the method to use; see the {@link HttpMethod} enum for possible values\n     * @returns {AuthorizationV2Builder} this object\n     */\n    method(val) {\n        this.httpMethod = val;\n        return this;\n    }\n\n    /**\n     * Set the HTTP host.\n     *\n     * This is a shortcut for calling <code>HttpHeaders#put(HttpHeaders.HOST, val)</code>.\n     *\n     * @param {string} val the HTTP host value to use\n     * @returns {AuthorizationV2Builder} this object\n     */\n    host(val) {\n        this.httpHeaders.put(HttpHeaders.HOST, val);\n        return this;\n    }\n\n    /**\n     * Set the HTTP request path to use.\n     *\n     * @param {string} val the request path to use\n     * @returns {AuthorizationV2Builder} this object\n     */\n    path(val) {\n        this.requestPath = val;\n        return this;\n    }\n\n    /**\n     * Set the host, path, and query parameters via a URL string.\n     *\n     * @param {string} url the URL value to use\n     * @returns {AuthorizationV2Builder} this object\n     */\n    url(url) {\n        const uri = uriParse(url);\n        let host = uri.host;\n        if ( uri.port && ((uri.scheme === 'https' && uri.port !== 443) || (uri.scheme === 'http' && uri.port !== 80)) ) {\n            host += ':' + uri.port;\n        }\n        if ( uri.query ) {\n            this.queryParams(urlQueryParse(uri.query));\n        }\n        return this.host(host).path(uri.path);\n    }\n\n    /**\n     * Set the HTTP content type.\n     *\n     * This is a shortcut for calling {@link HttpHeaders#put} with the key {@link HttpHeaders#CONTENT_TYPE}.\n     *\n     * @param {string} val the HTTP content type value to use\n     * @returns {AuthorizationV2Builder} this object\n     */\n    contentType(val) {\n        this.httpHeaders.put(HttpHeaders.CONTENT_TYPE, val);\n        return this;\n    }\n\n    /**\n     * Set the authorization request date.\n     *\n     * @param {Date} val the date to use; typically the current time, e.g. <code>new Date()</code>\n     * @returns {AuthorizationV2Builder} this object\n     */\n    date(val) {\n        this.requestDate = (val ? val : new Date());\n        return this;\n    }\n\n    /**\n     * The authorization request date as a HTTP header string value.\n     *\n     * @readonly\n     * @type {string}\n     */\n    get requestDateHeaderValue() {\n        return this.requestDate.toUTCString();\n    }\n\n    /**\n     * Control using the <code>X-SN-Date</code> HTTP header versus the <code>Date</code> header.\n     *\n     * <p>Set to <code>true</code> to use the <code>X-SN-Date</code> header, <code>false</code> to use \n     * the <code>Date</code> header. This will return <code>true</code> if <code>X-SN-Date</code> has been\n     * added to the <code>signedHeaderNames</code> property or has been added to the <code>httpHeaders</code>\n     * property.</p>\n     *\n     * @type {boolean}\n     */\n    get useSnDate() {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        return existingIndex >= 0 || this.httpHeaders.containsKey(HttpHeaders.X_SN_DATE);\n    }\n\n    set useSnDate(enabled) {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        if ( enabled && existingIndex < 0 ) {\n            signedHeaders = (signedHeaders\n                ? signedHeaders.concat(HttpHeaders.X_SN_DATE)\n                : [HttpHeaders.X_SN_DATE]);\n            this.signedHeaderNames = signedHeaders;\n        } else if ( !enabled && existingIndex >= 0 ) {\n            signedHeaders.splice(existingIndex, 1);\n            this.signedHeaderNames = signedHeaders;\n        }\n\n        // also clear from httpHeaders\n        this.httpHeaders.remove(HttpHeaders.X_SN_DATE);\n    }\n\n    /**\n     * Set the <code>useSnDate</code> property.\n     *\n     * @param {boolean} enabled <code>true</code> to use the <code>X-SN-Date</code> header, <code>false</code> to use <code>Date</code>\n     * @returns {AuthorizationV2Builder} this object\n     */\n    snDate(enabled) {\n        this.useSnDate = enabled;\n        return this;\n    }\n\n    /**\n     * Set a HTTP header value.\n     *\n     * This is a shortcut for calling <code>HttpHeaders#put(headerName, val)</code>.\n     *\n     * @param {string} headerName the header name to set\n     * @param {string} headerValue the header value to set\n     * @returns {AuthorizationV2Builder} this object\n     */\n    header(headerName, headerValue) {\n        this.httpHeaders.put(headerName, headerValue);\n        return this;\n    }\n\n    /**\n     * Set the HTTP headers to use with the request.\n     *\n     * The headers object must include all headers necessary by the\n     * authentication scheme, and any additional headers also configured via\n     * {@link AuthorizationV2Builder#signedHttpHeaders}.\n     *\n     * @param {HttpHeaders} headers the HTTP headers to use\n     * @returns {AuthorizationV2Builder} this object\n     */\n    headers(headers) {\n        this.httpHeaders = headers;\n        return this;\n    }\n\n    /**\n     * Set the HTTP <code>GET</code> query parameters, or <code>POST</code> form-encoded\n     * parameters.\n     *\n     * @param {MultiMap|Object} params the parameters to use, as either a {@link MultiMap} or simple <code>Object</code>\n     * @returns {AuthorizationV2Builder} this object\n     */\n    queryParams(params) {\n        if ( params instanceof MultiMap ) {\n            this.parameters = params;\n        } else {\n            this.parameters.putAll(params);\n        }\n        return this;\n    }\n\n    /**\n     * Set additional HTTP header names to sign with the authentication.\n     *\n     * @param {sring[]} signedHeaderNames additional HTTP header names to include in the signature\n     * @returns {AuthorizationV2Builder} this object\n     */\n    signedHttpHeaders(signedHeaderNames) {\n        this.signedHeaderNames = signedHeaderNames;\n        return this;\n    }\n\n    /**\n     * Set the HTTP request body content SHA-256 digest value.\n     *\n     * @param {string|WordArray} digest the digest value to use; if a string it is assumed to be Hex encoded\n     * @returns {AuthorizationV2Builder} this object\n     */\n    contentSHA256(digest) {\n        var contentDigest;\n        if ( typeof digest === 'string' ) {\n            contentDigest = Hex.parse(digest);\n        } else {\n            contentDigest = digest;\n        }\n        this.contentDigest = contentDigest;\n        return this;\n    }\n\n    /**\n     * Compute the canonical query parameters.\n     * \n     * @returns {string} the canonical query parameters string value\n     */\n    canonicalQueryParameters() {\n        const keys = this.parameters.keySet();\n        if ( keys.length < 1 ) {\n            return '';\n        }\n        keys.sort();\n        const len = keys.length;\n        var first = true,\n            result = '';\n        for ( let i = 0; i < len; i += 1 ) {\n            let key = keys[i];\n            let vals = this.parameters.value(key);\n            const valsLen = vals.length;\n            for ( let j = 0; j < valsLen; j += 1 ) {\n                if ( first ) {\n                    first = false;\n                } else {\n                    result += '&';\n                }\n                result += _encodeURIComponent(key) + '=' + _encodeURIComponent(vals[j]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical HTTP headers string value.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical headers string value\n     */\n    canonicalHeaders(sortedLowercaseHeaderNames) {\n        var result = '',\n            headerName,\n            headerValue;\n        const len = sortedLowercaseHeaderNames.length;\n        for ( let i = 0; i < len; i += 1 ) {\n            headerName = sortedLowercaseHeaderNames[i];\n            if ( \"date\" === headerName ||  \"x-sn-date\" === headerName ) {\n                headerValue = this.requestDate.toUTCString();\n            } else {\n                headerValue = this.httpHeaders.firstValue(headerName);\n            }\n            result += headerName +':' + (headerValue ? headerValue.trim() : '') + '\\n';\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical signed header names value from an array of HTTP header names.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical signed header names string value\n     * @private\n     */\n    canonicalSignedHeaderNames(sortedLowercaseHeaderNames) {\n        return sortedLowercaseHeaderNames.join(';');\n    }\n\n    /**\n     * Get the canonical request content SHA256 digest, hex encoded.\n     * \n     * @returns {string} the hex-encoded SHA256 digest of the request content\n     */\n    canonicalContentSHA256() {\n        return (this.contentDigest\n            ? Hex.stringify(this.contentDigest)\n            : AuthorizationV2Builder.EMPTY_STRING_SHA256_HEX);\n    }\n\n    /**\n     * Compute the canonical HTTP header names to include in the signature.\n     * \n     * @returns {string[]} the sorted, lower-cased HTTP header names to include\n     */\n    canonicalHeaderNames() {\n        const httpHeaders = this.httpHeaders;\n        const signedHeaderNames = this.signedHeaderNames;\n\n        // use a MultiMap to take advantage of case-insensitive keys\n        const map = new MultiMap();\n\n        map.put(HttpHeaders.HOST, true);\n        if ( this.useSnDate ) {\n            map.put(HttpHeaders.X_SN_DATE, true);\n        } else {\n            map.put(HttpHeaders.DATE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_MD5) ) {\n            map.put(HttpHeaders.CONTENT_MD5, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_TYPE) ) {\n            map.put(HttpHeaders.CONTENT_TYPE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.DIGEST) ) {\n            map.put(HttpHeaders.DIGEST, true);\n        }\n        if ( signedHeaderNames && signedHeaderNames.length > 0 ) {\n            signedHeaderNames.forEach(e => map.put(e, true));\n        }\n        return lowercaseSortedArray(map.keySet());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request.\n     * \n     * @returns {string} the canonical request data\n     */\n    buildCanonicalRequestData() {\n        return this.computeCanonicalRequestData(this.canonicalHeaderNames());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request,\n     * using a specific set of HTTP header names to sign.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to sign with the request\n     * @returns {string} the canonical request data\n     * @private\n     */\n    computeCanonicalRequestData(sortedLowercaseHeaderNames) {\n        // 1: HTTP verb\n        var result = this.httpMethod +'\\n';\n\n        // 2: Canonical URI\n        result += this.requestPath + '\\n';\n\n        // 3: Canonical query string\n        result += this.canonicalQueryParameters() + '\\n';\n\n        // 4: Canonical headers\n        result += this.canonicalHeaders(sortedLowercaseHeaderNames); // already includes newline\n\n        // 5: Signed header names\n        result += this.canonicalSignedHeaderNames(sortedLowercaseHeaderNames) + '\\n';\n\n        // 6: Content SHA256, hex encoded\n        result += this.canonicalContentSHA256();\n\n        return result;\n    }\n\n    /**\n     * Compute the signing key, from a secret key.\n     * \n     * @param {string} secretKey the secret key string \n     * @returns {CryptoJS#Hash} the computed key\n     * @private\n     */\n    computeSigningKey(secretKey) {\n        const datestring = iso8601Date(this.requestDate);\n        const key = HmacSHA256('snws2_request', HmacSHA256(datestring, 'SNWS2' + secretKey));\n        return key;\n    }\n\n    /**\n     * Compute the data to be signed by the signing key.\n     * \n     * @param {string} canonicalRequestData the request data, returned from {@link AuthorizationV2Builder#buildCanonicalRequestData}\n     * @returns {string} the data to sign\n     * @private\n     */\n    computeSignatureData(canonicalRequestData) {\n        /*- signature data is like:\n\n            SNWS2-HMAC-SHA256\\n\n            20170301T120000Z\\n\n            Hex(SHA256(canonicalRequestData))\n        */\n        return \"SNWS2-HMAC-SHA256\\n\" + iso8601Date(this.requestDate, true) + \"\\n\"\n                + Hex.stringify(SHA256(canonicalRequestData));\n    }\n\n    /**\n     * Compute a HTTP <code>Authorization</code> header value from the configured properties\n     * on the builder, using the provided signing key.\n     * \n     * @param {CryptoJS#Hash} signingKey the key to sign the computed signature data with\n     * @returns {string} the SNWS2 HTTP Authorization header value\n     * @private\n     */\n    buildWithKey(signingKey) {\n        const sortedHeaderNames = this.canonicalHeaderNames();\n        const canonicalReq = this.computeCanonicalRequestData(sortedHeaderNames);\n        const signatureData = this.computeSignatureData(canonicalReq);\n        const signature = Hex.stringify(HmacSHA256(signatureData, signingKey));\n        let result = 'SNWS2 Credential=' + this.tokenId\n            + ',SignedHeaders=' + sortedHeaderNames.join(';')\n            + ',Signature=' +signature;\n        return result;\n    }\n\n    /**\n     * Compute a HTTP <code>Authorization</code> header value from the configured\n     * properties on the builder, computing a new signing key based on the\n     * configured {@link AuthorizationV2Builder#date}.\n     *\n     * @param {string} tokenSecret the secret to sign the authorization with\n     * @return {string} the SNWS2 HTTP Authorization header value\n     */\n    build(tokenSecret) {\n        const signingKey = this.computeSigningKey(tokenSecret);\n        return this.buildWithKey(signingKey);\n    }\n\n    /**\n     * Compute a HTTP <code>Authorization</code> header value from the configured\n     * properties on the builder, using a signing key configured from a previous\n     * call to {@link AuthorizationV2Builder#saveSigningKey}.\n     *\n     * @return {string} the SNWS2 HTTP Authorization header value.\n     */\n    buildWithSavedKey() {\n        return this.buildWithKey(this.signingKey);\n    }\n\n}\n\n/**\n * @function stringMatchFn\n * @param {string} e the element to test\n * @returns {boolean} <code>true</code> if the element matches\n * @private\n */\n\n\n/**\n * Create a case-insensitive string matching function.\n * \n * @param {string} value the string to perform the case-insensitive comparison against\n * @returns {stringMatchFn} a matching function that performs a case-insensitive comparison\n * @private\n */\nfunction caseInsensitiveEqualsFn(value) {\n    const valueLc = value.toLowerCase();\n    return e => valueLc === e.toString().toLowerCase();\n}\n\n/**\n * Create a new array of lower-cased and sorted strings from another array.\n * \n * @param {string[]} items the items to lower-case and sort\n * @returns {string[]} a new array of the lower-cased and sorted items\n * @private\n */\nfunction lowercaseSortedArray(items) {\n    const sortedItems = [];\n    const len = items.length;\n    for ( let i = 0; i < len; i += 1 ) {\n        sortedItems.push(items[i].toLowerCase());\n    }\n    sortedItems.sort();\n    return sortedItems;\n}\n\nfunction _hexEscapeChar(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n}\n\nfunction _encodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, _hexEscapeChar);\n}\n\nObject.defineProperties(AuthorizationV2Builder, {\n    /**\n     * The hex-encoded value for an empty SHA256 digest value.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    EMPTY_STRING_SHA256_HEX:    { value: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' },\n\n    /**\n     * The SolarNetwork V2 authorization scheme.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    SNWS2_AUTH_SCHEME:          { value: 'SNWS2' },\n});\n\nexport default AuthorizationV2Builder;\n","/**\n * An enumerated object base class.\n * \n * This class is essentially abstract, and must be extended by another\n * class that overrides the {@link Enum.enumValues} method.\n * \n * @abstract\n */\nclass Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        this._name = name;\n        if ( this.constructor === Enum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the enum name.\n     * \n     * @returns {string} the  name\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Get all enum values.\n     * \n     * This method must be overridden by subclasses to return something meaningful.\n     * This implementation returns an empty array.\n     * \n     * @abstract\n     * @returns {Enum[]} get all enum values\n     */\n    static enumValues() {\n        return [];\n    }\n\n    /**\n     * This method takes an array of enums and turns them into a mapped object, using the enum\n     * <code>name</code> as object property names.\n     * \n     * @param {Enum[]} enums the enum list to turn into a value object\n     * @returns {Object} an object with enum <code>name</code> properties with associated enum values \n     */\n    static enumsValue(enums) {\n        return Object.freeze(enums.reduce((obj, e) => {\n            obj[e.name] = e;\n            return obj;\n        }, {}));\n    }\n}\n\nexport default Enum;\n","import Enum from './enum';\n\n/**\n * An immutable enum-like object with an associated comparable value.\n *\n * This class is essentially abstract, and must be extended by another\n * class that overrides the inerited {@link Enum.enumValues} method.\n * \n * @abstract\n * @extends Enum\n */\nclass ComparableEnum extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     * @param {number} value the comparable value\n     */\n    constructor(name, value) {\n        super(name);\n        this._value = value;\n        if ( this.constructor === ComparableEnum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the comparable value.\n     * \n     * @returns {number} the value\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * Compare two ComparableEnum objects based on their <code>value</code> values.\n     * \n     * @param {ComparableEnum} other the object to compare to\n     * @returns {number} <code>-1</code> if <code>this.value</code> is less than <code>other.value</code>, \n     *                   <code>1</code> if <code>this.value</code> is greater than <code>other.value</code>,\n     *                   <code>0</code> otherwise (when the values are equal) \n     */\n    compareTo(other) {\n        return this.value < other.value ? -1 : this.value > other.value ? 1 : 0;\n    }\n\n    /**\n     * Compute a complete set of enum values based on a minimum enum and/or set of enums.\n     * \n     * If <code>cache</code> is provided, then results computed via <code>minAggregation</code> \n     * will be cached there, and subsequent calls will returned the cached result when appropriate.\n     * \n     * @param {ComparableEnum} [minEnum] a minimum enum value\n     * @param {Map<string, Set<ComparableEnum>>} [cache] a cache of computed values\n     * @returns {Set<ComparableEnum>|null} the computed set, or <code>null</code> if no values match\n     */\n    static minimumEnumSet(minEnum, cache) {\n        if ( !minEnum ) {\n            return null;\n        }\n        let result = (cache ? cache.get(minEnum.name) : undefined);\n        if ( result ) {\n            return result;\n        }\n        result = new Set();\n        for ( const agg of minEnum.constructor.enumValues() ) {\n            if ( agg.compareTo(minEnum) > -1 ) {\n                result.add(agg);\n            }\n        }\n        if ( cache ) {\n            cache.set(minEnum.name, result);\n        }\n        return (result.size > 0 ? result : null);\n    }\n\n}\n\nexport default ComparableEnum;\n","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A named aggregation.\n * \n * @extends ComparableEnum\n */\nexport class Aggregation extends ComparableEnum {\n\n\t/**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} level a relative aggregation level value \n     */\n    constructor(name, level) {\n\t\tsuper(name, level);\n\t\tif ( this.constructor === Aggregation ) {\n\t\t\tObject.freeze(this);\n\t\t}\n    }\n\n    /**\n     * Get the aggregate level value.\n\t * \n\t * This is an alias for {@link ComparableEnum#value}.\n     */\n    get level() {\n        return this.value;\n\t}\n\t\n\t/**\n\t * Get the {@link Aggregations} values.\n\t * \n\t * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AggregationValues;\n\t}\n\n}\n\n\nconst AggregationValues = Object.freeze([\n\tnew Aggregation('Minute', 60),\n\tnew Aggregation('FiveMinute', 60 * 5),\n\tnew Aggregation('TenMinute', 60 * 10),\n\tnew Aggregation('FifteenMinute', 60 * 15),\n\tnew Aggregation('ThirtyMinute', 60 * 30),\n\tnew Aggregation('Hour', 3600),\n\tnew Aggregation('HourOfDay', 3600),\n\tnew Aggregation('SeasonalHourOfDay', 3600),\n\tnew Aggregation('Day', 86400),\n\tnew Aggregation('DayOfWeek', 86400),\n\tnew Aggregation('SeasonalDayOfWeek', 86400),\n\tnew Aggregation('Week', 604800),\n\tnew Aggregation('WeekOfYear', 604800),\n\tnew Aggregation('Month', 2419200),\n\tnew Aggregation('RunningTotal', Number.MAX_SAFE_INTEGER),\n]);\n\n/**\n * The enumeration of supported Aggregation values.\n * \n * @readonly\n * @enum {Aggregation}\n * @property {Aggregation} Minute minute\n * @property {Aggregation} FiveMinute 5 minutes\n * @property {Aggregation} TenMinute 10 minutes\n * @property {Aggregation} FifeteenMinute 15 minutes\n * @property {Aggregation} ThirtyMinute 30 minutes\n * @property {Aggregation} Hour an hour\n * @property {Aggregation} HourOfDay an hour of a day, e.g. 1-24\n * @property {Aggregation} SeasonalHourOfDay an hour of a day, further grouped into 4 seasons\n * @property {Aggregation} Day a day\n * @property {Aggregation} DayOfWeek a day of the week, e.g. Monday - Sunday\n * @property {Aggregation} SeasonalDayOfWeek a day of the week, further grouped into 4 seasons\n * @property {Aggregation} Week a week\n * @property {Aggregation} WeekOfYear the week within a year, e.g. 1 - 52\n * @property {Aggregation} Month a month\n * @property {Aggregation} RunningTotal a complete running total over a time span\n */\nconst Aggregations = Aggregation.enumsValue(AggregationValues);\n\nexport default Aggregations;\n","import Enum from '../util/enum';\n\n/**\n * An auth token status.\n * \n * @extends Enum\n */\nexport class AuthTokenStatus extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenStatus ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link AuthTokenStatuses} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenStatusValues;\n\t}\n\n}\n\nconst AuthTokenStatusValues = Object.freeze([\n\tnew AuthTokenStatus('Active'),\n    new AuthTokenStatus('Disabled'),\n]);\n\n/**\n * The enumeration of supported AuthTokenStatus values.\n * \n * @readonly\n * @enum {AuthTokenStatus}\n * @property {AuthTokenStatus} Active the token is active and usable\n * @property {AuthTokenStatus} Disabled the token is disabled and not usable\n */\nconst AuthTokenStatuses = AuthTokenStatus.enumsValue(AuthTokenStatusValues);\n\nexport default AuthTokenStatuses;\n","import Enum from '../util/enum';\n\n/**\n * A named auth token type.\n * \n * @extends Enum\n */\nexport class AuthTokenType extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenType ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link AuthTokenTypes} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenTypeValues;\n\t}\n\n}\n\nconst AuthTokenTypeValues = Object.freeze([\n\tnew AuthTokenType('ReadNodeData'),\n    new AuthTokenType('User'),\n]);\n\n/**\n * The enumeration of supported AuthTokenType values.\n * \n * @readonly\n * @enum {AuthTokenType}\n * @property {AuthTokenType} ReadNodeData a read-only token for reading SolarNode data\n * @property {AuthTokenType} User full access as the user that owns the token\n */\nconst AuthTokenTypes = AuthTokenType.enumsValue(AuthTokenTypeValues);\n\nexport default AuthTokenTypes;\n","import Enum from '../util/enum';\n\n/**\n * A named instruction state.\n */\nexport class InstructionState extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === InstructionState ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link InstructionStates} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn InstructionStateValues;\n\t}\n\n}\n\nconst InstructionStateValues = Object.freeze([\n\tnew InstructionState('Unknown'),\n\tnew InstructionState('Queued'),\n    new InstructionState('Received'),\n    new InstructionState('Executing'),\n    new InstructionState('Declined'),\n    new InstructionState('Completed'),\n]);\n\n/**\n * The enumeration of supported InstructionState values.\n * \n * @readonly\n * @enum {InstructionState}\n * @property {InstructionState} Unknown an unknown state\n * @property {InstructionState} Queued the instruction has been received by SolarNet but not yet delivered to its destination\n * @property {InstructionState} Received the instruction has been delivered to its destination but not yet acted upon\n * @property {InstructionState} Executed the instruction is currently being acted upon\n * @property {InstructionState} Declined the destination has declined to execute the instruction, or the execution failed\n * @property {InstructionState} Completed the destination has executed successfully\n */\nconst InstructionStates = InstructionState.enumsValue(InstructionStateValues);\n\nexport default InstructionStates;\n","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A location precision object for use with defining named geographic precision.\n * \n * @extends ComparableEnum\n */\nexport class LocationPrecision extends ComparableEnum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} precision a relative precision value for this precision \n     */\n    constructor(name, precision) {\n        super(name, precision);\n        if ( this.constructor === LocationPrecision ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the relative precision value.\n     * \n     * This is an alias for {@link #name}.\n     * \n     * @returns {number} the precision\n     */\n    get precision() {\n        return this.value;\n    }\n\n\t/**\n\t * Get the {@link LocationPrecisions} values.\n\t * \n     * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn LocationPrecisionValues;\n\t}\n}\n\nconst LocationPrecisionValues = Object.freeze([\n    new LocationPrecision('LatLong', 1),\n    new LocationPrecision('Block', 5),\n    new LocationPrecision('Street', 10),\n    new LocationPrecision('PostalCode', 20),\n    new LocationPrecision('Locality', 30),\n    new LocationPrecision('StateOrProvince', 40),\n    new LocationPrecision('Region', 50),\n    new LocationPrecision('TimeZone', 60),\n    new LocationPrecision('Country', 70),\n]);\n\n/**\n * The enumeration of supported LocationPrecision values.\n * \n * @readonly\n * @enum {LocationPrecision}\n * @property {LocationPrecision} LatLong GPS coordinates\n * @property {LocationPrecision} Block a city block\n * @property {LocationPrecision} Street a street\n * @property {LocationPrecision} PostalCode a postal code (or \"zip code\")\n * @property {LocationPrecision} Locality a town or city\n * @property {LocationPrecision} StateOrProvince a state or province\n * @property {LocationPrecision} Region a large region\n * @property {LocationPrecision} TimeZone a time zone\n * @property {LocationPrecision} Country a country\n */\nconst LocationPrecisions = LocationPrecision.enumsValue(LocationPrecisionValues);\n\nexport default LocationPrecisions;\n","/**\n * A pagination criteria object.\n */\nclass Pagination {\n\n    /**\n     * Construct a pagination object.\n     * \n     * @param {number} max the maximum number of results to return \n     * @param {number} [offset] the 0-based starting offset \n     */\n    constructor(max, offset) {\n        this._max = (max > 0 ? +max : 0);\n        this._offset = (offset > 0 ? +offset : 0);\n    }\n\n    /**\n     * Get the maximum number of results to return.\n     * \n     * @returns {number} the maximum number of results\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     * Get the results starting offset.\n     * \n     * The first available result starts at offset <code>0</code>. Note this is \n     * a raw offset value, not a \"page\" offset.\n     * \n     * @returns {number} the starting result offset\n     */\n    get offset() {\n        return this._offset;\n    }\n\n    /**\n     * Copy constructor with a new <code>offset</code> value.\n     * \n     * @param {number} offset the new offset to use\n     * @return {Pagination} a new instance\n     */\n    withOffset(offset) {\n        return new Pagination(this.max, offset);\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * @return {string} the URI encoded string\n     */\n    toUriEncoding() {\n        let result = '';\n        if ( this.max > 0 ) {\n            result += 'max=' +this.max;\n        }\n        if ( this.offset > 0 ) {\n            if ( result.length > 0 ) {\n                result += '&';\n            }\n            result += 'offset=' +this.offset;\n        }\n        return result;\n    }\n}\n\nexport default Pagination;\n","/**\n * A description of a sort applied to a property of a collection.\n */\nclass SortDescriptor {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} key the property to sort on\n     * @param {boolean} [descending] <code>true</code> to sort in descending order, <code>false</code> for ascending\n     */\n    constructor(key, descending) {\n        this._key = key;\n        this._descending = !!descending;\n    }\n\n    /**\n     * Get the sort property name.\n     * \n     * @returns {string} the sort key\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * Get the sorting direction.\n     * \n     * @returns {boolean} <code>true</code> if descending order, <code>false</code> for ascending\n     */\n    get descending() {\n        return this._descending;\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * If <code>index</code> is provided and non-negative, then the query parameters will\n     * be encoded as an array property named <code>sortDescriptors</code>. Otherwise just\n     * bare <code>key</code> and <code>descending</code> properties will be used. The \n     * <code>descending</code> property is only added if it is <code>true</code>.\n     * \n     * @param {number} [index] an optional array property index\n     * @param {string} [propertyName=sortDescriptors] an optional array property name, only used if <code>index</code> is also provided\n     * @return {string} the URI encoded string\n     */\n    toUriEncoding(index, propertyName) {\n        let result,\n            propName = (propertyName || 'sortDescriptors');\n        if ( index !== undefined && index >= 0 ) {\n            result = encodeURIComponent(propName +'[' +index +'].key') + '=';\n        } else {\n            result = 'key=';\n        }\n        result += encodeURIComponent(this.key);\n        if ( this.descending ) {\n            if ( index !== undefined && index >= 0 ) {\n                result += '&' +encodeURIComponent(propName +'[' +index +'].descending') + '=true';\n            } else {\n                result += '&descending=true';\n            }\n        }\n        return result;\n    }\n\n}\n\nexport default SortDescriptor;\n","import Configuration from '../util/configuration';\n\n/**\n * An environment configuration utility object.\n *\n * This extends <code>Configuration</code> to add support for standard properties\n * needed to access the SolarNetwork API, such as host and protocol values.\n *\n * @extends Configuration\n */\nclass Environment extends Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * This will define the following default properties, if not supplied on the\n\t * <code>config</code> argument:\n\t *\n\t * <dl>\n\t * <dt>host</dt><dd><code>data.solarnetwork.net</code></dd>\n\t * <dt>protocol</dt><dd><code>https</code></dd>\n\t * <dt>port</dt><dd><code>443</code></dd>\n\t * </dl>\n\t *\n\t * @param {Object} [config] an optional set of properties to start with\n\t */\n\tconstructor(config) {\n\t\tsuper(Object.assign({\n\t\t\tprotocol: 'https',\n\t\t\thost: 'data.solarnetwork.net',\n\t\t\tport: (config && config.port ? config.port : (config && config.protocol ? (config.protocol === 'https' ? 443 : 80) : 443)),\n\t\t}, config));\n\t}\n\n    /**\n\t * Check if TLS is in use via the <code>https</code> protocol.\n\t *\n     * @returns {boolean} <code>true</code> if the <code>protocol</code> is set to <code>https</code>\n     */\n\tuseTls() {\n\t\treturn (this.value('protocol') === 'https');\n\t}\n\n}\n\nexport default Environment;\n","import MultiMap from '../util/multiMap';\n\nexport const HttpMethod = Object.freeze({\n\tGET: 'GET',\n\tHEAD: 'HEAD',\n\tPOST: 'POST',\n\tPUT: 'PUT',\n\tPATCH: 'PATCH',\n\tDELETE: 'DELETE',\n\tOPTIONS: 'OPTIONS',\n\tTRACE: 'TRACE',\n});\n\n/**\n * Support for HTTP headers.\n * \n * @extends MultiMap\n */\nclass HttpHeaders extends MultiMap {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n\nObject.defineProperties(HttpHeaders, {\n\t/**\n\t * The <code>Content-MD5</code> header.\n\t * \n\t * @memberof HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_MD5':\t\t{ value: 'Content-MD5' },\n\n\t/**\n\t * The <code>Content-Type</code> header.\n\t * \n\t * @memberof HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_TYPE': \t{ value: 'Content-Type' },\n\n\t/**\n\t * The <code>Date</code> header.\n\t * \n\t * @memberof HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DATE':\t\t\t\t{ value: 'Date' },\n\n\t/**\n\t * The <code>Digest</code> header.\n\t * \n\t * @memberof HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DIGEST':\t\t\t{ value: 'Digest' },\n\n\t/**\n\t * The <code>Host</code> header.\n\t * \n\t * @memberof HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'HOST': \t\t\t{ value: 'Host' },\n\n\t/**\n\t * The <code>X-SN-Date</code> header.\n\t * \n\t * @memberof HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'X_SN_DATE': \t\t{ value: 'X-SN-Date' },\n});\n\nexport default HttpHeaders;\n","import Configuration from '../util/configuration';\nimport Environment from './environment';\n\n/**\n * A utility class for helping to compose SolarNet URLs for the REST API.\n *\n * This class is essentially abstract and meant to have mixin helper objects extend it.\n */\nclass UrlHelper {\n\n    /**\n     * Constructor.\n     *\n     * @param {Environment|Object} [environment] the optional initial environment to use;\n     *        if a non-<code>Environment</code> object is passed then the properties of that object will\n     *        be used to construct a new <code>Environment</code> instance\n     */\n    constructor(environment) {\n        let env = (environment instanceof Environment ? environment\n            : new Environment(environment));\n        this.environment = env;\n        this._parameters = new Configuration();\n    }\n\n    /**\n     * Get a parameters object that can be used to hold URL variables.\n     * \n     * @readonly\n     * @type {Configuration}\n     */\n    get parameters() {\n        return this._parameters;\n    }\n\n    /**\n     * Get or set an environment parameter.\n     * \n     * This is a shortcut for calling {@link Configuration#value} on the\n     * <code>environment</code> object.\n     * \n     * @param {string} key the environment parameter name to get\n     * @param {Object} [val] the optional value to set\n     * @returns {Object} when called as a getter, the environment parameter value;\n     *                   when called as a setter, the environment parameters object\n     */\n    env(...args) {\n        return this.environment.value(...args);\n    }\n\n    /**\n     * Get or set a parameter.\n     * \n     * This is a shortcut for calling {@link Configuration#value} on the\n     * <code>parameters</code> object.\n     * \n     * @param {string} key the parameter name to get\n     * @param {Object} [val] the optional value to set\n     * @returns {Object} when called as a getter, the parameter value;\n     *                   when called as a setter, the parameters object\n     */\n    parameter(...args) {\n        return this._parameters.value(...args);\n    }\n\n    /**\n     * Get a URL for just the SolarNet host, without any path.\n     *\n     * @returns {string} the URL to the SolarNet host\n     */\n    hostUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'http' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n    \n    /**\n     * Get a URL for just the SolarNet host using the WebSocket protocol, without any path.\n     * \n     * @returns {string} the URL to the SolarNet host WebSocket\n     */\n    hostWebSocketUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'ws' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n\n\t/**\n\t * Get the base URL to the REST API.\n\t * \n\t * This implementation is a stub, meant for subclasses to override. This implementation\n     * simply returns {@link UrlHelper#hostUrl}.\n\t * \n     * @abstract\n\t * @returns {string} the base URL to the REST API\n\t */\n\tbaseUrl() {\n\t\treturn this.hostUrl();\n\t}\n\n    /**\n     * Replace occurances of URL template variables with values from the <code>parameters</code>\n     * property and append to the host URL.\n     * \n     * This method provides a way to resolve an absolute URL based on the configured\n     * environment and parameters on this object.\n     * \n     * @param {string} template a URL path template\n     * @returns {string} an absolute URL\n     * @see UrlHelper#resolveTemplateUrl\n     */\n    resolveTemplatePath(template) {\n        return this.hostUrl() + this.resolveTemplateUrl(template);\n    }\n\n     /**\n     * Replace occurances of URL template variables with values from the <code>parameters</code>\n     * property.\n     * \n     * URL template variables are specified as <code>{<em>name</em>}</code>. The variable\n     * will be replaced by the value associated with property <code>name</code> in the\n     * <code>parameters</code> object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @returns {string} the URL with template variables resolved\n     */\n   resolveTemplateUrl(template) {\n        return UrlHelper.resolveTemplateUrl(template, this._parameters);\n    }\n\n    /**\n     * Replace occurances of URL template variables with values from a parameter object.\n     * \n     * URL template variables are specified as <code>{<em>name</em>}</code>. The variable\n     * will be replaced by the value associated with property <code>name</code> in the\n     * provided parameter object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @param {Object} params an object whose properties should serve as template variables\n     * @returns {string} the URL\n     */\n    static resolveTemplateUrl(template, params) {\n        return template.replace(/\\{([^}]+)\\}/g, function(match, variableName) {\n            let variableValue = params[variableName];\n            return (variableValue !== undefined ? encodeURIComponent(variableValue) : '');\n        });\n    }\n\n}\n\nexport default UrlHelper;\n","export const NodeIdsKey = 'nodeIds';\n\nexport const SourceIdsKey = 'sourceIds';\n\n/**\n * A mixin class that adds support for SolarNode properties to a {@link UrlHelper}.\n * \n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @mixin\n * @property {number} nodeId the first available node ID from the <code>nodeIds</code> property;\n *                           setting this replaces any existing node IDs with an array of just that value\n * @property {number[]} nodeIds an array of node IDs, set on the <code>nodeIds</code> parameter\n * @property {string} sourceId the first available source ID from the <code>sourceIds</code> property;\n *                             setting this replaces any existing node IDs with an array of just that value \n * @property {string[]} sourceIds an array of source IDs, set on the <code>sourceIds</code> parameter\n * @returns {*} the mixin\n */\nconst NodeUrlHelperMixin = (superclass) => class extends superclass {\n\n    get nodeId() {\n        const nodeIds = this.parameter(NodeIdsKey);\n        return (Array.isArray(nodeIds) && nodeIds.length > 0 ? nodeIds[0] : null);\n    }\n\n    set nodeId(nodeId) {\n        this.parameter(NodeIdsKey, [nodeId]);\n    }\n\n    get nodeIds() {\n        return this.parameter(NodeIdsKey);\n    }\n\n    set nodeIds(nodeIds) {\n        this.parameter(NodeIdsKey, nodeIds);\n    }\n\n    get sourceId() {\n        const sourceIds = this.parameter(SourceIdsKey);\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        this.parameter(SourceIdsKey, [sourceId]);\n    }\n\n    get sourceIds() {\n        return this.parameter(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.parameter(SourceIdsKey, sourceIds);\n    }\n\n}\n\nexport default NodeUrlHelperMixin;\n","/** The SolarQuery default path. */\nexport const SolarQueryDefaultPath = '/solarquery';\n\n/** The {@link UrlHelper} parameters key for the SolarQuery path. */\nexport const SolarQueryPathKey = 'solarQueryPath';\n\n/** The SolarQuery REST API path. */\nexport const SolarQueryApiPathV1 = '/api/v1';\n\n/** \n * The {@link UrlHelper} parameters key that holds a <code>boolean</code> flag to\n * use the public path scheme (<code>/pub</code>) when constructing URLs.\n */\nexport const SolarQueryPublicPathKey = 'publicQuery';\n\n/**\n * A mixin class that adds SolarQuery specific support to {@link UrlHelper}.\n * \n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @mixin\n * @returns {*} the mixin\n */\nconst QueryUrlHelperMixin = (superclass) => class extends superclass {\n\n\t/**\n\t * Get the base URL to the SolarQuery v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the <code>hostUrl</code>, the <code>solarQueryPath</code> context path,\n     * and the <code>publicQuery</code> boolean flag. If the context path is not \n     * available, it will default to <code>/solarquery</code>.\n\t * \n\t * @returns {string} the base URL to SolarQuery\n\t * @memberof QueryUrlHelperMixin#\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarQueryPathKey) || SolarQueryDefaultPath;\n        const isPubPath = !!this.env(SolarQueryPublicPathKey);\n\t\treturn this.hostUrl() + path + SolarQueryApiPathV1\n            +(isPubPath ? '/pub' : '/sec');\n\t}\n\n};\n\nexport default QueryUrlHelperMixin;\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin'\n\n/**\n * A mixin class that adds SolarNode datum metadata support to {@link UrlHelper}.\n * \n * <p>Datum metadata is metadata associated with a specific node and source, i.e. \n * a <code>nodeId</code> and a <code>sourceId</code>.\n * \n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @mixin\n * @returns {*} the mixin\n */\nconst DatumMetadataUrlHelperMixin = (superclass) => class extends superclass {\n\n    /**\n     * Get a base URL for datum metadata operations using a specific node ID.\n     * \n     * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n     * @returns {string} the base URL\n     * @private\n     * @memberof DatumMetadataUrlHelperMixin#\n     */\n    baseDatumMetadataUrl(nodeId) {\n        return this.baseUrl() + '/datum/meta/' +(nodeId || this.nodeId);\n    }\n\n    datumMetadataUrlWithSource(nodeId, sourceId) {\n        let result = this.baseDatumMetadataUrl(nodeId);\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            result += '?sourceId=' +encodeURIComponent(source);\n        }\n        return result;\n    }\n\n\t/**\n\t * Generate a URL for viewing datum metadata.\n     * \n     * If no <code>sourceId</code> is provided, then the API will return all available datum metadata for all sources.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n     * @returns {string} the URL\n     * @memberof DatumMetadataUrlHelperMixin#\n\t */\n\tviewDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n    \n\t/**\n\t * Generate a URL for adding (merging) datum metadata via a <code>POST</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n     * @memberof DatumMetadataUrlHelperMixin#\n\t */\n    addDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for setting datum metadata via a <code>PUT</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n     * @memberof DatumMetadataUrlHelperMixin#\n\t */\n    replaceDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for deleting datum metadata via a <code>DELETE</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n     * @memberof DatumMetadataUrlHelperMixin#\n\t */\n    deleteDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for searching for datum metadata.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n\t * @param {SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t * @memberof DatumMetadataUrlHelperMixin#\n\t */\n\tfindDatumMetadataUrl(nodeId, sourceId, sorts, pagination) {\n        let result = this.baseDatumMetadataUrl(nodeId);\n\t\tlet params = '';\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            params += 'sourceId=' +encodeURIComponent(source);\n        }\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\nexport default DatumMetadataUrlHelperMixin;\n\n/**\n * A concrete {@link UrlHelper} with the {@link DatumMetadataUrlHelperMixin},  {@link QueryUrlHelperMixin}, and\n * {@link NodeUrlHelperMixin} mixins.\n * \n * @mixes DatumMetadataUrlHelperMixin\n * @mixes QueryUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nexport class DatumMetadataUrlHelper extends DatumMetadataUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n","import UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin';\n\n/**\n * A mixin class that adds SolarNode datum query support to {@link UrlHelper}.\n *\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @mixin\n * @returns {*} the mixin\n */\nconst NodeDatumUrlHelperMixin = (superclass) => class extends superclass {\n\n\t/**\n\t * Generate a URL for the \"reportable interval\" for a node, optionally limited to a specific set of source IDs.\n\t *\n     * If no source IDs are provided, then the reportable interval query will return an interval for\n     * all available sources.\n     *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string[]} [sourceIds] an array of source IDs to limit query to; if not provided the <code>sourceIds</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeDatumUrlHelperMixin#\n\t */\n\treportableIntervalUrl(nodeId, sourceIds) {\n\t\tlet url = (this.baseUrl() +'/range/interval?nodeId=' +(nodeId || this.nodeId));\n        let sources = (sourceIds || this.sourceIds);\n\t\tif ( Array.isArray(sources) && sources.length > 0 ) {\n\t\t\turl += '&sourceIds=' + sources.map(e => encodeURIComponent(e)).join(',');\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Generate a URL for finding the available source IDs for a node or metadata filter.\n\t * \n\t * @param {number|number[]} [nodeId] a specific node ID, or array of node IDs, to use; if not provided the \n\t *                                   <code>nodeIds</code> property of this class will be used, unless <code>null</code>\n\t *                                   is passed in which case no node IDs will be added to the URL\n\t * @param {string} [metadataFilter] the LDAP-style metadata filter\n\t * @returns {string} the URL\n\t * @memberof NodeDatumUrlHelperMixin#\n\t */\n\tavailableSourcesUrl(nodeId, metadataFilter) {\n\t\tconst nodeIds = (Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : nodeId !== null ? this.nodeIds : undefined);\n\t\tlet result = this.baseUrl() + '/range/sources';\n\t\tlet params = '';\n\t\tif ( Array.isArray(nodeIds) ) {\n\t\t\tparams += 'nodeIds=' +nodeIds.join(',');\n\t\t}\n\t\tif ( metadataFilter ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += 'metadataFilter=' +encodeURIComponent(metadataFilter);\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' +params;\n\t\t}\n\t\treturn result;\n\t}\n\n}\n\n/**\n * A concrete {@link UrlHelper} with the {@link NodeDatumUrlHelperMixin}, {@link QueryUrlHelperMixin},\n * and {@link NodeUrlHelperMixin} mixins.\n * \n * @mixes NodeDatumUrlHelperMixin\n * @mixes QueryUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nexport class NodeDatumUrlHelper extends NodeDatumUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeDatumUrlHelperMixin;\n","/** The SolarUser default path. */\nexport const SolarUserDefaultPath = '/solaruser';\n\n/** The {@link UrlHelper} parameters key for the SolarUser path. */\nexport const SolarUserPathKey = 'solarUserPath';\n\n/** The SolarUser REST API path. */\nexport const SolarUserApiPathV1 = '/api/v1/sec';\n\n/** The {@link UrlHelper} parameters key that holds the <code>userId</code>. */\nexport const UserIdsKey = 'userIds';\n\n/**\n * A mixin class that adds SolarUser specific support to <code>UrlHelper</code>.\n * \n * @param {UrlHelper} superclass the UrlHelper class to mix onto \n * @mixin\n * @property {number} userId the first available user ID from the <code>userIds</code> property;\n *                           setting this replaces any existing user IDs with an array of just that value\n * @property {number[]} userIds an array of user IDs, set on the <code>userIds</code> parameter\n * @returns {*} the mixin\n */\nconst UserUrlHelperMixin = (superclass) => class extends superclass {\n\n    /**\n     * Get the default user ID.\n     * \n     * This gets the first available user ID from the <code>userIds</code> property.\n     * \n     * @returns {number} the default user ID, or <code>null</code>\n\t * @memberof UserUrlHelperMixin#\n     */\n    get userId() {\n        const userIds = this.parameter(UserIdsKey);\n        return (Array.isArray(userIds) && userIds.length > 0 ? userIds[0] : null);\n    }\n\n    /**\n     * Set the user ID.\n     * \n     * This will set the <code>userIds</code> property to a new array of just the given value.\n     * \n     * @param {number} userId the user ID to set\n\t * @memberof UserUrlHelperMixin#\n     */\n    set userId(userId) {\n        this.parameter(UserIdsKey, [userId]);\n    }\n\n    get userIds() {\n        return this.parameter(UserIdsKey);\n    }\n\n    set userIds(userIds) {\n        this.parameter(UserIdsKey, userIds);\n    }\n\n\t/**\n\t * Get the base URL to the SolarUser v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the <code>hostUrl</code> and a <code>solarUserPath</code> context path.\n\t * If the context path is not available, it will default to \n\t * <code>/solaruser</code>.\n\t * \n\t * @returns {string} the base URL to SolarUser\n\t * @memberof UserUrlHelperMixin#\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarUserPathKey) || SolarUserDefaultPath;\n\t\treturn super.baseUrl() + path + SolarUserApiPathV1;\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all active nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's active nodes\n\t * @memberof UserUrlHelperMixin#\n\t */\n\tviewNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all pending nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's pending nodes\n\t * @memberof UserUrlHelperMixin#\n\t */\n\tviewPendingNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/pending';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all archived nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's archived nodes\n\t * @memberof UserUrlHelperMixin#\n\t */\n\tviewArchivedNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/archived';\n\t}\n\n\t/**\n\t * Generate a URL to update the archived status of a set of nodes via a <code>POST</code> request.\n\t *\n\t * @param {number|number[]|null} nodeId a specific node ID, or array of node IDs, to update; if not provided the \n\t *                                      <code>nodeIds</code> property of this class will be used\n\t * @param {boolean} archived <code>true</code> to mark the nodes as archived; <code>false</code> to un-mark\n\t *                           and return to normal status\n\t * @return {string} the URL to update the nodes archived status\n\t * @memberof UserUrlHelperMixin#\n\t */\n\tupdateNodeArchivedStatusUrl(nodeId, archived) {\n\t\tconst nodeIds = Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : this.nodeIds;\n\t\tlet result = this.baseUrl() + '/nodes/archived?nodeIds='\n\t\t\t+nodeIds.join(',') +'&archived='\n\t\t\t+(archived ? 'true' : 'false');\n\t\treturn result;\n\t}\n\n}\n\nexport default UserUrlHelperMixin;\n","import UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * A mixin class that adds SolarNode instruction support to {@link UrlHelper}.\n * \n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @mixin\n * @returns {*} the mixin\n */\nconst NodeInstructionUrlHelperMixin = (superclass) => class extends superclass {\n\n\t/**\n\t * Generate a URL to get all details for a specific instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to get\n\t * @returns {string} the URL\n\t * @memberof NodeInstructionUrlHelperMixin#\n\t */\n\tviewInstructionUrl(instructionId) {\n\t\treturn (this.baseUrl() +'/instr/view?id=' +encodeURIComponent(instructionId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing active instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeInstructionUrlHelperMixin#\n\t */\n\tviewActiveInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewActive?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing pending instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeInstructionUrlHelperMixin#\n\t */\n\tviewPendingInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewPending?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for changing the state of an instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to update\n\t * @param {InstructionState} state the instruction state to set\n\t * @returns {string} the URL\n\t * @see the {@link InstructionStates} enum for possible state values\n\t * @memberof NodeInstructionUrlHelperMixin#\n\t */\n\tupdateInstructionStateUrl(instructionId, state) {\n\t\treturn (this.baseUrl()\n\t\t\t+'/instr/updateState?id=' +encodeURIComponent(instructionId)\n\t\t\t+'&state=' +encodeURIComponent(state.name));\n\t}\n\n\t/**\n\t * Generate a URL for posting an instruction request.\n\t *\n\t * @param {string} topic the instruction topic.\n\t * @param {Object[]} [parameters] an array of parameter objects in the form <code>{name:n1, value:v1}</code>.\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeInstructionUrlHelperMixin#\n\t */\n\tqueueInstructionUrl(topic, parameters, nodeId) {\n\t\tvar url = (this.baseUrl()\n\t\t\t+'/instr/add?nodeId=' +(nodeId || this.nodeId)\n\t\t\t+'&topic=' +encodeURIComponent(topic));\n\t\tvar i, len;\n\t\tif ( Array.isArray(parameters) ) {\n\t\t\tfor ( i = 0, len = parameters.length; i < len; i++ ) {\n\t\t\t\turl += '&' +encodeURIComponent('parameters['+i+'].name') +'=' +encodeURIComponent(parameters[i].name)\n\t\t\t\t\t+ '&' +encodeURIComponent('parameters['+i+'].value') +'=' +encodeURIComponent(parameters[i].value);\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Create an instruction parameter suitable to passing to {@link NodeInstructionUrlHelperMixin#queueInstructionUrl}.\n\t * \n\t * @param {string} name the parameter name \n\t * @param {*} value the parameter value\n\t * @returns {object} with <code>name</code> and <code>value</code> properties\n\t * @memberof NodeInstructionUrlHelperMixin\n\t */\n\tstatic instructionParameter(name, value) {\n\t\treturn {name:name, value:value};\n\t}\n};\n\nexport default NodeInstructionUrlHelperMixin;\n\n/**\n * A concrete {@link UrlHelper} with the {@link NodeInstructionUrlHelperMixin},  {@link UserUrlHelperMixin}, and\n * {@link NodeUrlHelperMixin} mixins.\n * \n * @mixes NodeInstructionUrlHelperMixin\n * @mixes UserUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nexport class NodeInstructionUrlHelper extends NodeInstructionUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\n/**\n * The static {@link NodeInstructionUrlHelperMixin#instructionParameter} method so it can be imported directly.\n */\nexport const instructionParameter = NodeInstructionUrlHelper.instructionParameter;\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * A mixin class that adds SolarNode metadata support to {@link UrlHelper}.\n * \n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @mixin\n * @returns {*} the mixin\n */\nconst NodeMetadataUrlHelperMixin = (superclass) => class extends superclass {\n\n\t/**\n\t * Generate a URL for viewing the configured node's metadata.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeMetadataUrlHelperMixin#\n\t */\n\tviewNodeMetadataUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/nodes/meta/' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for adding metadata to a node via a <code>POST</code> request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeMetadataUrlHelperMixin#\n\t */\n\taddNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for setting the metadata of a node via a <code>PUT</code> request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeMetadataUrlHelperMixin#\n\t */\n\treplaceNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for deleting the metadata of a node via a <code>DELETE</code> request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t * @memberof NodeMetadataUrlHelperMixin#\n\t */\n\tdeleteNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for searching for node metadata.\n\t * \n\t * @param {number|number[]} [nodeId] a specific node ID, or array of node IDs, to use; if not provided the \n\t *                                   <code>nodeIds</code> property of this class will be used, unless <code>null</code>\n\t *                                   is passed in which case no node IDs will be added to the URL so that all available\n\t *                                   node metadata objects will be returned\n\t * @param {SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t * @memberof NodeMetadataUrlHelperMixin#\n\t */\n\tfindNodeMetadataUrl(nodeId, sorts, pagination) {\n\t\tconst nodeIds = (Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : nodeId !== null ? this.nodeIds : undefined);\n\t\tlet result = this.baseUrl() + '/nodes/meta';\n\t\tlet params = '';\n\t\tif ( Array.isArray(nodeIds) ) {\n\t\t\tparams += 'nodeIds=' +nodeIds.join(',');\n\t\t}\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\nexport default NodeMetadataUrlHelperMixin;\n\n/**\n * A concrete {@link UrlHelper} with the {@link NodeMetadataUrlHelperMixin},  {@link UserUrlHelperMixin}, and\n * {@link NodeUrlHelperMixin} mixins.\n * \n * @mixes NodeMetadataUrlHelperMixin\n * @mixes UserUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nexport class NodeMetadataUrlHelper extends NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n","import UrlHelper from './urlHelper';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * A mixin class that adds security token support to a SolarUser <code>UrlHelper</code>.\n * \n * @param {UrlHelper} superclass the UrlHelper class to mix onto \n * @mixin\n * @returns {*} the mixin\n */\nconst UserAuthTokenUrlHelperMixin = (superclass) => class extends superclass {\n\n    /**\n     * Generate a URL for listing all available auth tokens.\n     * \n\t * @returns {string} the URL\n     * @memberof UserAuthTokenUrlHelperMixin#\n     */\n    listAllAuthTokensUrl() {\n        return this.baseUrl() + '/user/auth-tokens';\n    }\n\n    /**\n     * Generate a URL for creating a new auth token, via a <code>POST</code> request.\n     * \n     * The request body accepts a {@link SecurityPolicy} JSON document.\n     * \n     * @param {AuthTokenType} type the auth token type to generate\n\t * @returns {string} the URL\n     * @memberof UserAuthTokenUrlHelperMixin#\n     */\n    generateAuthTokenUrl(type) {\n        return this.baseUrl() + '/user/auth-tokens/generate/' +type.name;\n    }\n\n    /**\n     * Generate a URL for accessing an auth token.\n     * \n     * @param {string} tokenId the token ID\n     * @memberof UserAuthTokenUrlHelperMixin#\n\t * @returns {string} the URL\n     * @private\n     */\n    authTokenUrl(tokenId) {\n        return this.baseUrl() + '/user/auth-tokens/' +encodeURIComponent(tokenId);\n    }\n\n    /**\n     * Generate a URL for deleting an auth token, via a <code>DELETE</code> request.\n     * \n     * @param {string} tokenId the token ID to delete\n\t * @returns {string} the URL\n     * @memberof UserAuthTokenUrlHelperMixin#\n     */\n    deleteAuthTokenUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating (merging) a security policy on an auth token,\n     * via a <code>PATCH</code> request.\n     * \n     * The request body accepts a {@link SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     * @memberof UserAuthTokenUrlHelperMixin#\n     */\n    updateAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for replacing a security policy on an auth token,\n     * via a <code>PUT</code> request.\n     * \n     * The request body accepts a {@link SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     * @memberof UserAuthTokenUrlHelperMixin#\n     */\n    replaceAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating the status of an auth token,\n     * via a <code>POST</code> request.\n     * \n     * @param {string} tokenId the ID of the token to update\n     * @param {AuthTokenStatus} status the status to change to\n\t * @returns {string} the URL\n     * @memberof UserAuthTokenUrlHelperMixin#\n     */\n    updateAuthTokenStatusUrl(tokenId, status) {\n        return this.authTokenUrl(tokenId) + '?status=' +encodeURIComponent(status.name);\n    }\n}\n\nexport default UserAuthTokenUrlHelperMixin;\n\n/**\n * A concrete {@link UrlHelper} with the {@link UserAuthTokenUrlHelperMixin} and  {@link UserUrlHelperMixin} mixins.\n * \n * @mixes UserAuthTokenUrlHelperMixin\n * @mixes UserUrlHelperMixin\n * @extends UrlHelper\n */\nexport class UserAuthTokenUrlHelper extends UserAuthTokenUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {\n\n }\n"]}