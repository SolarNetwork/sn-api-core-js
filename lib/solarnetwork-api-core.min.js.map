{"version":3,"sources":["../src/format/date.js","../src/util/date.js","../src/data/nest.js","../src/domain/datumFilter.js","../src/domain/generalMetadata.js","../src/domain/securityPolicy.js","../src/util/multiMap.js","../src/util/configuration.js","../src/net/environment.js","../src/net/urlQuery.js","../src/net/authV2.js","../src/util/logger.js","../src/data/array.js","../src/util/enum.js","../src/util/comparableEnum.js","../src/domain/aggregation.js","../src/domain/authTokenStatus.js","../src/domain/authTokenType.js","../src/domain/pagination.js","../src/domain/sortDescriptor.js","../src/util/propMap.js","../src/domain/location.js","../src/domain/instructionState.js","../src/domain/locationPrecision.js","../src/net/httpHeaders.js","../src/net/urlHelper.js","../src/net/locationUrlHelperMixin.js","../src/net/queryUrlHelperMixin.js","../src/net/locationDatumMetadataUrlHelperMixin.js","../src/net/locationDatumUrlHelperMixin.js","../src/net/nodeUrlHelperMixin.js","../src/net/nodeDatumMetadataUrlHelperMixin.js","../src/net/nodeDatumUrlHelperMixin.js","../src/net/userUrlHelperMixin.js","../src/net/nodeInstructionUrlHelperMixin.js","../src/net/nodeMetadataUrlHelperMixin.js","../src/net/userAuthTokenUrlHelperMixin.js","../src/net/userMetadataUrlHelperMixin.js","../src/format/scale.js"],"names":["iso8601Date","date","includeTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","datumDate","d","localDate","dateTimeParse","localTime","created","timestampParse","dateTimeUrlParse","normalizeNestedStackDataByDate","layerData","fillTemplate","fillFn","j","k","dummy","prop","copyIndex","i","jMax","length","max","map","e","values","undefined","getTime","sourceId","key","hasOwnProperty","splice","datumFilterUriEncodingPropertyMapper","value","NodeIdsKey","LocationIdsKey","SourceIdsKey","UserIdsKey","Array","isArray","substring","StartDateKey","EndDateKey","dateTimeUrlFormat","MostRecentKey","stringMapToObject","strMap","obj","Object","create","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","_ref2","v","Map","objectToStringMap","_step2","keys","_iteratorNormalCompletion2","_iterator2","set","_typeof","setOrNull","result","Set","size","mergedSets","set1","set2","s1","s2","add","addValue","replace","keyLc","toLowerCase","mapping","mappings","val","mappingNames","push","len","createGetter","me","createSetter","createProperty","defineProperty","normalizedProtocol","normalizedConfig","config","assign","protocol","port","host","hostname","urlQueryParse","search","pairs","pair","params","match","split","decodeURIComponent","caseInsensitiveEqualsFn","valueLc","toString","lowercaseSortedArray","items","sortedItems","sort","_hexEscapeChar","c","charCodeAt","toUpperCase","_encodeURIComponent","str","encodeURIComponent","consoleLog","level","logLevel","console","logFn","error","warn","info","log","args","_len","_key","arguments","array","freeze","data","aggregate","aggMillseconds","currTime","expectedNextTime","nextTime","fill","fillTime","f","getPrototypeOf","getOwnPropertyDescriptors","p","Date","prototype","apply","Enum","name","_name","this","constructor","enums","reduce","enumValues","ComparableEnum","_value","_this","other","minEnum","cache","get","agg","compareTo","Aggregation","AggregationValues","Number","MAX_SAFE_INTEGER","Aggregations","enumsValue","timestampFormat","utcFormat","dateTimeFormat","dateFormat","utcParse","aggregateTimeCount","endDate","exclusiveEndDate","interval","ceil","offset","timeCountValue","propName","isNaN","end","start","timeUnit","timeCount","Hour","utcMinute","precision","Math","min","setUTCMinutes","utcHour","Month","equals","Year","utcMonth","utcYear","floor","Day","utcDay","nest$1","resultKey","copyProperties","sumProperties","staticProperties","dataLength","clone","layerCount","copyPropLength","sumPropLength","metricName","sourceIdMap","aggFn","metricExtractorFn","rollupFn","sum","nest","has","sortKeys","ascending","rollup","r","metricKey","entries","layer","combined","forEach","AuthTokenStatus","_Enum","AuthTokenStatusValues","AuthTokenStatuses","AuthTokenType","AuthTokenTypeValues","AuthTokenTypes","Pagination","_max","_offset","SortDescriptor","descending","_descending","index","propertyName","PropMap","props","properties","newValue","newProps","callbackFn","kv","toUriEncoding","sorts","pagination","paginationParams","Location","loc","DatumFilter","nodeIds","nodeId","locationIds","locationId","sourceIds","userIds","userId","path","GeneralMetadata","propertyInfo","tags","from","JSON","stringify","json","m","pm","t","parse","InstructionState","InstructionStateValues","InstructionStates","LocationPrecision","LocationPrecisionValues","LocationPrecisions","SecurityPolicy","aggregations","minAggregation","locationPrecisions","minLocationPrecision","nodeMetadataPaths","userMetadataPaths","_nodeIds","_sourceIds","_aggregations","_minAggregation","_locationPrecisions","_minLocationPrecision","_nodeMetadataPaths","_userMetadataPaths","MIN_AGGREGATION_CACHE","MIN_LOCATION_PRECISION_CACHE","SecurityPolicyBuilder","policy","withAggregations","withMinAggregation","withLocationPrecisions","withMinLocationPrecision","withNodeIds","withSourceIds","withNodeMetadataPaths","withUserMetadataPaths","addAggregations","addLocationPrecisions","addNodeIds","addSourceIds","addNodeMetadataPaths","addUserMetadataPaths","minimumEnumSet","buildAggregations","buildLocationPrecisions","MultiMap","putAll","indexOf","Configuration","initialMap","enabled","newMap","Environment","HttpMethod","HttpContentType","HttpHeaders","defineProperties","urlQuery","parameters","encoderFn","handleValue","encoder","AuthorizationV2Builder","token","environment","tokenId","forceHostPort","reset","contentDigest","httpHeaders","signedHeaderNames","method","GET","tokenSecret","signingKey","computeSigningKey","signingKeyExpiration","requestDate","httpMethod","put","HOST","requestPath","url","uri","uriParse","scheme","query","queryParams","CONTENT_TYPE","useSnDate","headerName","headerValue","headers","digest","Hex","content","SHA256","contentSHA256","header","Base64","keySet","first","vals","valsLen","sortedLowercaseHeaderNames","toUTCString","firstValue","trim","join","EMPTY_STRING_SHA256_HEX","X_SN_DATE","DATE","containsKey","CONTENT_MD5","DIGEST","computeCanonicalRequestData","canonicalHeaderNames","canonicalQueryParameters","canonicalHeaders","canonicalSignedHeaderNames","canonicalContentSHA256","secretKey","datestring","HmacSHA256","canonicalRequestData","sortedHeaderNames","canonicalReq","signatureData","computeSignatureData","signature","buildWithKey","now","signedHeaders","findIndex","existingIndex","concat","remove","UrlHelper","env","_parameters","_environment","tls","useTls","hostUrl","template","resolveTemplateUrl","variableName","variableValue","LocationUrlHelperMixin","superclass","filter","baseUrl","toUriEncodingWithSorting","parameter","QueryUrlHelperMixin","isPubPath","publicQuery","LocationDatumMetadataUrlHelperMixin","baseLocationDatumMetadataUrl","source","locationDatumMetadataUrlWithSource","LocationDatumMetadataUrlHelper","LocationDatumUrlHelperMixin","startDate","datumFilter","LocationDatumUrlHelper","NodeUrlHelperMixin","NodeDatumMetadataUrlHelperMixin","baseNodeDatumMetadataUrl","nodeDatumMetadataUrlWithSource","userParam","userMetadataUrl","NodeDatumMetadataUrlHelper","NodeDatumUrlHelperMixin","sources","NodeDatumUrlHelper","UserUrlHelperMixin","babelHelpers.get","archived","NodeInstructionUrlHelperMixin","instructionId","state","topic","NodeInstructionUrlHelper","instructionParameter","NodeMetadataUrlHelperMixin","viewNodeMetadataUrl","NodeMetadataUrlHelper","UserAuthTokenUrlHelperMixin","type","authTokenUrl","status","UserAuthTokenUrlHelper","UserMetadataUrlHelperMixin","UserMetadataUrlHelper","logLevels","Logger","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","isoParse","num","abs","baseUnit","scale"],"mappings":"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","file":"lib/solarnetwork-api-core.min.js.map","sourcesContent":["import { utcFormat, utcParse, isoParse } from 'd3-time-format';\n\n/**\n * Format a date into a SolarNet UTC timestamp format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd HH:mm:ss.SSS'Z'`\n * @alias module:format~timestampFormat\n */\nexport const timestampFormat = utcFormat(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\n/**\n * Format a date into a SolarNet UTC date/time format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd HH:mm`\n * @alias module:format~dateTimeFormat\n */\nexport const dateTimeFormat = utcFormat(\"%Y-%m-%d %H:%M\");\n\n/**\n * Format a date into a SolarNet URL UTC date/time format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd'T'HH:mm`\n * @alias module:format~dateTimeUrlFormat\n */\nexport const dateTimeUrlFormat = utcFormat(\"%Y-%m-%dT%H:%M\");\n\n/**\n * Format a date into a SolarNet UTC date format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd`\n * @alias module:format~dateFormat\n */\nexport const dateFormat = utcFormat(\"%Y-%m-%d\");\n\n/**\n * Parse a SolarNet UTC timestamp value.\n * @function\n * @param {string} str the string to parse - `yyyy-MM-dd HH:mm:ss.SSS'Z'\n * @returns {Date} the parsed date, or `null`\n * @alias module:format~timestampParse\n */\nexport const timestampParse = utcParse(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\n/**\n * Parse a SolarNet UTC date/time.\n * @function\n * @param {string} str the string to parse - `yyyy-MM-dd HH:mm\n * @returns {Date} the parsed date, or `null`\n * @alias module:format~dateTimeParse\n */\nexport const dateTimeParse = utcParse(\"%Y-%m-%d %H:%M\");\n\nexport { \n\t/**\n\t * Parse a SolarNet URL UTC date/time value.\n\t * @function\n\t * @param {string} str the string to parse - `yyyy-MM-dd'T'HH:mm`\n\t * @returns {Date} the parsed date, or `null`\n\t * @alias module:format~dateTimeUrlParse\n\t */\n\tisoParse as dateTimeUrlParse, \n\t\n\t/**\n\t * Parse a SolarNet UTC date value.\n\t * @function\n\t * @param {string} str the string to parse - `yyyy-MM-dd`\n\t * @returns {Date} the parsed date, or `null`\n\t * @alias module:format~dateParse\n\t */\n\tisoParse as dateParse } from 'd3-time-format';\n\n/**\n * Parse a UTC date string, from a variety of supported formats.\n *\n * @param {String} str the string to parse into a date\n * @returns {Date} the parsed `Date`, or `null` if the date can't be parsed\n * @alias module:format~dateParser\n */\nexport function dateParser(str) {\n\tvar date = isoParse(str)\n\t\t|| timestampParse(str)\n\t\t|| dateTimeParse(str);\n\treturn date;\n}\n\n/**\n * Format a date into an ISO 8601 timestamp or date string, in the UTC time zone.\n * \n * @param {Date} date the date to format \n * @param {boolean} [includeTime=false] `true` to format as a timestamp, `false` as just a date\n * @returns {string} the formatted date string\n * @alias module:format~iso8601Date\n */\nexport function iso8601Date(date, includeTime) {\n\treturn ''+date.getUTCFullYear()\n\t\t\t+(date.getUTCMonth() < 9 ? '0' : '') +(date.getUTCMonth()+1)\n\t\t\t+(date.getUTCDate() < 10 ? '0' : '') + date.getUTCDate()\n\t\t\t+(includeTime ?\n\t\t\t\t'T'\n\t\t\t\t+(date.getUTCHours() < 10 ? '0' : '') + date.getUTCHours()\n\t\t\t\t+(date.getUTCMinutes() < 10 ? '0' : '') + date.getUTCMinutes()\n\t\t\t\t+(date.getUTCSeconds() < 10 ? '0' : '') +date.getUTCSeconds()\n\t\t\t\t+'Z'\n\t\t\t\t: '');\n}\n\n/**\n * Get a UTC season constant for a date. Seasons are groups of 3 months, e.g. \n * Spring, Summer, Autumn, Winter.\n * \n * The returned value will be a number between 0 and 3, where:\n * \n *  * (Mar, Apr, May) = `0`\n *  * (Jun, Jul, Aug) = `1`\n *  * (Sep, Oct, Nov) = `2`\n *  * (Dec, Jan, Feb) = `3`\n * \n * @param {Date|number} date either a date to get the season for, or a number representing the UTC month of a date\n * @returns {number} a season constant number, from 0 - 3\n * @alias module:format~seasonForDate\n */\nexport function seasonForDate(date) {\n\tconst m = (date.getUTCMonth ? date.getUTCMonth() : Number(date));\n\tif ( m < 2 || m === 11 ) {\n\t\treturn 3;\n\t} else if ( m < 5 ) {\n\t\treturn 0;\n\t} else if ( m < 8 ) {\n\t\treturn 1;\n\t} else {\n\t\treturn 2;\n\t}\n}\n","import {\n    utcMinute,\n    utcHour,\n    utcDay,\n    utcMonth,\n    utcYear\n} from 'd3-time';\nimport Aggregations from '../domain/aggregation';\nimport { dateTimeParse, dateTimeUrlParse, timestampParse } from '../format/date';\n\n/**\n * An object that defines levels of date range configuration.\n *  \n * @typedef {Object} module:util~DateRangeConfiguration\n * @property {number} [numHours] the number of hours to use\n * @property {number} [numDays] the number of days to use\n * @property {number} [numMonths] the number of months to use\n * @property {number} [numYears] the number of years to use\n */\n\n/**\n * An object that defines a date range.\n *  \n * @typedef {Object} module:util~DateRange\n * @property {Date} start the starting date\n * @property {Date} end the ending date\n * @property {module:domain~Aggregation} timeUnit the time unit used by the date range\n * @property {number} timeCount the number of time units in the date range\n * @property {module:domain~Aggregation} aggregate the aggregate to query with\n */\n\n/**\n * Get a query range appropriate for a given aggregate level.\n * \n * Returns an object with `start` and `end` Date properties, using the given `endDate`\n * parameter as the basis for calculating the start as an offset backwards in time\n * based on the given `aggregate` level.\n * \n * When `aggregateTimeCount` will be treated as a \"next higher\" aggregate level from\n * `aggregate`, like this:\n * \n *  * < `Hour`: `numHours`\n *  * `Hour` : `numDays`\n *  * `Day` : `numMonths`\n *  * `Month` : `numYears`\n * \n * For example, you might like to render a chart using `TenMinute` aggregate data for the \n * last 24 hours. You'd call this function like this:\n * \n * ```\n * const range = rollingQueryDateRange(Aggregates.TenMinute, 24);\n * \n * // or, passing a DateRangeConfiguration\n * const range = rollingQueryDateRange(Aggregates.TenMinute, {numHours:24});\n * ```\n * \n * @param {module:domain~Aggregation} aggregate the aggregate level to get a query range for\n * @param {number|module:util~DateRangeConfiguration} aggregateTimeCount the number of aggregate time units to use\n * @param {Date} [endDate] the ending date; if not provided the current date will be used\n * @returns {module:util~DateRange} the calculated date range\n * @alias module:util~rollingQueryDateRange\n */\nexport function rollingQueryDateRange(aggregate, aggregateTimeCount, endDate) {\n    endDate = endDate || new Date();\n\t\n\tfunction exclusiveEndDate(interval, date) {\n\t\tvar result = interval.ceil(date);\n\t\tif ( result.getTime() === date.getTime() ) {\n\t\t\t// already on exact aggregate, so round up to next\n\t\t\tresult = interval.offset(result, 1);\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tfunction timeCountValue(propName) {\n\t\tvar result;\n\t\tif ( isNaN(Number(aggregateTimeCount)) ) {\n\t\t\tif ( aggregateTimeCount[propName] !== undefined ) {\n\t\t\t\tresult = Number(aggregateTimeCount[propName]);\n\t\t\t} else {\n\t\t\t\tresult = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tresult = aggregateTimeCount;\n\t\t}\n\t\tif ( typeof result !== 'number' ) {\n\t\t\tresult = 1;\n\t\t}\n\t\treturn result;\n\t}\n\n    var end,\n        start,\n        timeUnit,\n        timeCount;\n\n\tif ( aggregate.compareTo(Aggregations.Hour) < 0 ) {\n\t\ttimeCount = timeCountValue('numHours');\n\t\ttimeUnit = Aggregations.Hour;\n\t\tend = exclusiveEndDate(utcMinute, endDate);\n\t\tlet precision = Math.min(30, aggregate.level / 60);\n\t\tend.setUTCMinutes((end.getUTCMinutes() + precision - (end.getUTCMinutes() % precision)), 0, 0);\n\t\tstart = utcHour.offset(end, -timeCount);\n\t} else if ( Aggregations.Month.equals(aggregate) ) {\n\t\ttimeCount = timeCountValue('numYears');\n\t\ttimeUnit = Aggregations.Year;\n\t\tend = exclusiveEndDate(utcMonth, endDate);\n\t\tstart = utcYear.offset(utcMonth.floor(endDate), -timeCount);\n\t} else if ( Aggregations.Day.equals(aggregate) ) {\n\t\ttimeCount = timeCountValue('numMonths');\n\t\ttimeUnit = Aggregations.Month;\n\t\tend = exclusiveEndDate(utcDay, endDate);\n\t\tstart = utcMonth.offset(utcDay.floor(endDate), -timeCount);\n\t} else {\n\t\t// assume Hour\n\t\ttimeCount = timeCountValue('numDays');\n\t\ttimeUnit = Aggregations.Day;\n\t\tend = exclusiveEndDate(utcHour, endDate);\n\t\tstart = utcDay.offset(utcHour.floor(end), -timeCount);\n\t}\n\treturn {\n\t\tstart : start, \n\t\tend : end, \n\t\ttimeUnit : timeUnit, \n        timeCount : timeCount,\n        aggregate : aggregate\n\t};\n}\n\n/**\n * Get a date associated with a \"datum\" style object.\n * \n * This function will return a `Date` instance found via a property on `d` according to these rules:\n * \n *  1. `date` - assumed to be a `Date` object already and returned directly\n *  2. `localDate` - a string in `yyyy-MM-dd` form, optionally with a string\n *     `localTime` property for an associated time in `HH:mm` form, treated as UTC\n *  3. `created` - a string in `yyyy-MM-dd HH:mm:ss.SSS'Z'` or `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'` form\n * \n * These properties are commonly returned in results from the SolarNetwork API, and thus\n * this method is a handy way to get the dates for those objects.\n * \n * **Note** that the `localDate` and `localTime` values are parsed as UTC. When formatted the\n * date for display they should be formatted in UTC as well to preserve the expected value.\n * \n * @param {Object} d the datum object to extract a date from\n * @returns {Date} the extracted date, or `null` if no date could be extracted\n * @alias module:util~datumDate\n */\nexport function datumDate(d) {\n\tif ( !d ) {\n        return null;\n    }\n    if ( d.date ) {\n        return d.date;\n    } else if ( d.localDate ) {\n        return dateTimeParse(d.localDate +(d.localTime ? ' ' +d.localTime : ' 00:00'));\n    } else if ( d.created ) {\n        return timestampParse(d.created) || dateTimeUrlParse(d.created);\n    }\n}\n\nexport default Object.freeze({\n    datumDate : datumDate,\n    rollingQueryDateRange : rollingQueryDateRange,\n});\n\n","import { ascending, max, sum } from 'd3-array';\nimport { nest } from 'd3-collection';\n\nimport { datumDate } from '../util/date'\n\n/**\n * A callback function that operates on a nested data layer datum object.\n * \n * @callback module:data~NestedDataOperatorFunction\n * @param {object} datum the datum object being operated on\n * @param {string} key the layer key the datum object is a member of\n * @param {object} [prevDatum] the previous datum object in the layer, if available\n * @returns {void}\n */\n\n/**\n * Normalize the data arrays resulting from a `d3.nest` operation so that all group \n * value arrays have the same number of elements, based on a Date property named \n * `date`.\n * \n * The data values are assumed to be sorted by `date` already, and are modified in-place.\n * This makes the data suitable to passing to `d3.stack`, which expects all stack data\n * arrays to have the same number of values, for the same keys. When querying for data\n * in SolarNetwork there might be gaps in the results, so this function can be used to\n * \"fill in\" those gaps with \"dummy\" values so that there are no more gaps.\n * \n * Filled-in data objects are automatically populated with an appropriate `date` property\n * and a `sourceId` property taken from the `key` of the layer the gap if found in. You\n * can pass a `fillTemplate` object with static properties to also include on all filled-in\n * data objects. You can also pass a `fillFn` function to populate the filled-in objects\n * with dynamic data. \n *\n * For example, given:\n * \n * ```\n * const layerData = [\n *   { key : 'A', values : [{date : new Date('2011-12-02 12:00')}, {date : new Date('2011-12-02 12:10')}] },\n *   { key : 'B', values : [{date : new Date('2011-12-02 12:00')}] }\n * ];\n * \n * normalizeNestedStackDataByDate(layerData);\n * ```\n * \n * The `layerData` would be modified in-place and look like this (notice the filled in second data value in the **B** group):\n * \n * ```\n * [\n *   { key : 'A', values : [{date : new Date('2011-12-02 12:00')}, {date : new Date('2011-12-02 12:10')}] },\n *   { key : 'B', values : [{date : new Date('2011-12-02 12:00')}, {date : new Date('2011-12-02 12:10'), sourceId : 'B'}] }\n * ]\n * ```\n * \n * @param {object[]} layerData - An array of objects with `key` and `values` properties, as returned from `d3.nest().entries()`\n * @param {string} layerData.key - The layer's key value.\n * @param {object[]} layerData.values - The layer's value array.\n * @param {object} [fillTemplate] - An object to use as a template for any filled-in data objects.\n *                                  The `date` property will be populated automatically, and a `sourceId`\n *                                  property will be populated by the layer's `key`.\n * @param {module:data~NestedDataOperatorFunction} [fillFn] - An optional function to populate filled-in data objects with.\n *                                                            This function is invoked **after** populating any `fillTemplate` values.\n * @returns {void}\n * @alias module:data~normalizeNestedStackDataByDate\n */\nexport function normalizeNestedStackDataByDate(layerData, fillTemplate, fillFn) {\n\tvar i = 0,\n\t\tj,\n\t\tk,\n\t\tjMax = layerData.length - 1,\n\t\tdummy,\n\t\tprop,\n\t\tcopyIndex;\n\t// fill in \"holes\" for each stack, if more than one stack. we assume data already sorted by date\n\tif ( jMax > 0 ) {\n\t\twhile ( i < max(layerData.map(function(e) { return e.values.length; })) ) {\n\t\t\tdummy = undefined;\n\t\t\tfor ( j = 0; j <= jMax; j++ ) {\n\t\t\t\tif ( layerData[j].values.length <= i ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( j < jMax ) {\n\t\t\t\t\tk = j + 1;\n\t\t\t\t} else {\n\t\t\t\t\tk = 0;\n\t\t\t\t}\n\t\t\t\tif ( layerData[k].values.length <= i || layerData[j].values[i].date.getTime() < layerData[k].values[i].date.getTime() ) {\n\t\t\t\t\tdummy = {date : layerData[j].values[i].date, sourceId : layerData[k].key};\n\t\t\t\t\tif ( fillTemplate ) {\n\t\t\t\t\t\tfor ( prop in fillTemplate ) {\n\t\t\t\t\t\t\tif ( fillTemplate.hasOwnProperty(prop) ) {\n\t\t\t\t\t\t\t\tdummy[prop] = fillTemplate[prop];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( fillFn ) {\n\t\t\t\t\t\tcopyIndex = (layerData[k].values.length > i ? i : i > 0 ? i - 1 : null);\n\t\t\t\t\t\tfillFn(dummy, layerData[k].key, (copyIndex !== null ? layerData[k].values[copyIndex] : undefined));\n\t\t\t\t\t}\n\t\t\t\t\tlayerData[k].values.splice(i, 0, dummy);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( dummy === undefined ) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Combine the layers resulting from a `d3.nest` operation into a single, aggregated\n * layer.\n * \n * This can be used to combine all sources of a single data type, for example\n * to show all \"power\" sources as a single layer of chart data. The resulting object\n * has the same structure as the input `layerData` parameter, with just a\n * single layer of data.\n * \n * For example:\n * \n * ```\n * const layerData = [\n *   { key : 'A', values : [{watts : 123, foo : 1}, {watts : 234, foo : 2}] },\n *   { key : 'B', values : [{watts : 345, foo : 3}, {watts : 456, foo : 4}] }\n * ];\n * \n * const result = aggregateNestedDataLayers(layerData, \n *     'A and B', ['foo'], ['watts'], {'combined' : true});\n * ```\n * \n * Then `result` would look like this:\n * \n * ```\n * [\n *   { key : 'A and B', values : [{watts : 468, foo : 1, combined : true}, \n *                                {watts : 690, foo : 2, combined : true}] }\n * ]\n * ```\n * \n * @param {object[]} layerData - An array of objects with `key` and `values` properties, as returned from `d3.nest().entries()`\n * @param {string} layerData.key - The layer's key value.\n * @param {object[]} layerData.values - The layer's value array.\n * @param {string} resultKey - The `key` property to assign to the returned layer.\n * @param {string[]} copyProperties - An array of string property names to copy as-is from the **first** layer's data values.\n * @param {string[]} sumProperties - An array of string property names to add together from **all** layer data.\n * @param {object} staticProperties - Static properties to copy as-is to **all** output data values.\n * @return {object[]} An array of objects with `key` and `value` properties, the same structure as the provided `layerData` argument\n * @alias module:data~aggregateNestedDataLayers\n */\nexport function aggregateNestedDataLayers(layerData, resultKey, copyProperties, sumProperties, staticProperties) {\n\t// combine all layers into a single source\n\tvar layerCount = layerData.length,\n\t\tdataLength,\n\t\ti,\n\t\tj,\n\t\tk,\n\t\tcopyPropLength = (copyProperties ? copyProperties.length : 0),\n\t\tsumPropLength = (sumProperties ? sumProperties.length : 0),\n\t\td,\n\t\tval,\n\t\tclone,\n\t\tarray;\n\n\tdataLength = layerData[0].values.length;\n\tif ( dataLength > 0 ) {\n\t\tarray = [];\n\t\tfor ( i = 0; i < dataLength; i += 1 ) {\n\t\t\td = layerData[0].values[i];\n\t\t\tclone = {};\n\t\t\tif ( staticProperties !== undefined ) {\n\t\t\t\tfor ( val in staticProperties ) {\n\t\t\t\t\tif ( staticProperties.hasOwnProperty(val) ) {\n\t\t\t\t\t\tclone[val] = staticProperties[val];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor ( k = 0; k < copyPropLength; k += 1 ) {\n\t\t\t\tclone[copyProperties[k]] = d[copyProperties[k]];\n\t\t\t}\n\t\t\tfor ( k = 0; k < sumPropLength; k += 1 ) {\n\t\t\t\tclone[sumProperties[k]] = 0;\n\t\t\t}\n\t\t\tfor ( j = 0; j < layerCount; j += 1 ) {\n\t\t\t\tfor ( k = 0; k < sumPropLength; k += 1 ) {\n\t\t\t\t\tval = layerData[j].values[i][sumProperties[k]];\n\t\t\t\t\tif ( val !== undefined ) {\n\t\t\t\t\t\tclone[sumProperties[k]] += val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarray.push(clone);\n\t\t}\n\t\tlayerData = [{ key : resultKey, values : array }];\n\t}\n\n\treturn layerData;\n}\n\n/**\n * Transform raw SolarNetwork timeseries data by combining datum from multiple sources into a single\n * data per time key.\n * \n * This method produces a single array of objects with metric properties derived by grouping \n * that property within a single time slot across one or more source IDs. Conceptually this is\n * similar to {@link module:data~aggregateNestedDataLayers} except groups of source IDs can be\n * produced in the final result.\n * \n * The data will be passed through {@link module:data~normalizeNestedStackDataByDate} so that every\n * result object will contain every configured output group, but missing data will result in a\n * `null` value.\n * \n * Here's an example where two sources `A` and `B` are combined into a single group `Generation`\n * and a third source `C` is passed through as another group `Consumption`:\n * \n * ```\n * const queryData = [\n *     {localDate: '2018-05-05', localTime: '11:00', sourceId: 'A', watts : 123}, \n *     {localDate: '2018-05-05', localTime: '11:00', sourceId: 'B', watts : 234},\n *     {localDate: '2018-05-05', localTime: '11:00', sourceId: 'C', watts : 345},\n *     {localDate: '2018-05-05', localTime: '12:00', sourceId: 'A', watts : 456}, \n *     {localDate: '2018-05-05', localTime: '12:00', sourceId: 'B', watts : 567},\n *     {localDate: '2018-05-05', localTime: '12:00', sourceId: 'C', watts : 678},\n * ];\n * const sourceMap = new Map([\n *     ['A', 'Generation'],\n *     ['B', 'Generation'],\n *     ['C', 'Consumption'],\n * ]);\n * \n * const result = groupedBySourceMetricDataArray(queryData, 'watts', sourceMap);\n * ```\n * \n * Then `result` would look like this:\n * \n * ```\n * [\n *     {date : new Date('2018-05-05T11:00Z'), Generation : 357, Consumption: 345},\n *     {date : new Date('2018-05-05T12:00Z'), Generation : 1023, Consumption: 678}\n * ]\n * ```\n * \n * @param {object[]} data the raw data returned from SolarNetwork\n * @param {string} metricName the datum property name to extract\n * @param {Map} [sourceIdMap] an optional mapping of input source IDs to output source IDs; this can be used\n *                            to control the grouping of data, by mapping multiple input source IDs to the same\n *                            output source ID\n * @param {function} [aggFn] an optional aggregate function to apply to the metric values;\n *                           defaults to `d3.sum`; **note** that the function will be passed an array of input\n *                           data objects, not metric values\n * @returns {object[]} array of datum objects, each with a date and one metric value per source ID\n */\nexport function groupedBySourceMetricDataArray(data, metricName, sourceIdMap, aggFn) {\n\tconst metricExtractorFn = function metricExtractor(d) {\n\t\treturn d[metricName];\n\t};\n\tconst rollupFn = (typeof aggFn === 'function' ? aggFn : sum);\n\tconst layerData = nest()\n\t\t// group first by source\n\t\t.key((d) => {\n\t\t\treturn sourceIdMap && sourceIdMap.has(d.sourceId)\n\t\t\t\t? sourceIdMap.get(d.sourceId)\n\t\t\t\t: d.sourceId;\n\t\t})\n\t\t.sortKeys(ascending)\n\t\t// group second by date\n\t\t.key((d) => {\n\t\t\treturn d.localDate + ' ' +d.localTime;\n\t\t})\n\t\t// sum desired property in date group\n\t\t.rollup((values) => {\n\t\t\tconst r = {\n\t\t\t\tdate: datumDate(values[0])\n\t\t\t};\n\t\t\tlet metricKey = values[0].sourceId;\n\t\t\tif ( sourceIdMap && sourceIdMap.has(metricKey) ) {\n\t\t\t\tmetricKey = sourceIdMap.get(metricKey);\n\t\t\t}\n\t\t\tr[metricKey] = rollupFn(values, metricExtractorFn);\n\t\t\treturn r;\n\t\t})\n\t\t// un-nest to single group by source\n\t\t.entries(data).map(function(layer) {\n\t\t\treturn {\n\t\t\t\tkey: layer.key, \n\t\t\t\tvalues: layer.values.map(function(d) {\n\t\t\t\t\treturn d.value;\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t\n\t// ensure all layers have the same time keys\n\tnormalizeNestedStackDataByDate(layerData, null, (d, key) => {\n\t\t// make sure filled-in data has the metric property defined\n\t\td[key] = null;\n\t});\n\n\t// reduce to single array with multiple metric properties\n\treturn layerData.reduce(function(combined, layer) {\n\t\tif ( !combined ) {\n\t\t\treturn layer.values;\n\t\t}\n\t\tcombined.forEach(function(d, i) {\n\t\t\tconst v = layer.values[i][layer.key];\n\t\t\td[layer.key] = v;\n\t\t});\n\t\treturn combined;\n\t}, null);\n}\n\nexport default Object.freeze({\n\taggregateNestedDataLayers : aggregateNestedDataLayers,\n\tgroupedBySourceMetricDataArray : groupedBySourceMetricDataArray,\n    normalizeNestedStackDataByDate : normalizeNestedStackDataByDate,\n});\n","import { Aggregation } from './aggregation';\nimport Location from './location';\nimport PropMap from '../util/propMap';\n\nimport { dateTimeUrlFormat } from '../format/date'\n\nconst AggregationKey = 'aggregation';\nconst DataPathKey = 'dataPath';\nconst EndDateKey = 'endDate';\nconst LocationIdsKey = 'locationIds';\nconst LocationKey = 'location';\nconst MetadataFilterKey = 'metadataFilter';\nconst MostRecentKey = 'mostRecent';\nconst NodeIdsKey = 'nodeIds';\nconst QueryKey = 'query';\nconst SourceIdsKey = 'sourceIds';\nconst StartDateKey =  'startDate';\nconst TagsKey = 'tags';\nconst UserIdsKey = 'userIds';\nconst WithoutTotalResultsCountKey = 'withoutTotalResultsCount';\n\n/**\n * A filter criteria object for datum.\n * \n * <p>This filter is used to query both node datum and location datum. Not all properties are\n * applicable to both types. Be sure to consult the SolarNet API documentation on the \n * supported properties for each type.</p>\n * \n * @extends module:util~PropMap\n * @alias module:domain~DatumFilter\n */\nclass DatumFilter extends PropMap {\n\n    /**\n     * Constructor.\n     * @param {object} [props] initial property values \n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A node ID.\n     * \n     * This manages the first available node ID from the `nodeIds` property.\n     * \n     * @type {number}\n     */\n    get nodeId() {\n        const nodeIds = this.nodeIds;\n        return (Array.isArray(nodeIds) && nodeIds.length > 0 ? nodeIds[0] : null);\n    }\n\n    set nodeId(nodeId) {\n        if ( nodeId ) {\n            this.nodeIds = [nodeId];\n        } else {\n            this.nodeIds = null;\n        }\n    }\n\n    /**\n     * An array of node IDs.\n     * @type {number[]}\n     */\n    get nodeIds() {\n        return this.prop(NodeIdsKey);\n    }\n\n    set nodeIds(nodeIds) {\n        this.prop(NodeIdsKey, Array.isArray(nodeIds) ? nodeIds : null);\n    }\n\n    /**\n     * A location ID.\n     * \n     * This manages the first available location ID from the `locationIds` property.\n     * \n     * @type {number}\n     */\n    get locationId() {\n        const locationIds = this.locationIds;\n        return (Array.isArray(locationIds) && locationIds.length > 0 ? locationIds[0] : null);\n    }\n\n    set locationId(locationId) {\n        if ( locationId ) {\n            this.locationIds = [locationId];\n        } else {\n            this.locationIds = null;\n        }\n    }\n\n    /**\n     * An array of location IDs.\n     * @type {number[]}\n     */\n    get locationIds() {\n        return this.prop(LocationIdsKey);\n    }\n\n    set locationIds(locationIds) {\n        this.prop(LocationIdsKey, Array.isArray(locationIds) ? locationIds : null);\n    }\n\n    /**\n     * A source ID.\n     * \n     * This manages the first available source ID from the `sourceIds` property.\n     * \n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        if ( sourceId ) {\n            this.sourceIds = [sourceId];\n        } else {\n            this.sourceIds = null;\n        }\n    }\n\n    /**\n     * An array of source IDs.\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.prop(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.prop(SourceIdsKey, Array.isArray(sourceIds) ? sourceIds : null);\n    }\n\n    /**\n     * A user ID.\n     * \n     * This manages the first available location ID from the `userIds` property.\n     * \n     * @type {number}\n     */\n    get userId() {\n        const userIds = this.userIds;\n        return (Array.isArray(userIds) && userIds.length > 0 ? userIds[0] : null);\n    }\n\n    set userId(userId) {\n        if ( userId ) {\n            this.userIds = [userId];\n        } else {\n            this.userIds = null;\n        }\n    }\n\n    /**\n     * An array of user IDs.\n     * @type {number[]}\n     */\n    get userIds() {\n        return this.prop(UserIdsKey);\n    }\n\n    set userIds(userIds) {\n        this.prop(UserIdsKey, Array.isArray(userIds) ? userIds : null);\n    }\n\n    /**\n     * The \"most recent\" flag.\n     * @type {boolean}\n     */\n    get mostRecent() {\n        return !!this.prop(MostRecentKey);\n    }\n\n    set mostRecent(value) {\n        this.prop(MostRecentKey, !!value);\n    }\n\n    /**\n     * A minimumin date.\n     * @type {Date}\n     */\n    get startDate() {\n        return this.prop(StartDateKey);\n    }\n\n    set startDate(date) {\n        this.prop(StartDateKey, date);\n    }\n\n    /**\n     * A maximum date.\n     * @type {Date}\n     */\n    get endDate() {\n        return this.prop(EndDateKey);\n    }\n\n    set endDate(date) {\n        this.prop(EndDateKey, date);\n    }\n\n    /**\n     * A data path, in dot-delimited notation like `i.watts`.\n     * @type {string}\n     */\n    get dataPath() {\n        return this.prop(DataPathKey);\n    }\n\n    set dataPath(path) {\n        this.prop(DataPathKey, path);\n    }\n\n    /**\n     * An aggregation.\n     * \n     * Including this in a filter will cause SolarNet to return aggregated results, rather\n     * than raw results.\n     * \n     * @type {module:domain~Aggregation}\n     */\n    get aggregation() {\n        return this.prop(AggregationKey);\n    }\n\n    set aggregation(agg) {\n        this.prop(AggregationKey, agg instanceof Aggregation ? agg : null);\n    }\n\n    /**\n     * An array of tags.\n     * @type {string[]}\n     */\n    get tags() {\n        return this.prop(TagsKey);\n    }\n\n    set tags(val) {\n        this.prop(TagsKey, Array.isArray(val) ? val : null);\n    }\n\n    /**\n     * A location, used as an example-based search criteria.\n     * @type {module:domain~Location}\n     */\n    get location() {\n        return this.prop(LocationKey);\n    }\n\n    set location(val) {\n        this.prop(LocationKey, val instanceof Location ? val : null);\n    }\n\n    /**\n     * A general full-text style query string.\n     * @type {string}\n     */\n    get query() {\n        return this.prop(QueryKey);\n    }\n\n    set query(val) {\n        this.prop(QueryKey, val);\n    }\n\n    /**\n     * A metadata filter (LDAP style search criteria).\n     * @type {string}\n     */\n    get metadataFilter() {\n        return this.prop(MetadataFilterKey);\n    }\n\n    set metadataFilter(val) {\n        this.prop(MetadataFilterKey, val);\n    }\n\n    /**\n     * Get the _without total results_ flag.\n     * @type {boolean}\n     */\n    get withoutTotalResultsCount() {\n        return this.prop(WithoutTotalResultsCountKey);\n    }\n\n    set withoutTotalResultsCount(val) {\n        this.prop(WithoutTotalResultsCountKey, !!val);\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * @override\n     * @inheritdoc\n     */\n    toUriEncoding(propertyName, callbackFn) {\n        return super.toUriEncoding(propertyName, callbackFn || datumFilterUriEncodingPropertyMapper);\n    }\n\n}\n\n/**\n * Map DatumFilter properties for URI encoding.\n * \n * @param {string} key the property key\n * @param {*} value the property value\n * @returns {*} 2-element array for mapped key+value, `null` to skip, or `key` to keep as-is\n * @private\n */\nfunction datumFilterUriEncodingPropertyMapper(key, value) {\n    if ( key === NodeIdsKey || key === LocationIdsKey || key === SourceIdsKey || key === UserIdsKey ) {\n        // check for singleton array value, and re-map to singular property by chopping of \"s\"\n        if  ( Array.isArray(value) && value.length === 1 ) {\n            return [key.substring(0, key.length - 1), value[0]];\n        }\n    } else if ( key === StartDateKey || key === EndDateKey ) {\n        return [key, dateTimeUrlFormat(value)];\n    } else if ( key === MostRecentKey && !value ) {\n        return null;\n    }\n    return key;\n}\n\nexport default DatumFilter;\n","/**\n * General metadata with a basic structure.\n * \n * This metadata can be associated with a variety of objects within SolarNetwork, such\n * as users, nodes, and datum.\n * \n * @alias module:domain~GeneralMetadata\n */\nclass GeneralMetadata {\n\n    /**\n     * Constructor.\n     * \n     * @param {Map<string, *>} [info] the general metadata map\n     * @param {Map<string, Map<string, *>>} [propertyInfo] the property metadata map\n     * @param {Set<string>} [tags] the tags\n     */\n    constructor(info, propertyInfo, tags) {\n        this.info = info || null;\n        this.propertyInfo = propertyInfo || null;\n        this.tags = (tags instanceof Set ? tags : Array.isArray(tags) ? new Set(tags) : null);\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        const info = this.info;\n        if ( info ) {\n            result['m'] = stringMapToObject(info);\n        }\n        const propertyInfo = this.propertyInfo;\n        if ( propertyInfo ) {\n            result['pm'] = stringMapToObject(propertyInfo);\n        }\n        const tags = this.tags;\n        if ( tags ) {\n            result['t'] = Array.from(tags);\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~GeneralMetadata} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~GeneralMetadata#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @returns {module:domain~GeneralMetadata} the metadata instance \n     */\n    static fromJsonEncoding(json) {\n        let m, pm, t;\n        if ( json ) {\n            const obj = JSON.parse(json);\n            m = (obj['m'] ? objectToStringMap(obj['m']) : null);\n            pm = (obj['pm'] ? objectToStringMap(obj['pm']) : null);\n            t = (Array.isArray(obj['t']) ? new Set(obj['t']) : null);\n        }\n        return new GeneralMetadata(m, pm, t);\n    }\n}\n\n/**\n * Convert a `Map` into a simple object.\n * \n * The keys are assumed to be strings. Values that are themselves `Map` instances\n * will be converted to simple objects as well.\n * \n * @param {Map<string, *>} strMap a Map with string keys; nested Map objects are also handled\n * @returns {object} a simple object\n * @see {@link objectToStringMap} for the reverse conversion\n * @alias module:domain~stringMapToObject\n */\nfunction stringMapToObject(strMap) {\n    const obj = Object.create(null);\n    if ( strMap ) {\n        for (const [k,v] of strMap) {\n            obj[k] = (v instanceof Map ? stringMapToObject(v) : v);\n        }\n    }\n    return obj;\n}\n\n/**\n * Convert a simple object into a `Map` instance.\n * \n * Property values that are themselves objects will be converted into `Map`\n * instances as well.\n * \n * @param {object} obj a simple object\n * @returns {Map<string, *>} a Map with string keys; nested Map objects are also handled\n * @see {@link module:domain~stringMapToObject} for the reverse conversion\n * @alias module:domain~objectToStringMap\n */\nfunction objectToStringMap(obj) {\n    const strMap = new Map();\n    if ( obj ) {\n        for (const k of Object.keys(obj)) {\n            const v = obj[k];\n            strMap.set(k, (typeof v === 'object' ? objectToStringMap(v) : v));\n        }\n    }\n    return strMap;\n}\n\nexport default GeneralMetadata;\nexport { stringMapToObject, objectToStringMap };\n","import { Aggregation } from './aggregation';\nimport { LocationPrecision } from './locationPrecision';\n\n/**\n * Get a Set from a Set or array or object, returning `null` if the set would be empty.\n * \n * @param {Object[]|Set<*>} obj the array, Set, or singleton object to get as a Set\n * @returns {Set<*>} the Set, or `null`\n * @private\n */\nfunction setOrNull(obj) {\n\tlet result = null;\n\tif ( obj instanceof Set ) {\n\t\tresult = (obj.size > 0 ? obj : null);\n\t} else if ( Array.isArray(obj) ) {\n\t\tresult = (obj.length > 0 ? new Set(obj) : null);\n\t} else if ( obj ) {\n\t\tresult = new Set([obj]);\n\t}\n\treturn result;\n}\n\n/**\n * Merge two sets.\n * \n * @param {Object[]|Set<*>} [set1] the first set \n * @param {Object[]|Set<*>} [set2] the second set \n * @returns {Set<*>} the merged Set, or `null` if neither arguments are sets or \n *                   neither argument have any values\n * @private\n */\nfunction mergedSets(set1, set2) {\n\tlet s1 = setOrNull(set1);\n\tlet s2 = setOrNull(set2);\n\tif ( s1 === null && s2 === null ) {\n\t\treturn null;\n\t} else if ( s2 === null ) {\n\t\treturn s1;\n\t} else if ( s1 === null ) {\n\t\treturn s2;\n\t} else {\n\t\tfor ( let v of s2.values() ) {\n\t\t\ts1.add(v);\n\t\t}\n\t\treturn s1;\n\t}\n}\n\n\n/**\n * An immutable set of security restrictions that can be attached to other objects, like auth tokens.\n * \n * Use the {@link module:domain~SecurityPolicyBuilder} to create instances of this class with a fluent API.\n * @alias module:domain~SecurityPolicy\n */\nclass SecurityPolicy {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {number[]|Set<number>} [nodeIds] the node IDs to restrict to, or `null` for no restriction\n\t * @param {string[]|Set<string>} [sourceIds] the source ID to restrict to, or `null` for no restriction\n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} [aggregations] the aggregation names to restrict to, or `null` for no restriction\n\t * @param {module:domain~Aggregation} [minAggregation] if specified, a minimum aggregation level that is allowed\n\t * @param {Set<module:domain~LocationPrecision>} [locationPrecisions] the location precision names to restrict to, or `null` for no restriction\n\t * @param {module:domain~LocationPrecision} [minLocationPrecision] if specified, a minimum location precision that is allowed\n\t * @param {Set<string>} [nodeMetadataPaths] the `SolarNodeMetadata` paths to restrict to, or `null` for no restriction\n\t * @param {Set<string>} [userMetadataPaths] the `UserNodeMetadata` paths to restrict to, or `null` for no restriction\n\t */\n    constructor(nodeIds, sourceIds, aggregations, minAggregation, locationPrecisions,\n\t\t\tminLocationPrecision, nodeMetadataPaths, userMetadataPaths) {\n\t\tthis._nodeIds = setOrNull(nodeIds);\n\t\tthis._sourceIds = setOrNull(sourceIds);\n\t\tthis._aggregations = setOrNull(aggregations);\n\t\tthis._minAggregation = (minAggregation instanceof Aggregation ? minAggregation : null);\n\t\tthis._locationPrecisions = setOrNull(locationPrecisions);\n\t\tthis._minLocationPrecision = (minLocationPrecision instanceof LocationPrecision ? minLocationPrecision : null);\n\t\tthis._nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n        this._userMetadataPaths = setOrNull(userMetadataPaths);\n        if ( this.constructor === SecurityPolicy ) {\n            Object.freeze(this);\n        }\n\t}\n\n\t/**\n\t * Get the node IDs.\n\t * \n\t * @returns {Set<number>} the node IDs, or `null`\n\t */\n\tget nodeIds() {\n\t\treturn this._nodeIds;\n\t}\n\n\t/**\n\t * Get the source IDs.\n\t * \n\t * @returns {Set<string>} the source IDs, or `null`\n\t */\n\tget sourceIds() {\n\t\treturn this._sourceIds;\n\t}\n\n\t/**\n\t * Get the aggregations.\n\t * \n\t * @returns {Set<module:domain~Aggregation>} the aggregations, or `null`\n\t */\n\tget aggregations() {\n\t\treturn this._aggregations;\n\t}\n\n\t/**\n\t * Get the location precisions.\n\t * \n\t * @returns {Set<module:domain~LocationPrecision>} the precisions, or `null`\n\t */\n\tget locationPrecisions() {\n\t\treturn this._locationPrecisions;\n\t}\n\n\t/**\n\t * Get the minimum aggregation.\n\t * \n\t * @returns {module:domain~Aggregation} the minimum aggregation, or `null`\n\t */\n\tget minAggregation() {\n\t\treturn this._minAggregation;\n\t}\n\n\t/**\n\t * Get the minimum location precision.\n\t * \n\t * @returns {module:domain~LocationPrecision} the minimum precision, or `null`\n\t */\n\tget minLocationPrecision() {\n\t\treturn this._minLocationPrecision;\n\t}\n\n\t/**\n\t * Get the node metadata paths.\n\t * \n\t * @returns {Set<string>} the node metadata paths, or `null`\n\t */\n\tget nodeMetadataPaths() {\n\t\treturn this._nodeMetadataPaths;\n\t}\n\n\t/**\n\t * Get the user metadata paths.\n\t * \n\t * @returns {Set<string>} the user metadata paths, or `null`\n\t */\n\tget userMetadataPaths() {\n\t\treturn this._userMetadataPaths;\n\t}\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n\t\tlet result = {};\n\t\tlet val = this.nodeIds;\n\t\tif ( val ) {\n\t\t\tresult.nodeIds = Array.from(val);\n\t\t}\n\t\t\n\t\tval = this.sourceIds;\n\t\tif ( val ) {\n\t\t\tresult.sourceIds = Array.from(val);\n\t\t}\n\n\t\tval = this.aggregations;\n\t\tif ( val ) {\n\t\t\tresult.aggregations = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.locationPrecisions;\n\t\tif ( val ) {\n\t\t\tresult.locationPrecisions = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.minAggregation;\n\t\tif ( val ) {\n\t\t\tif ( result.length > 0 ) {\n\t\t\t\tresult += '&';\n\t\t\t}\n\t\t\tresult.minAggregation = val.name;\n\t\t}\n\n\t\tval = this.minLocationPrecision;\n\t\tif ( val ) {\n\t\t\tresult.minLocationPrecision = val.name;\n\t\t}\n\n\t\tval = this.nodeMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.nodeMetadataPaths = Array.from(val);\n\t\t}\n\n\t\tval = this.userMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.userMetadataPaths = Array.from(val);\n\t\t}\n\n\t\treturn JSON.stringify(result);\n    }\n}\n\nconst MIN_AGGREGATION_CACHE = new Map(); // Map<string, Set<Aggregation>>\nconst MIN_LOCATION_PRECISION_CACHE = new Map(); // Map<string, Set<LocationPrecision>>\n\n/**\n * A mutable builder object for {@link module:domain~SecurityPolicy} instances.\n * @alias module:domain~SecurityPolicyBuilder\n */\nclass SecurityPolicyBuilder {\n\n\t/**\n\t * Apply all properties from another SecurityPolicy.\n\t * \n\t * @param {module:domain~SecurityPolicy} policy the SecurityPolicy to apply\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.withAggregations(policy.aggregations)\n\t\t\t\t.withMinAggregation(policy.minAggregation)\n\t\t\t\t.withLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t.withMinLocationPrecision(policy.minLocationPrecision)\n\t\t\t\t.withNodeIds(policy.nodeIds)\n\t\t\t\t.withSourceIds(policy.sourceIds)\n\t\t\t\t.withNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t.withUserMetadataPaths(policy.userMetadataPaths);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Merge all properties from another SecurityPolicy.\n\t * \n\t * @param {module:domain~SecurityPolicy} policy the SecurityPolicy to merge\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.addAggregations(policy.aggregations)\n\t\t\t\t\t.addLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t\t.addNodeIds(policy.nodeIds)\n\t\t\t\t\t.addSourceIds(policy.sourceIds)\n\t\t\t\t\t.addNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t\t.addUserMetadataPaths(policy.userMetadataPaths);\n\t\t\tif ( policy.minAggregation ) {\n\t\t\t\tthis.withMinAggregation(policy.minAggregation);\n\t\t\t}\n\t\t\tif ( policy.minLocationPrecision ) {\n\t\t\t\tthis.withMinLocationPrecision(policy.minLocationPrecision);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithNodeIds(nodeIds) {\n\t\tthis.nodeIds = setOrNull(nodeIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddNodeIds(nodeIds) {\n\t\treturn this.withNodeIds(mergedSets(this.nodeIds, nodeIds));\n\t}\n\n\t/**\n\t * Set the node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithNodeMetadataPaths(nodeMetadataPaths) {\n\t\tthis.nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddNodeMetadataPaths(nodeMetadataPaths) {\n\t\treturn this.withNodeMetadataPaths(mergedSets(this.nodeMetadataPaths, nodeMetadataPaths));\n\t}\n\n\t/**\n\t * Set the user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithUserMetadataPaths(userMetadataPaths) {\n\t\tthis.userMetadataPaths = setOrNull(userMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddUserMetadataPaths(userMetadataPaths) {\n\t\treturn this.withUserMetadataPaths(mergedSets(this.userMetadataPaths, userMetadataPaths));\n\t}\n\n\t/**\n\t * Set the source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithSourceIds(sourceIds) {\n\t\tthis.sourceIds = setOrNull(sourceIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddSourceIds(sourceIds) {\n\t\treturn this.withSourceIds(mergedSets(this.sourceIds, sourceIds));\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} aggregations the aggregations to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithAggregations(aggregations) {\n\t\tthis.aggregations = setOrNull(aggregations);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} aggregations the aggregations to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddAggregations(aggregations) {\n\t\treturn this.withAggregations(mergedSets(this.aggregations, aggregations));\n\t}\n\n\t/**\n\t * Set the location precisions.\n\t * \n\t * @param {module:domain~LocationPrecision[]|Set<module:domain~LocationPrecision>} locationPrecisions the precisions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithLocationPrecisions(locationPrecisions) {\n\t\tthis.locationPrecisions = setOrNull(locationPrecisions);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add location precisions.\n\t * \n\t * @param {module:domain~LocationPrecision[]|Set<module:domain~LocationPrecision>} locationPrecisions the precisions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddLocationPrecisions(locationPrecisions) {\n\t\treturn this.withLocationPrecisions(mergedSets(this.locationPrecisions, locationPrecisions));\n\t}\n\n\t/**\n\t * Set a minimum aggregation level.\n\t * \n\t * @param {module:domain~Aggregation} minAggregation the minimum aggregation level to set\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithMinAggregation(minAggregation) {\n\t\tthis.minAggregation = minAggregation;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of aggregation levels based on the configured `minAggregation`\n\t * and `aggregations` values.\n\t * \n\t * @returns {Set<module:domain~Aggregation>} the aggregation set\n\t * @private\n\t */\n\tbuildAggregations() {\n\t\tconst minAggregation = this.minAggregation;\n\t\tconst aggregations = this.aggregations;\n\t\tif ( !minAggregation && aggregations && aggregations.size > 0 ) {\n\t\t\treturn aggregations;\n\t\t} else if ( !minAggregation ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn Aggregation.minimumEnumSet(minAggregation, MIN_AGGREGATION_CACHE);\n\t}\n\n\t/**\n\t * Treat the configured `locationPrecisions` set as a single\n\t * minimum value or a list of exact values.\n\t * \n\t * By default if `locationPrecisions` is configured with a single\n\t * value it will be treated as a <em>minimum</em> value, and any\n\t * {@link module:domain~LocationPrecision} with a {@link module:domain~LocationPrecision#precision} equal \n\t * to or higher than that value's level will be included in the generated\n\t * {@link module:domain~SecurityPolicy#locationPrecisions} set. Set this to\n\t * `null` to disable that behavior and treat\n\t * `locationPrecisions` as the exact values to include in the\n\t * generated {@link module:domain~SecurityPolicy#locationPrecisions} set.\n\t * \n\t * @param {module:domain~LocationPrecision|null} minLocationPrecision\n\t *        `null` to treat configured location precision values\n\t *        as-is, or else the minimum threshold\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithMinLocationPrecision(minLocationPrecision) {\n\t\tthis.minLocationPrecision = minLocationPrecision;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of location precision levels based on the configured `minLocationPrecision`\n\t * and `locationPrecisions` values.\n\t * \n\t * @returns {Set<module:domain~LocationPrecision>} the precision set\n\t * @private\n\t */\n\tbuildLocationPrecisions() {\n\t\tconst minLocationPrecision = this.minLocationPrecision;\n\t\tconst locationPrecisions = this.locationPrecisions;\n\t\tif ( !minLocationPrecision && locationPrecisions && locationPrecisions.size > 0 ) {\n\t\t\treturn locationPrecisions;\n\t\t} else if ( !minLocationPrecision ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn LocationPrecision.minimumEnumSet(minLocationPrecision, MIN_LOCATION_PRECISION_CACHE);\n\t}\n\n\t/**\n\t * Create a new {@link SecurityPolicy} out of the properties configured on this builder.\n\t * \n\t * @returns {module:domain~SecurityPolicy} the new policy instance\n\t */\n\tbuild() {\n\t\treturn new SecurityPolicy(this.nodeIds, this.sourceIds, \n\t\t\t\tthis.buildAggregations(), this.minAggregation,\n\t\t\t\tthis.buildLocationPrecisions(), this.minLocationPrecision,\n\t\t\t\tthis.nodeMetadataPaths, this.userMetadataPaths);\n\t}\n}\n\nexport default SecurityPolicy;\nexport { SecurityPolicyBuilder };","/**\n * A case-insensitive string key multi-value map object.\n * @alias module:util~MultiMap\n */\nclass MultiMap {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {*} [values] an object who's enumerable properties will be added to this map\n\t */\n\tconstructor(values) {\n\t\tthis.mappings = {}; // map of lower-case header names to {name:X, val:[]} values\n\t\tthis.mappingNames = []; // to keep insertion order\n\t\tif ( values ) {\n\t\t\tthis.putAll(values);\n\t\t}\n\t}\n\n\t/**\n\t * Add a value.\n\t * \n\t * This method will append values to existing keys.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to add\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tadd(key, value) {\n\t\treturn addValue(this, key, value);\n\t}\n\n\t/**\n\t * Set a value.\n\t * \n\t * This method will replace any existing values with just <code>value</code>.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to set\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tput(key, value) {\n\t\treturn addValue(this, key, value, true);\n\t}\n\n\t/**\n\t * Set multiple values.\n\t * \n\t * This method will replace any existing values with those provided on <code>values</code>.\n\t * \n\t * @param {*} values an object who's enumerable properties will be added to this map\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tputAll(values) {\n\t\tfor ( let key in values ) {\n\t\t\tif ( values.hasOwnProperty(key) ) {\n                addValue(this, key, values[key], true);\n            }\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the values associated with a key.\n\t * \n\t * @param {string} key the key of the values to get\n\t * @returns {object[]} the array of values associated with the key, or <code>undefined</code> if not available\n\t */\n\tvalue(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst mapping = this.mappings[keyLc];\n\t\treturn (mapping ? mapping.val : undefined);\n\t}\n\n\t/**\n\t * Get the first avaialble value assocaited with a key.\n\t * \n\t * @param {string} key the key of the value to get\n\t * @returns {*} the first available value associated with the key, or <code>undefined</code> if not available\n\t */\n\tfirstValue(key) {\n\t\tconst values = this.value(key);\n\t\treturn (values && values.length > 0 ? values[0] : undefined);\n\t}\n\n\t/**\n\t * Remove all properties from this map.\n\t * \n\t * @returns {module:util~MutliMap} this object\n\t */\n\tclear() {\n\t\tthis.mappingNames.length = 0;\n\t\tthis.mappings = {};\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all values associated with a key.\n\t * \n\t * @param {string} key the key of the values to remove\n\t * @returns {object[]} the removed values, or <code>undefined</code> if no values were present for the given key\n\t */\n\tremove(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst index = this.mappingNames.indexOf(keyLc);\n\t\tconst result = this.mappings[keyLc];\n\t\tif ( result ) {\n\t\t\tdelete this.mappings[keyLc];\n\t\t\tthis.mappingNames.splice(index, 1);\n\t\t}\n\t\treturn (result ? result.val : undefined);\n\t}\n\n\t/**\n\t * Get the number of entries in this map.\n\t * \n\t * @returns {number} the number of entries in the map\n\t */\n\tsize() {\n\t\treturn this.mappingNames.length;\n\t}\n\n\t/**\n\t * Test if the map is empty.\n\t * \n\t * @returns {boolean} <code>true</code> if there are no entries in this map\n\t */\n\tisEmpty() {\n\t\treturn this.size() < 1;\n\t}\n\n\t/**\n\t * Test if there are any values associated with a key.\n\t * \n\t * @param {string} key the key to test\n\t * @returns {boolean} <code>true</code> if there is at least one value associated with the key\n\t */\n\tcontainsKey(key) {\n\t\treturn (this.value(key) !== undefined);\n\t}\n\n\t/**\n\t * Get an array of all keys in this map.\n\t * \n\t * @returns {string[]} array of keys in this map, or an empty array if the map is empty\n\t */\n\tkeySet() {\n\t\tconst result = [];\n\t\tconst len = this.size();\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tresult.push(this.mappings[this.mappingNames[i]].key);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * Add/replace values on a map.\n * \n * @param {module:util~MutliMap} map the map to mutate \n * @param {string} key the key to change \n * @param {*} value the value to add\n * @param {boolean} replace if <code>true</code> then replace all existing values;\n *                          if <code>false</code> append to any existing values\n * @returns {module:util~MutliMap} the passed in <code>map</code>\n * @private\n */\nfunction addValue(map, key, value, replace) {\n\tconst keyLc = key.toLowerCase();\n\tlet mapping = map.mappings[keyLc];\n\tif ( !mapping ) {\n\t\tmapping = {key:key, val:[]};\n\t\tmap.mappings[keyLc] = mapping;\n\t\tmap.mappingNames.push(keyLc);\n\t}\n\tif ( replace ) {\n\t\tmapping.val.length = 0;\n\t}\n\tif ( Array.isArray(value) ) {\n\t\tconst len = value.length;\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tmapping.val.push(value[i]);\n\t\t}\n\t} else {\n\t\tmapping.val.push(value);\n\t}\n\treturn map;\n}\n\nexport default MultiMap;\n","function createGetter(me, prop) {\n\treturn function() { return me.map[prop]; };\n}\n\nfunction createSetter(me, prop) {\n\treturn function(value) { me.map[prop] = value; };\n}\n\nfunction createProperty(me, prop) {\n\tObject.defineProperty(me, prop, {\n\t\tenumerable : true,\n\t\tconfigurable : true,\n\t\tget : createGetter(me, prop),\n\t\tset : createSetter(me, prop)\n\t});\n}\n\n/**\n * A configuration utility object.\n *\n * Properties can be get/set by using the {@link module:util~Configuration#value} function.\n * @alias module:util~Configuration\n */\nclass Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * For any properties passed on `initialMap`, {@link module:util~Configuration#value} will\n\t * be called so those properties are defined on this instance.\n\t *\n\t * @param {object} initialMap the optional initial properties to store\n\t */\n\tconstructor(initialMap) {\n\t\tthis.map = {};\n\t\tif ( initialMap !== undefined ) {\n\t\t\tthis.values(initialMap);\n\t\t}\n\t}\n\n\t/**\n\t * Test if a key is truthy.\n\t *\n\t * @param {string} key the key to test\n\t * @returns {boolean} `true` if the key is enabled\n\t */\n\tenabled(key) {\n\t\tif ( key === undefined ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !!this.map[key];\n\t}\n\n\t/**\n\t * Set or toggle the enabled status of a given key.\n\t *\n\t * <p>If the `enabled` parameter is not passed, then the enabled\n\t * status will be toggled to its opposite value.</p>\n\t *\n\t * @param {string} key they key to set\n\t * @param {boolean} enabled the optional enabled value to set\n\t * @returns {module:util~Configuration} this object to allow method chaining\n\t */\n\ttoggle(key, enabled) {\n\t\tvar val = enabled;\n\t\tif ( key === undefined ) {\n\t\t\treturn this;\n\t\t}\n\t\tif ( val === undefined ) {\n\t\t\t// in 1-argument mode, toggle current value\n\t\t\tval = (this.map[key] === undefined);\n\t\t}\n\t\treturn this.value(key, (val === true ? true : null));\n\t}\n\n\t/**\n\t * Get or set a configuration value.\n\t *\n\t * @param {string} key The key to get or set the value for\n\t * @param {object} [newValue] If defined, the new value to set for the given `key`.\n\t *                            If `null` then the value will be removed.\n\t * @returns {object} If called as a getter, the associated value for the given `key`,\n\t *                   otherwise this object.\n\t */\n\tvalue(key, newValue) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn this.map[key];\n\t\t}\n\t\tif ( newValue === null ) {\n\t\t\tdelete this.map[key];\n\t\t\tif ( this.hasOwnProperty(key) ) {\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t} else {\n\t\t\tthis.map[key] = newValue;\n\t\t\tif ( !this.hasOwnProperty(key) ) {\n\t\t\t\tcreateProperty(this, key);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set multiple properties.\n\t * \n\t * @param {object} [newMap] a map of values to set\n\t * @returns {object} if called as a getter, all properties of this object copied into a simple object;\n\t *                   otherwise this object\n\t */\n\tvalues(newMap) {\n\t\tif ( newMap ) {\n\t\t\tfor ( let prop in newMap ) {\n\t\t\t\tif ( newMap.hasOwnProperty(prop) ) {\n\t\t\t\t\tthis.value(prop, newMap[prop]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn Object.assign({}, this.map);\n\t}\n\n}\n\nexport default Configuration;\n","import Configuration from '../util/configuration';\n\n/**\n * Normailze a protocol value.\n * \n * This method is used to normalize protocol values which might come from a `Location`\n * object and thus contain a trailing colon.\n * \n * @param {String} [val] the protocol value to normalize\n * @returns {String} the normalized protocol value\n * @alias module:net~normalizedProtocol\n */\nfunction normalizedProtocol(val) {\n\tif ( !val ) {\n\t\treturn 'https';\n\t}\n\treturn val.replace(/:$/, '');\n}\n\n/**\n * Normalize the environment configuration.\n * \n * Passing a browser `Location` object, like `window.location`, is supported. The\n * `protocol`, `hostname`, and `port` values will be used.\n * \n * @param {Object} [config] the initial configuration\n * @returns {Object} a new object with normalized configuration values\n * @alias module:net~normalizedConfig\n */\nfunction normalizedConfig(config) {\n\tvar result = Object.assign({\n\t\thost: 'data.solarnetwork.net'\n\t}, config);\n\tresult.protocol = normalizedProtocol(result.protocol || 'https');\n\tresult.port = (result.port || (result.protocol === 'https'  ? 443  : 80));\n\tresult.host = (result.port && result.hostname ? result.hostname : result.host);\n\treturn result;\n}\n\n/**\n * An environment configuration utility object.\n *\n * This extends {@link module:util~Configuration} to add support for standard properties\n * needed to access the SolarNetwork API, such as host and protocol values.\n *\n * @extends module:util~Configuration\n * @alias module:net~Environment\n */\nclass Environment extends Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * This will define the following default properties, if not supplied on the\n\t * `config` argument:\n\t *\n\t * <dl>\n\t * <dt>host</dt><dd>`data.solarnetwork.net`</dd>\n\t * <dt>protocol</dt><dd>`https`</dd>\n\t * <dt>port</dt><dd>`443`</dd>\n\t * </dl>\n\t * \n\t * These properties correspond to those on the `window.location` object when\n\t * running in a browser. Thus to construct an environment based on the location\n\t * of the current page you can create an instance like this:\n\t * \n\t * ```\n\t * const env = new Environment(window.location);\n\t * ```\n\t *\n\t * @param {Object} [config] an optional set of properties to start with\n\t */\n\tconstructor(config) {\n\t\tsuper(normalizedConfig(config));\n\t}\n\n    /**\n\t * Check if TLS is in use via the `https` protocol.\n\t *\n     * @returns {boolean} `true` if the `protocol` is set to `https`\n     */\n\tuseTls() {\n\t\treturn (this.value('protocol') === 'https');\n\t}\n\n}\n\nexport default Environment;\n","/**\n * Parse the query portion of a URL string, and return a parameter object for the\n * parsed key/value pairs.\n *\n * <p>Multiple parameters of the same name will be stored as an array on the returned object.</p>\n *\n * @param {string} search the query portion of the URL, which may optionally include\n *                        the leading `?` character\n * @return {object} the parsed query parameters, as a parameter object\n * @alias module:net~urlQueryParse\n */\nfunction urlQueryParse(search) {\n    var params = {};\n    var pairs;\n    var pair;\n    var i, len, k, v;\n    if ( search !== undefined && search.length > 0 ) {\n        // remove any leading ? character\n        if ( search.match(/^\\?/) ) {\n            search = search.substring(1);\n        }\n        pairs = search.split('&');\n        for ( i = 0, len = pairs.length; i < len; i++ ) {\n            pair = pairs[i].split('=', 2);\n            if ( pair.length === 2 ) {\n                k = decodeURIComponent(pair[0]);\n                v = decodeURIComponent(pair[1]);\n                if ( params[k] ) {\n                    if ( !Array.isArray(params[k]) ) {\n                        params[k] = [params[k]]; // turn into array;\n                    }\n                    params[k].push(v);\n                } else {\n                    params[k] = v;\n                }\n            }\n        }\n    }\n    return params;\n}\n\n/**\n * Encode the properties of an object as a URL query string.\n *\n * <p>If an object property has an array value, multiple URL parameters will be encoded for that property.</p>\n *\n * <p>The optional `encoderFn` argument is a function that accepts a string value\n * and should return a URI-safe string for that value.</p>\n *\n * @param {object} parameters an object to encode as URL parameters\n * @param {function} encoderFn an optional function to encode each URI component with;\n *                             if not provided the built-in `encodeURIComponent()` function\n *                             will be used\n * @return {string} the encoded query parameters\n * @alias module:net~urlQueryEncode\n */\nfunction urlQueryEncode(parameters, encoderFn) {\n    var result = '',\n        prop,\n        val,\n        i,\n        len;\n    const encoder = (encoderFn || encodeURIComponent);\n    function handleValue(k, v) {\n        if ( result.length ) {\n            result += '&';\n        }\n        result += encoder(k) + '=' + encoder(v);\n    }\n    if ( parameters ) {\n        for ( prop in parameters ) {\n            if ( parameters.hasOwnProperty(prop) ) {\n                val = parameters[prop];\n                if ( Array.isArray(val) ) {\n                    for ( i = 0, len = val.length; i < len; i++ ) {\n                        handleValue(prop, val[i]);\n                    }\n                } else {\n                    handleValue(prop, val);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport { urlQueryParse, urlQueryEncode };\n\nexport default {\n    urlQueryParse : urlQueryParse,\n    urlQueryEncode : urlQueryEncode,\n}\n","import Base64 from 'crypto-js/enc-base64';\nimport Hex from 'crypto-js/enc-hex';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport SHA256 from 'crypto-js/sha256';\nimport { parse as uriParse } from 'uri-js';\n\nimport { iso8601Date } from '../format/date';\nimport MultiMap from '../util/multiMap';\nimport Environment from './environment';\nimport { HttpMethod, default as HttpHeaders } from './httpHeaders';\nimport { urlQueryParse } from './urlQuery';\n\n/**\n * The number of milliseconds a signing key is valid for.\n * @type {number}\n * @private\n */\nconst SIGNING_KEY_VALIDITY = (7 * 24 * 60 * 60 * 1000);\n\n/**\n * A builder object for the SNWS2 HTTP authorization scheme.\n *\n * This builder can be used to calculate a one-off header value, for example:\n *\n * ```\n * let authHeader = new AuthorizationV2Builder(\"my-token\")\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n * \n * Or the builder can be re-used for a given token:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n *\n * Additionally, a signing key can be generated and re-used for up to 7 days:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\")\n *   .saveSigningKey(\"my-token-secret\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .buildWithSavedKey(); // note previously generated key used\n * ```\n * @alias module:net~AuthorizationV2Builder\n */\nclass AuthorizationV2Builder {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} token the auth token to use\n     * @param {module:net~Environment} [environment] the environment to use; if not provided a default environment will be created \n     */\n    constructor(token, environment) {\n\n        /**\n         * The SolarNet auth token value.\n         * @member {string}\n         */\n        this.tokenId = token;\n\n        /**\n         * The SolarNet environment.\n         * @member {module:net~Environment}\n         */\n        this.environment = (environment || new Environment());\n\n        /**\n         * Force a port number to be added to host values, even if port would be implied.\n         * \n         * This can be useful when working with a server behind a proxy, where the \n         * proxy is configured to always forward the port even if the port is implied\n         * (i.e. HTTPS is used on the standard port 443).\n         * \n         * @member {boolean}\n         */\n        this.forceHostPort = false;\n\n        this.reset();\n    }\n\n    /**\n     * Reset to defalut property values.\n     *\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    reset() {\n        this.contentDigest = null;\n        this.httpHeaders = new HttpHeaders();\n        this.parameters = new MultiMap();\n        this.signedHeaderNames = [];\n        var host = this.environment.host;\n        if ( this.environment.protocol === 'https' || this.environment.port != 80 ) {\n            host += ':' +this.environment.port;\n        }\n        return this.method(HttpMethod.GET).host(host).path('/').date(new Date());\n    }\n\n    /**\n     * Compute and cache the signing key.\n     *\n     * Signing keys are derived from the token secret and valid for 7 days, so\n     * this method can be used to compute a signing key so that {@link module:net~AuthorizationV2Builder#build}\n     * can be called later. The signing date will be set to whatever date is\n     * currently configured via {@link module:net~AuthorizationV2Builder#date}, which defaults to the\n     * current time for newly created builder instances.\n     *\n     * @param {string} tokenSecret the secret to sign the digest with\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    saveSigningKey(tokenSecret) {\n        this.signingKey = this.computeSigningKey(tokenSecret);\n        this.signingKeyExpiration = new Date(this.requestDate.getTime() + SIGNING_KEY_VALIDITY)\n    }\n\n    /**\n     * Test if a signing key is present and not expired.\n     * @readonly\n     * @type {boolean}\n     */\n    get signingKeyValid() {\n        return (this.signingKey && this.signingKeyExpiration instanceof Date\n            && Date.now() < this.signingKeyExpiration.getTime() ? true : false);\n    }\n\n    /**\n     * Set the HTTP method (verb) to use.\n     *\n     * @param {string} val the method to use; see the {@link HttpMethod} enum for possible values\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    method(val) {\n        this.httpMethod = val;\n        return this;\n    }\n\n    /**\n     * Set the HTTP host.\n     *\n     * This is a shortcut for calling `HttpHeaders#put(HttpHeaders.HOST, val)`.\n     *\n     * @param {string} val the HTTP host value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    host(val) {\n        if ( this.forceHostPort && val.indexOf(':') < 0 && this.environment.port != 80 ) {\n            val += ':' +this.environment.port;\n        }\n        this.httpHeaders.put(HttpHeaders.HOST, val);\n        return this;\n    }\n\n    /**\n     * Set the HTTP request path to use.\n     *\n     * @param {string} val the request path to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    path(val) {\n        this.requestPath = val;\n        return this;\n    }\n\n    /**\n     * Set the host, path, and query parameters via a URL string.\n     *\n     * @param {string} url the URL value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    url(url) {\n        const uri = uriParse(url);\n        let host = uri.host;\n        if ( uri.port && (((uri.scheme === 'https' || uri.scheme === 'wss') && uri.port !== 443) \n                || ((uri.scheme === 'http' || uri.scheme === 'ws') && uri.port !== 80)) ) {\n            host += ':' + uri.port;\n        }\n        if ( uri.query ) {\n            this.queryParams(urlQueryParse(uri.query));\n        }\n        return this.host(host).path(uri.path);\n    }\n\n    /**\n     * Set the HTTP content type.\n     *\n     * This is a shortcut for calling {@link HttpHeaders#put} with the key {@link HttpHeaders#CONTENT_TYPE}.\n     *\n     * @param {string} val the HTTP content type value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    contentType(val) {\n        this.httpHeaders.put(HttpHeaders.CONTENT_TYPE, val);\n        return this;\n    }\n\n    /**\n     * Set the authorization request date.\n     *\n     * @param {Date} val the date to use; typically the current time, e.g. `new Date()`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    date(val) {\n        this.requestDate = (val ? val : new Date());\n        return this;\n    }\n\n    /**\n     * The authorization request date as a HTTP header string value.\n     *\n     * @readonly\n     * @type {string}\n     */\n    get requestDateHeaderValue() {\n        return this.requestDate.toUTCString();\n    }\n\n    /**\n     * Control using the `X-SN-Date` HTTP header versus the `Date` header.\n     *\n     * <p>Set to `true` to use the `X-SN-Date` header, `false` to use \n     * the `Date` header. This will return `true` if `X-SN-Date` has been\n     * added to the `signedHeaderNames` property or has been added to the `httpHeaders`\n     * property.</p>\n     *\n     * @type {boolean}\n     */\n    get useSnDate() {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        return existingIndex >= 0 || this.httpHeaders.containsKey(HttpHeaders.X_SN_DATE);\n    }\n\n    set useSnDate(enabled) {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        if ( enabled && existingIndex < 0 ) {\n            signedHeaders = (signedHeaders\n                ? signedHeaders.concat(HttpHeaders.X_SN_DATE)\n                : [HttpHeaders.X_SN_DATE]);\n            this.signedHeaderNames = signedHeaders;\n        } else if ( !enabled && existingIndex >= 0 ) {\n            signedHeaders.splice(existingIndex, 1);\n            this.signedHeaderNames = signedHeaders;\n        }\n\n        // also clear from httpHeaders\n        this.httpHeaders.remove(HttpHeaders.X_SN_DATE);\n    }\n\n    /**\n     * Set the `useSnDate` property.\n     *\n     * @param {boolean} enabled `true` to use the `X-SN-Date` header, `false` to use `Date`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    snDate(enabled) {\n        this.useSnDate = enabled;\n        return this;\n    }\n\n    /**\n     * Set a HTTP header value.\n     *\n     * This is a shortcut for calling `HttpHeaders#put(headerName, val)`.\n     *\n     * @param {string} headerName the header name to set\n     * @param {string} headerValue the header value to set\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    header(headerName, headerValue) {\n        this.httpHeaders.put(headerName, headerValue);\n        return this;\n    }\n\n    /**\n     * Set the HTTP headers to use with the request.\n     *\n     * The headers object must include all headers necessary by the\n     * authentication scheme, and any additional headers also configured via\n     * {@link module:net~AuthorizationV2Builder#signedHttpHeaders}.\n     *\n     * @param {HttpHeaders} headers the HTTP headers to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    headers(headers) {\n        this.httpHeaders = headers;\n        return this;\n    }\n\n    /**\n     * Set the HTTP `GET` query parameters, or `POST` form-encoded\n     * parameters.\n     *\n     * @param {MultiMap|Object} params the parameters to use, as either a {@link MultiMap} or simple `Object`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    queryParams(params) {\n        if ( params instanceof MultiMap ) {\n            this.parameters = params;\n        } else {\n            this.parameters.putAll(params);\n        }\n        return this;\n    }\n\n    /**\n     * Set additional HTTP header names to sign with the authentication.\n     *\n     * @param {sring[]} signedHeaderNames additional HTTP header names to include in the signature\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    signedHttpHeaders(signedHeaderNames) {\n        this.signedHeaderNames = signedHeaderNames;\n        return this;\n    }\n\n    /**\n     * Set the HTTP request body content SHA-256 digest value.\n     *\n     * @param {string|module:crypto-js/enc-hex~WordArray} digest the digest value to use; if a string it is assumed to be Hex encoded\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    contentSHA256(digest) {\n        var contentDigest;\n        if ( typeof digest === 'string' ) {\n            contentDigest = Hex.parse(digest);\n        } else {\n            contentDigest = digest;\n        }\n        this.contentDigest = contentDigest;\n        return this;\n    }\n\n    /**\n     * Compute the SHA-256 digest of the request body content and configure the result on this builder.\n     * \n     * This method will compute the digest and then save the result via the {@link module:net~AuthorizationV2Builder#contentSHA256}\n     * method. In addition, it will set the `Digest` HTTP header value via {@link module:net~AuthorizationV2Builder#header}. \n     * This means you <i>must</i> also pass the `Digest` HTTP header with the request. After calling this\n     * method, you can retrieve the `Digest` HTTP header value via the `httpHeaders`property.\n     * \n     * @param {string} content the request body content to compute a SHA-256 digest value from\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    computeContentDigest(content) {\n        var digest = SHA256(content);\n        this.contentSHA256(digest);\n        this.header('Digest', 'sha-256=' +Base64.stringify(digest));\n        return this;\n    }\n\n    /**\n     * Compute the canonical query parameters.\n     * \n     * @returns {string} the canonical query parameters string value\n     */\n    canonicalQueryParameters() {\n        const keys = this.parameters.keySet();\n        if ( keys.length < 1 ) {\n            return '';\n        }\n        keys.sort();\n        const len = keys.length;\n        var first = true,\n            result = '';\n        for ( let i = 0; i < len; i += 1 ) {\n            let key = keys[i];\n            let vals = this.parameters.value(key);\n            const valsLen = vals.length;\n            for ( let j = 0; j < valsLen; j += 1 ) {\n                if ( first ) {\n                    first = false;\n                } else {\n                    result += '&';\n                }\n                result += _encodeURIComponent(key) + '=' + _encodeURIComponent(vals[j]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical HTTP headers string value.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical headers string value\n     */\n    canonicalHeaders(sortedLowercaseHeaderNames) {\n        var result = '',\n            headerName,\n            headerValue;\n        const len = sortedLowercaseHeaderNames.length;\n        for ( let i = 0; i < len; i += 1 ) {\n            headerName = sortedLowercaseHeaderNames[i];\n            if ( \"date\" === headerName ||  \"x-sn-date\" === headerName ) {\n                headerValue = this.requestDate.toUTCString();\n            } else {\n                headerValue = this.httpHeaders.firstValue(headerName);\n            }\n            result += headerName +':' + (headerValue ? headerValue.trim() : '') + '\\n';\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical signed header names value from an array of HTTP header names.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical signed header names string value\n     * @private\n     */\n    canonicalSignedHeaderNames(sortedLowercaseHeaderNames) {\n        return sortedLowercaseHeaderNames.join(';');\n    }\n\n    /**\n     * Get the canonical request content SHA256 digest, hex encoded.\n     * \n     * @returns {string} the hex-encoded SHA256 digest of the request content\n     */\n    canonicalContentSHA256() {\n        return (this.contentDigest\n            ? Hex.stringify(this.contentDigest)\n            : AuthorizationV2Builder.EMPTY_STRING_SHA256_HEX);\n    }\n\n    /**\n     * Compute the canonical HTTP header names to include in the signature.\n     * \n     * @returns {string[]} the sorted, lower-cased HTTP header names to include\n     */\n    canonicalHeaderNames() {\n        const httpHeaders = this.httpHeaders;\n        const signedHeaderNames = this.signedHeaderNames;\n\n        // use a MultiMap to take advantage of case-insensitive keys\n        const map = new MultiMap();\n\n        map.put(HttpHeaders.HOST, true);\n        if ( this.useSnDate ) {\n            map.put(HttpHeaders.X_SN_DATE, true);\n        } else {\n            map.put(HttpHeaders.DATE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_MD5) ) {\n            map.put(HttpHeaders.CONTENT_MD5, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_TYPE) ) {\n            map.put(HttpHeaders.CONTENT_TYPE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.DIGEST) ) {\n            map.put(HttpHeaders.DIGEST, true);\n        }\n        if ( signedHeaderNames && signedHeaderNames.length > 0 ) {\n            signedHeaderNames.forEach(e => map.put(e, true));\n        }\n        return lowercaseSortedArray(map.keySet());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request.\n     * \n     * @returns {string} the canonical request data\n     */\n    buildCanonicalRequestData() {\n        return this.computeCanonicalRequestData(this.canonicalHeaderNames());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request,\n     * using a specific set of HTTP header names to sign.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to sign with the request\n     * @returns {string} the canonical request data\n     * @private\n     */\n    computeCanonicalRequestData(sortedLowercaseHeaderNames) {\n        // 1: HTTP verb\n        var result = this.httpMethod +'\\n';\n\n        // 2: Canonical URI\n        result += this.requestPath + '\\n';\n\n        // 3: Canonical query string\n        result += this.canonicalQueryParameters() + '\\n';\n\n        // 4: Canonical headers\n        result += this.canonicalHeaders(sortedLowercaseHeaderNames); // already includes newline\n\n        // 5: Signed header names\n        result += this.canonicalSignedHeaderNames(sortedLowercaseHeaderNames) + '\\n';\n\n        // 6: Content SHA256, hex encoded\n        result += this.canonicalContentSHA256();\n\n        return result;\n    }\n\n    /**\n     * Compute the signing key, from a secret key.\n     * \n     * @param {string} secretKey the secret key string \n     * @returns {CryptoJS#Hash} the computed key\n     * @private\n     */\n    computeSigningKey(secretKey) {\n        const datestring = iso8601Date(this.requestDate);\n        const key = HmacSHA256('snws2_request', HmacSHA256(datestring, 'SNWS2' + secretKey));\n        return key;\n    }\n\n    /**\n     * Compute the data to be signed by the signing key.\n     * \n     * @param {string} canonicalRequestData the request data, returned from {@link module:net~AuthorizationV2Builder#buildCanonicalRequestData}\n     * @returns {string} the data to sign\n     * @private\n     */\n    computeSignatureData(canonicalRequestData) {\n        /*- signature data is like:\n\n            SNWS2-HMAC-SHA256\\n\n            20170301T120000Z\\n\n            Hex(SHA256(canonicalRequestData))\n        */\n        return \"SNWS2-HMAC-SHA256\\n\" + iso8601Date(this.requestDate, true) + \"\\n\"\n                + Hex.stringify(SHA256(canonicalRequestData));\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured properties\n     * on the builder, using the provided signing key.\n     * \n     * @param {CryptoJS#Hash} signingKey the key to sign the computed signature data with\n     * @returns {string} the SNWS2 HTTP Authorization header value\n     * @private\n     */\n    buildWithKey(signingKey) {\n        const sortedHeaderNames = this.canonicalHeaderNames();\n        const canonicalReq = this.computeCanonicalRequestData(sortedHeaderNames);\n        const signatureData = this.computeSignatureData(canonicalReq);\n        const signature = Hex.stringify(HmacSHA256(signatureData, signingKey));\n        let result = 'SNWS2 Credential=' + this.tokenId\n            + ',SignedHeaders=' + sortedHeaderNames.join(';')\n            + ',Signature=' +signature;\n        return result;\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured\n     * properties on the builder, computing a new signing key based on the\n     * configured {@link module:net~AuthorizationV2Builder#date}.\n     *\n     * @param {string} tokenSecret the secret to sign the authorization with\n     * @return {string} the SNWS2 HTTP Authorization header value\n     */\n    build(tokenSecret) {\n        const signingKey = this.computeSigningKey(tokenSecret);\n        return this.buildWithKey(signingKey);\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured\n     * properties on the builder, using a signing key configured from a previous\n     * call to {@link module:net~AuthorizationV2Builder#saveSigningKey}.\n     *\n     * @return {string} the SNWS2 HTTP Authorization header value.\n     */\n    buildWithSavedKey() {\n        return this.buildWithKey(this.signingKey);\n    }\n\n}\n\n/**\n * @function stringMatchFn\n * @param {string} e the element to test\n * @returns {boolean} `true` if the element matches\n * @private\n */\n\n\n/**\n * Create a case-insensitive string matching function.\n * \n * @param {string} value the string to perform the case-insensitive comparison against\n * @returns {stringMatchFn} a matching function that performs a case-insensitive comparison\n * @private\n */\nfunction caseInsensitiveEqualsFn(value) {\n    const valueLc = value.toLowerCase();\n    return e => valueLc === e.toString().toLowerCase();\n}\n\n/**\n * Create a new array of lower-cased and sorted strings from another array.\n * \n * @param {string[]} items the items to lower-case and sort\n * @returns {string[]} a new array of the lower-cased and sorted items\n * @private\n */\nfunction lowercaseSortedArray(items) {\n    const sortedItems = [];\n    const len = items.length;\n    for ( let i = 0; i < len; i += 1 ) {\n        sortedItems.push(items[i].toLowerCase());\n    }\n    sortedItems.sort();\n    return sortedItems;\n}\n\nfunction _hexEscapeChar(c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n}\n\nfunction _encodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, _hexEscapeChar);\n}\n\nObject.defineProperties(AuthorizationV2Builder, {\n    /**\n     * The hex-encoded value for an empty SHA256 digest value.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    EMPTY_STRING_SHA256_HEX:    { value: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' },\n\n    /**\n     * The SolarNetwork V2 authorization scheme.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    SNWS2_AUTH_SCHEME:          { value: 'SNWS2' },\n});\n\nexport default AuthorizationV2Builder;\n","/* eslint no-console: 0 */\n\nlet logLevel = 2;\n\nfunction consoleLog(level, ...args) {\n    if ( level > logLevel ) {\n        return;\n    }\n    if ( !console ) {\n        return;\n    }\n\n    let logFn;\n    switch ( level ) {\n        case 1:\n            logFn = console.error;\n            break;\n        case 2:\n            logFn = console.warn;\n            break;\n        case 3:\n            logFn = console.info;\n            break;\n    }\n    if ( !logFn ) {\n        logFn = console.log;\n    }\n    if ( !logFn ) {\n        return; // no console available\n    }\n    logFn(...args); // TODO formatting like sn.format.fmt.apply(this, arguments)?\n}\n\nconst logLevels = Object.freeze({\n    DEBUG: 4,\n    INFO: 3,\n    WARN: 2,\n    ERROR: 1,\n    OFF: 0,\n});\n\n/**\n * An application logger.\n * \n * Logging levels range from 0-4 and is controlled at the application level.\n * Level `0` is off, `1` is error, `2` is warn, `3` is info,  and `4` is debug.\n * The default level starts as `2`.\n */\nclass Logger {\n\n    static debug(...args) {\n        consoleLog(4, ...args);\n    }\n\n    static info(...args) {\n        consoleLog(3, ...args);\n    }\n\n    static warn(...args) {\n        consoleLog(2, ...args);\n    }\n\n    static error(...args) {\n        consoleLog(1, ...args);\n    }\n\n}\n\nObject.defineProperties(Logger, {\n\t/**\n\t * The global logging level. Set to `0` to disable all logging.\n\t * \n\t * @memberof module:util~Logger\n\t * @type {number}\n\t */\n    level: { \n        get:function() { return logLevel; }, \n        set:function(v) { logLevel = typeof v === 'number' ? v : 0}\n    },\n});\n\nexport default Logger;\nexport { logLevels };\n","/**\n * Normalize a data array of time series data based on an aggregate time step.\n * \n * This method is useful for \"filling in\" gaps of data in situations where something expects\n * the data include placeholders for the gaps. Charting applications often expect this, for\n * example.\n * \n * Each element in the `data` array is expected to provide a `date` property that is a `Date`\n * object. When gaps are discovered in the array, \"filler\" objects will be inserted with\n * an approprate `date` value and all other properties copied from the previous element but\n * set to `null`.\n * \n * Here's an example where a new element is added to an array to fill in a missing time slot:\n * \n * ```\n * const queryData = [\n *     {date : new Date('2018-05-05T11:00Z'), Generation : 357, Consumption: 345},\n *     {date : new Date('2018-05-05T12:00Z'), Generation : 1023, Consumption: 678}\n * ]\n * \n * timeNormalizeDataArray(queryData, Aggregations.ThirtyMinute);\n * ```\n * \n * Then `queryData` would look like this:\n * \n * ```\n * [\n *     {date : new Date('2018-05-05T11:00Z'), Generation : 357, Consumption: 345},\n *     {date : new Date('2018-05-05T11:30Z'), Generation : null, Consumption: null},\n *     {date : new Date('2018-05-05T12:00Z'), Generation : 1023, Consumption: 678}\n * ]\n * ```\n * \n * @param {object[]} data the raw data returned from SolarNetwork; this array is modified in-place\n * @param {module:domain~Aggregation} aggregate the expected aggregate level of the data\n * @returns {void}\n */\nexport function timeNormalizeDataArray(data, aggregate) {\n    const aggMillseconds = aggregate.level * 1000;\n    if ( !Array.isArray(data) || data.length < 2 ) {\n        return data;\n    }\n    var i = 0;\n    while ( i < data.length - 1 ) {\n        const d = data[i];\n        const currTime = d.date.getTime();\n        const expectedNextTime = currTime + aggMillseconds;\n        let nextTime = data[i+1].date.getTime();\n        if ( nextTime > expectedNextTime ) {\n            let fill = [i + 1, 0];\n            for ( let fillTime = currTime + aggMillseconds; fillTime < nextTime; fillTime += aggMillseconds ) {\n                let f = Object.create(Object.getPrototypeOf(d), Object.getOwnPropertyDescriptors(d));\n                for ( let p in f ) {\n                    f[p] = null;\n                }\n                f.date = new Date(fillTime);\n                fill.push(f);\n            }\n            Array.prototype.splice.apply(data, fill);\n            i += fill.length;\n        }\n        i += 1;            \n    }\n}\n\nexport default Object.freeze({\n\ttimeNormalizeDataArray : timeNormalizeDataArray,\n});\n","/**\n * An enumerated object base class.\n * \n * This class is essentially abstract, and must be extended by another\n * class that overrides the {@link module:util~Enum.enumValues} method.\n * \n * @abstract\n * @alias module:util~Enum\n */\nclass Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        this._name = name;\n        if ( this.constructor === Enum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the enum name.\n     * \n     * @returns {string} the  name\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Test if a string is equal to this enum's name.\n     * \n     * As long as enum values are consistently obtained from the {@link module:util~Enum.enumValues}\n     * array then enum instances can be compared with `===`. If unsure, this method can be used\n     * to compare string values instead.\n     * \n     * If `value` is passed as an actual Enum instance, then if that enum is the same class\n     * as this enum it's `name` is compared to this instance's `name`.\n     * \n     * @param {string|Enum} value the value to test\n     * @returns {boolean} `true` if `value` is the same as this instance's `name` value \n     */\n    equals(value) {\n        if ( this.constructor === value.constructor ) {\n            return (value.name === this.name);\n        }\n        return (value === this.name);\n    }\n\n    /**\n     * Get all enum values.\n     * \n     * This method must be overridden by subclasses to return something meaningful.\n     * This implementation returns an empty array.\n     * \n     * @abstract\n     * @returns {module:util~Enum[]} get all enum values\n     */\n    static enumValues() {\n        return [];\n    }\n\n    /**\n     * This method takes an array of enums and turns them into a mapped object, using the enum\n     * `name` as object property names.\n     * \n     * @param {module:util~Enum[]} enums the enum list to turn into a value object\n     * @returns {object} an object with enum `name` properties with associated enum values \n     */\n    static enumsValue(enums) {\n        return Object.freeze(enums.reduce((obj, e) => {\n            obj[e.name] = e;\n            return obj;\n        }, {}));\n    }\n\n    /**\n     * Get an enum instance from its name.\n     * \n     * This method searches the {@link module:util~Enum#enumVvalues} array for a matching value.\n     * \n     * @param {string} name the enum name to get an instnace for\n     * @returns {module:util~Enum} the instance, or `undefined` if no instance exists for the given `name`\n     */\n    static valueOf(name) {\n        const enums = this.enumValues();\n        if ( !Array.isArray(enums) ) {\n            return undefined;\n        }\n        for ( let i = 0, len = enums.length; i < len; i += 1 ) {\n            if ( name === enums[i].name ) {\n                return enums[i];\n            }\n        }\n    }\n\n    static namesFor(set) {\n        const result = [];\n        if ( set ) {\n            for ( const e of set ) {\n                result.push(e.name);\n            }\n        }\n        return result;\n    }\n}\n\nexport default Enum;\n","import Enum from './enum';\n\n/**\n * An immutable enum-like object with an associated comparable value.\n *\n * This class is essentially abstract, and must be extended by another\n * class that overrides the inerited {@link module:util~Enum.enumValues} method.\n * \n * @abstract\n * @extends module:util~Enum\n * @alias module:util~ComparableEnum\n */\nclass ComparableEnum extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     * @param {number} value the comparable value\n     */\n    constructor(name, value) {\n        super(name);\n        this._value = value;\n        if ( this.constructor === ComparableEnum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the comparable value.\n     * \n     * @returns {number} the value\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * Compare two ComparableEnum objects based on their `value` values.\n     * \n     * @param {ComparableEnum} other the object to compare to\n     * @returns {number} `-1` if `this.value` is less than `other.value`, \n     *                   `1` if `this.value` is greater than `other.value`,\n     *                   `0` otherwise (when the values are equal) \n     */\n    compareTo(other) {\n        return this.value < other.value ? -1 : this.value > other.value ? 1 : 0;\n    }\n\n    /**\n     * Compute a complete set of enum values based on a minimum enum and/or set of enums.\n     * \n     * If `cache` is provided, then results computed via `minAggregation` \n     * will be cached there, and subsequent calls will returned the cached result when appropriate.\n     * \n     * @param {ComparableEnum} [minEnum] a minimum enum value\n     * @param {Map<string, Set<ComparableEnum>>} [cache] a cache of computed values\n     * @returns {Set<ComparableEnum>|null} the computed set, or `null` if no values match\n     */\n    static minimumEnumSet(minEnum, cache) {\n        if ( !minEnum ) {\n            return null;\n        }\n        let result = (cache ? cache.get(minEnum.name) : undefined);\n        if ( result ) {\n            return result;\n        }\n        result = new Set();\n        for ( const agg of minEnum.constructor.enumValues() ) {\n            if ( agg.compareTo(minEnum) > -1 ) {\n                result.add(agg);\n            }\n        }\n        if ( cache ) {\n            cache.set(minEnum.name, result);\n        }\n        return (result.size > 0 ? result : null);\n    }\n\n}\n\nexport default ComparableEnum;\n","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A named aggregation.\n * \n * @extends module:util~ComparableEnum\n * @alias module:domain~Aggregation\n */\nclass Aggregation extends ComparableEnum {\n\n\t/**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} level a relative aggregation level value \n     */\n    constructor(name, level) {\n\t\tsuper(name, level);\n\t\tif ( this.constructor === Aggregation ) {\n\t\t\tObject.freeze(this);\n\t\t}\n    }\n\n    /**\n     * Get the aggregate level value.\n\t * \n\t * This is an alias for {@link module:util~ComparableEnum#value}.\n     */\n    get level() {\n        return this.value;\n\t}\n\t\n\t/**\n\t * Get the {@link module:domain~Aggregations} values.\n\t * \n\t * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AggregationValues;\n\t}\n\n}\n\n\nconst AggregationValues = Object.freeze([\n\tnew Aggregation('Minute', 60),\n\tnew Aggregation('FiveMinute', 60 * 5),\n\tnew Aggregation('TenMinute', 60 * 10),\n\tnew Aggregation('FifteenMinute', 60 * 15),\n\tnew Aggregation('ThirtyMinute', 60 * 30),\n\tnew Aggregation('Hour', 3600),\n\tnew Aggregation('HourOfDay', 3600),\n\tnew Aggregation('SeasonalHourOfDay', 3600),\n\tnew Aggregation('Day', 86400),\n\tnew Aggregation('DayOfWeek', 86400),\n\tnew Aggregation('SeasonalDayOfWeek', 86400),\n\tnew Aggregation('Week', 604800),\n\tnew Aggregation('WeekOfYear', 604800),\n\tnew Aggregation('Month', 2419200),\n\tnew Aggregation('Year', 31536000),\n\tnew Aggregation('RunningTotal', Number.MAX_SAFE_INTEGER),\n]);\n\n/**\n * The enumeration of supported Aggregation values.\n * \n * @readonly\n * @enum {module:domain~Aggregation}\n * @property {module:domain~Aggregation} Minute minute\n * @property {module:domain~Aggregation} FiveMinute 5 minutes\n * @property {module:domain~Aggregation} TenMinute 10 minutes\n * @property {module:domain~Aggregation} FifeteenMinute 15 minutes\n * @property {module:domain~Aggregation} ThirtyMinute 30 minutes\n * @property {module:domain~Aggregation} Hour an hour\n * @property {module:domain~Aggregation} HourOfDay an hour of a day, e.g. 1-24\n * @property {module:domain~Aggregation} SeasonalHourOfDay an hour of a day, further grouped into 4 seasons\n * @property {module:domain~Aggregation} Day a day\n * @property {module:domain~Aggregation} DayOfWeek a day of the week, e.g. Monday - Sunday\n * @property {module:domain~Aggregation} SeasonalDayOfWeek a day of the week, further grouped into 4 seasons\n * @property {module:domain~Aggregation} Week a week\n * @property {module:domain~Aggregation} WeekOfYear the week within a year, e.g. 1 - 52\n * @property {module:domain~Aggregation} Month a month\n * @property {module:domain~Aggregation} Year a year\n * @property {module:domain~Aggregation} RunningTotal a complete running total over a time span\n * @alias module:domain~Aggregations\n */\nconst Aggregations = Aggregation.enumsValue(AggregationValues);\n\nexport default Aggregations;\nexport { Aggregation };","import Enum from '../util/enum';\n\n/**\n * An auth token status.\n * \n * @extends module:util~Enum\n * @alias module:domain~AuthTokenStatus\n */\nexport class AuthTokenStatus extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenStatus ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link module:domain~AuthTokenStatuses} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenStatusValues;\n\t}\n\n}\n\nconst AuthTokenStatusValues = Object.freeze([\n\tnew AuthTokenStatus('Active'),\n    new AuthTokenStatus('Disabled'),\n]);\n\n/**\n * The enumeration of supported AuthTokenStatus values.\n * \n * @readonly\n * @enum {module:domain~AuthTokenStatus}\n * @property {module:domain~AuthTokenStatus} Active the token is active and usable\n * @property {module:domain~AuthTokenStatus} Disabled the token is disabled and not usable\n * @alias module:domain~AuthTokenStatuses\n */\nconst AuthTokenStatuses = AuthTokenStatus.enumsValue(AuthTokenStatusValues);\n\nexport default AuthTokenStatuses;\n","import Enum from '../util/enum';\n\n/**\n * A named auth token type.\n * \n * @extends module:util~Enum\n * @alias module:domain~AuthTokenType\n */\nexport class AuthTokenType extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenType ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link AuthTokenTypes} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenTypeValues;\n\t}\n\n}\n\nconst AuthTokenTypeValues = Object.freeze([\n\tnew AuthTokenType('ReadNodeData'),\n    new AuthTokenType('User'),\n]);\n\n/**\n * The enumeration of supported AuthTokenType values.\n * \n * @readonly\n * @enum {module:domain~AuthTokenType}\n * @property {module:domain~AuthTokenType} ReadNodeData a read-only token for reading SolarNode data\n * @property {module:domain~AuthTokenType} User full access as the user that owns the token\n * @alias module:domain~AuthTokenTypes\n */\nconst AuthTokenTypes = AuthTokenType.enumsValue(AuthTokenTypeValues);\n\nexport default AuthTokenTypes;\n","/**\n * A pagination criteria object.\n * @alias module:domain~Pagination\n */\nclass Pagination {\n\n    /**\n     * Construct a pagination object.\n     * \n     * @param {number} max the maximum number of results to return \n     * @param {number} [offset] the 0-based starting offset \n     */\n    constructor(max, offset) {\n        this._max = (max > 0 ? +max : 0);\n        this._offset = (offset > 0 ? +offset : 0);\n    }\n\n    /**\n     * Get the maximum number of results to return.\n     * \n     * @returns {number} the maximum number of results\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     * Get the results starting offset.\n     * \n     * The first available result starts at offset <code>0</code>. Note this is \n     * a raw offset value, not a \"page\" offset.\n     * \n     * @returns {number} the starting result offset\n     */\n    get offset() {\n        return this._offset;\n    }\n\n    /**\n     * Copy constructor with a new <code>offset</code> value.\n     * \n     * @param {number} offset the new offset to use\n     * @return {Pagination} a new instance\n     */\n    withOffset(offset) {\n        return new Pagination(this.max, offset);\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * @return {string} the URI encoded string\n     */\n    toUriEncoding() {\n        let result = '';\n        if ( this.max > 0 ) {\n            result += 'max=' +this.max;\n        }\n        if ( this.offset > 0 ) {\n            if ( result.length > 0 ) {\n                result += '&';\n            }\n            result += 'offset=' +this.offset;\n        }\n        return result;\n    }\n}\n\nexport default Pagination;\n","/**\n * A description of a sort applied to a property of a collection.\n * @alias module:domain~SortDescriptor\n */\nclass SortDescriptor {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} key the property to sort on\n     * @param {boolean} [descending] `true` to sort in descending order, `false` for ascending\n     */\n    constructor(key, descending) {\n        this._key = key;\n        this._descending = !!descending;\n    }\n\n    /**\n     * Get the sort property name.\n     * \n     * @returns {string} the sort key\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * Get the sorting direction.\n     * \n     * @returns {boolean} `true` if descending order, `false` for ascending\n     */\n    get descending() {\n        return this._descending;\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * If `index` is provided and non-negative, then the query parameters will\n     * be encoded as an array property named `sorts`. Otherwise just\n     * bare `key` and `descending` properties will be used. The \n     * `descending` property is only added if it is `true`.\n     * \n     * @param {number} [index] an optional array property index\n     * @param {string} [propertyName=sorts] an optional array property name, only used if `index` is also provided\n     * @return {string} the URI encoded string\n     */\n    toUriEncoding(index, propertyName) {\n        let result,\n            propName = (propertyName || 'sorts');\n        if ( index !== undefined && index >= 0 ) {\n            result = encodeURIComponent(propName +'[' +index +'].key') + '=';\n        } else {\n            result = 'key=';\n        }\n        result += encodeURIComponent(this.key);\n        if ( this.descending ) {\n            if ( index !== undefined && index >= 0 ) {\n                result += '&' +encodeURIComponent(propName +'[' +index +'].descending') + '=true';\n            } else {\n                result += '&descending=true';\n            }\n        }\n        return result;\n    }\n\n}\n\nexport default SortDescriptor;\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport Enum from './enum';\n\n/**\n * A basic map-like object.\n * \n * <p>This object includes some utility functions that make it well suited to using\n * as an API query object. For example, the {@link module:util~PropMap#toUriEncoding}\n * method provides a way to serialize this object into URL query parameters.</p>\n * \n * @alias module:util~PropMap\n */\nclass PropMap {\n    /**\n     * Constructor.\n     * @param {PropMap|object} props the initial properties; if a `PropMap` instance is provided, the properties\n     *                               of that object will be copied into this one; otherwise the object will be\n     *                               used directly to hold property values\n     */\n    constructor(props) {\n        /**\n         * The object that all properties are stored on. \n         * @member {object} \n         */\n        this.props = (props instanceof PropMap ? props.properties() : \n            typeof props === 'object' ? props : {});\n    }\n\n    /**\n\t * Get, set, or remove a property value.\n\t *\n\t * @param {string} key the key to get or set the value for\n\t * @param {*} [newValue] if defined, the new value to set for the given `key`;\n\t *                       if `null` then the `key` property will be removed\n\t * @returns {*} if called as a getter, the associated value for the given `key`,\n\t *              otherwise this object\n\t */\n\tprop(key, newValue) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn this.props[key];\n\t\t}\n\t\tif ( newValue === null ) {\n\t\t\tdelete this.props[key];\n\t\t} else {\n\t\t\tthis.props[key] = newValue;\n\t\t}\n\t\treturn this;\n\t}\n\n    /**\n\t * Get, set, or remove multiple properties.\n\t * \n\t * @param {object} [newProps] the new values to set; if any value is `null` that property\n     *                            will be deleted\n\t * @returns {object} if called as a getter, all properties of this object copied into a \n     *                   simple object; otherwise this object\n\t */\n\tproperties(newProps) {\n\t\tif ( newProps ) {\n\t\t\tfor ( const k of Object.keys(newProps) ) {\n\t\t\t\tthis.prop(k, newProps[k]);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn Object.assign({}, this.props);\n\t}\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * All enumerable properties of the <code>props</code> property will be added to the\n     * result. If any property value is an array, the values of the array will be joined\n     * by a comma. Any {@link module:util~Enum} values will have their `name` property used.\n     * Any value that has a `toUriEncoding()` function property will have that function\n     * invoked, passing the associated property name as the first argument, and the returned\n     * value will be used.\n     * \n     * @param {string} [propertyName] an optional object property prefix to add to all properties\n     * @param {function} [callbackFn] An optional function that will be called for each property.\n     *                   The function will be passed property name and value arguments, and must\n     *                   return either `null` to skip the property, a 2-element array with the property\n     *                   name and value to use, or anything else to use the property as- is.\n     * @return {string} the URI encoded string\n     */\n    toUriEncoding(propertyName, callbackFn) {\n        let result = '';\n        for ( let k of Object.keys(this.props) ) {\n            if ( result.length > 0 ) {\n                result += '&';\n            }\n            let v = this.props[k];\n            if ( callbackFn ) {\n                const kv = callbackFn(k, v);\n                if ( kv === null ) {\n                    continue;\n                } else if ( Array.isArray(kv) && kv.length > 1 ) {\n                    k = kv[0];\n                    v = kv[1];\n                }\n            }\n            \n            if ( typeof v.toUriEncoding === 'function' ) {\n                result += v.toUriEncoding(propertyName ? encodeURIComponent(propertyName) + '.' + k : k);\n                continue;\n            }\n            \n            if ( propertyName ) {\n                result += encodeURIComponent(propertyName) + '.';\n            }\n            result += encodeURIComponent(k) + '=';\n            if ( Array.isArray(v) ) {\n                v.forEach((e, i) => {\n                    if ( i > 0 ) {\n                        result += ',';\n                    }\n                    if ( e instanceof Enum ) {\n                        e = e.name;\n                    }\n                    result += encodeURIComponent(e);\n                });\n            } else {\n                if ( v instanceof Enum ) {\n                    v = v.name;\n                }\n                result += encodeURIComponent(v);\n            }\n        }\n        return result;\n    }\n\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value with\n     * sorting and pagination parameters.\n     * \n     * <p>This calls {@link module:util~PropMap#toUriEncoding} first, then encodes \n     * the `sorts` and `pagination` parameters, if provided.\n     * \n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n     * @param {string} [propertyName] an optional object property prefix to add to all properties\n     * @param {function} [callbackFn] An optional function that will be called for each property.\n     *                   The function will be passed property name and value arguments, and must\n     *                   return either `null` to skip the property, a 2-element array with the property\n     *                   name and value to use, or anything else to use the property as- is.\n     * @return {string} the URI encoded string\n     */\n    toUriEncodingWithSorting(sorts, pagination, propertyName, callbackFn) {\n        let params = this.toUriEncoding(propertyName, callbackFn);\n        if ( Array.isArray(sorts) ) {\n            sorts.forEach((sort, i) => {\n                if ( sort instanceof SortDescriptor ) {\n                    if ( params.length > 0 ) {\n                        params += '&';\n                    }\n                    params += sort.toUriEncoding(i);\n                }\n            });\n        }\n        if ( pagination instanceof Pagination ) {\n            const paginationParams = pagination.toUriEncoding();\n            if ( paginationParams ) {\n                if ( params.length > 0 ) {\n                    params += '&';\n                }\n                params += paginationParams;\n            }\n        }\n        return params;\n    }\n\n}\n\nexport default PropMap;\n","import PropMap from '../util/propMap';\n\nconst CountryKey = 'country';\nconst ElevationKey = 'elevation';\nconst LatitudeKey = 'latitude';\nconst IdKey = 'id';\nconst LocalityKey = 'locality';\nconst LongitudeKey = 'longitude';\nconst NameKey = 'name';\nconst PostalCodeKey = 'postalCode';\nconst RegionKey = 'region';\nconst StateOrProvinceKey = 'stateOrProvince';\nconst StreetKey = 'street';\nconst TimeZoneIdKey = 'timeZoneId';\n\n/**\n * A geographic location.\n * \n * @extends module:util~PropMap\n * @alias module:domain~Location\n */\nclass Location extends PropMap {\n\n    /**\n\t * Constructor.\n\t * \n\t * @param {module:domain~Location|object} loc the location to copy properties from\n\t */\n\tconstructor(loc) {\n        super(loc);\n   }\n    \n    /**\n     * A SolarNetwork assigned unique identifier.\n     * @type {number}\n     */\n    get id() {\n        return this.prop(IdKey);\n    }\n\n    set id(val) {\n        this.prop(IdKey, val);\n    }\n\n    /**\n     * A generalized name, can be used for \"virtual\" locations.\n     * @type {string}\n     */\n    get name() {\n        return this.prop(NameKey);\n    }\n\n    set name(val) {\n        this.prop(NameKey, val);\n    }\n\n    /**\n     * An ISO 3166-1 alpha-2 character country code.\n     * @type {string}\n     */\n    get country() {\n        return this.prop(CountryKey);\n    }\n\n    set country(val) {\n        this.prop(CountryKey, val);\n    }\n\n    /**\n     * A country-specific regional identifier.\n     * @type {string}\n     */\n    get region() {\n        return this.prop(RegionKey);\n    }\n\n    set region(val) {\n        this.prop(RegionKey, val);\n    }\n\n    /**\n     * A country-specific state or province identifier.\n     * @type {string}\n     */\n    get stateOrProvince() {\n        return this.prop(StateOrProvinceKey);\n    }\n\n    set stateOrProvince(val) {\n        this.prop(StateOrProvinceKey, val);\n    }\n\n    /**\n     * Get the locality (city, town).\n     * @type {string}\n     */\n    get locality() {\n        return this.prop(LocalityKey);\n    }\n\n    set locality(val) {\n        this.prop(LocalityKey, val);\n    }\n\n    /**\n     * A country-specific postal code.\n     * @type {string}\n     */\n    get postalCode() {\n        return this.prop(PostalCodeKey);\n    }\n\n    set postalCode(val) {\n        this.prop(PostalCodeKey, val);\n    }\n\n    /**\n     * The street address.\n     * @type {string}\n     */\n    get street() {\n        return this.prop(StreetKey);\n    }\n\n    set street(val) {\n        this.prop(StreetKey, val);\n    }\n\n    /**\n     * The decimal world latitude.\n     * @type {number}\n     */\n    get latitude() {\n        return this.prop(LatitudeKey);\n    }\n\n    set latitude(val) {\n        this.prop(LatitudeKey, val);\n    }\n\n    /**\n     * The decimal world longitude.\n     * @type {number}\n     */\n    get longitude() {\n        return this.prop(LongitudeKey);\n    }\n\n    set longitude(val) {\n        this.prop(LongitudeKey, val);\n    }\n\n    /**\n     * The elevation above sea level, in meters.\n     * @type {number}\n     */\n    get elevation() {\n        return this.prop(ElevationKey);\n    }\n\n    set elevation(val) {\n        this.prop(ElevationKey, val);\n    }\n\n    /**\n     * A time zone ID, for example `Pacific/Auckland`.\n     * @type {string}\n     */\n    get timeZoneId() {\n        return this.prop(TimeZoneIdKey)\n    }\n\n    set timeZoneId(val) {\n        this.prop(TimeZoneIdKey, val);\n    }\n\n}\n\nexport default Location;\n","import Enum from '../util/enum';\n\n/**\n * A named instruction state.\n * \n * @extends module:util~Enum\n * @alias module:domain~InstructionState\n */\nclass InstructionState extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === InstructionState ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link module:domain~InstructionStates} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn InstructionStateValues;\n\t}\n\n}\n\nconst InstructionStateValues = Object.freeze([\n\tnew InstructionState('Unknown'),\n\tnew InstructionState('Queued'),\n    new InstructionState('Received'),\n    new InstructionState('Executing'),\n    new InstructionState('Declined'),\n    new InstructionState('Completed'),\n]);\n\n/**\n * The enumeration of supported InstructionState values.\n * \n * @readonly\n * @enum {module:domain~InstructionState}\n * @property {module:domain~InstructionState} Unknown an unknown state\n * @property {module:domain~InstructionState} Queued the instruction has been received by SolarNet but not yet delivered to its destination\n * @property {module:domain~InstructionState} Received the instruction has been delivered to its destination but not yet acted upon\n * @property {module:domain~InstructionState} Executed the instruction is currently being acted upon\n * @property {module:domain~InstructionState} Declined the destination has declined to execute the instruction, or the execution failed\n * @property {module:domain~InstructionState} Completed the destination has executed successfully\n * @alias module:domain~InstructionStates\n */\nconst InstructionStates = InstructionState.enumsValue(InstructionStateValues);\n\nexport default InstructionStates;\nexport { InstructionState };","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A location precision object for use with defining named geographic precision.\n * \n * @extends module:util~ComparableEnum\n * @alias module:domain~LocationPrecision\n */\nclass LocationPrecision extends ComparableEnum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} precision a relative precision value for this precision \n     */\n    constructor(name, precision) {\n        super(name, precision);\n        if ( this.constructor === LocationPrecision ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the relative precision value.\n     * \n     * This is an alias for {@link #name}.\n     * \n     * @returns {number} the precision\n     */\n    get precision() {\n        return this.value;\n    }\n\n\t/**\n\t * Get the {@link module:domain~LocationPrecisions} values.\n\t * \n     * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn LocationPrecisionValues;\n\t}\n}\n\nconst LocationPrecisionValues = Object.freeze([\n    new LocationPrecision('LatLong', 1),\n    new LocationPrecision('Block', 5),\n    new LocationPrecision('Street', 10),\n    new LocationPrecision('PostalCode', 20),\n    new LocationPrecision('Locality', 30),\n    new LocationPrecision('StateOrProvince', 40),\n    new LocationPrecision('Region', 50),\n    new LocationPrecision('TimeZone', 60),\n    new LocationPrecision('Country', 70),\n]);\n\n/**\n * The enumeration of supported LocationPrecision values.\n * \n * @readonly\n * @enum {module:domain~LocationPrecision}\n * @property {module:domain~LocationPrecision} LatLong GPS coordinates\n * @property {module:domain~LocationPrecision} Block a city block\n * @property {module:domain~LocationPrecision} Street a street\n * @property {module:domain~LocationPrecision} PostalCode a postal code (or \"zip code\")\n * @property {module:domain~LocationPrecision} Locality a town or city\n * @property {module:domain~LocationPrecision} StateOrProvince a state or province\n * @property {module:domain~LocationPrecision} Region a large region\n * @property {module:domain~LocationPrecision} TimeZone a time zone\n * @property {module:domain~LocationPrecision} Country a country\n * @alias module:domain~LocationPrecisions\n */\nconst LocationPrecisions = LocationPrecision.enumsValue(LocationPrecisionValues);\n\nexport default LocationPrecisions;\nexport { LocationPrecision };","import MultiMap from '../util/multiMap';\n\nconst HttpMethod = Object.freeze(\t\n\t/**\n\t * Enumeration of HTTP methods (verbs).\n\t * @enum {string}\n\t * @alias module:net~HttpMethod\n\t * @constant\n\t */\n\t{\n\tGET: 'GET',\n\tHEAD: 'HEAD',\n\tPOST: 'POST',\n\tPUT: 'PUT',\n\tPATCH: 'PATCH',\n\tDELETE: 'DELETE',\n\tOPTIONS: 'OPTIONS',\n\tTRACE: 'TRACE',\n});\n\nconst HttpContentType = Object.freeze(\t\n\t/**\n\t * Enumeration of common HTTP `Content-Type` values.\n\t * @enum {string}\n\t * @alias module:net~HttpContentType\n\t * @constant\n\t */\n\t{\n\t\tAPPLICATION_JSON:\t\t'application/json',\n\t\tAPPLICATION_JSON_UTF8:\t'application/json; charset=UTF-8',\n\t\tFORM_URLENCODED: \t\t'application/x-www-form-urlencoded',\n\t\tFORM_URLENCODED_UTF8:\t'application/x-www-form-urlencoded; charset=UTF-8',\n});\n\n/**\n * Support for HTTP headers.\n * \n * @extends module:util~MultiMap\n * @alias module:net~HttpHeaders\n */\nclass HttpHeaders extends MultiMap {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n\nObject.defineProperties(HttpHeaders, {\n\t/**\n\t * The `Authorization` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'AUTHORIZATION':\t{ value: 'Authorization' },\n\n\t/**\n\t * The `Content-MD5` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_MD5':\t\t{ value: 'Content-MD5' },\n\n\t/**\n\t * The `Content-Type` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_TYPE': \t{ value: 'Content-Type' },\n\n\t/**\n\t * The `Date` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DATE':\t\t\t\t{ value: 'Date' },\n\n\t/**\n\t * The `Digest` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DIGEST':\t\t\t{ value: 'Digest' },\n\n\t/**\n\t * The `Host` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'HOST': \t\t\t{ value: 'Host' },\n\n\t/**\n\t * The `X-SN-Date` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'X_SN_DATE': \t\t{ value: 'X-SN-Date' },\n});\n\nexport default HttpHeaders;\nexport { HttpContentType, HttpMethod };","import Configuration from '../util/configuration';\nimport Environment from './environment';\n\n/**\n * A utility class for helping to compose SolarNet URLs for the REST API.\n *\n * This class is essentially abstract and meant to have mixin helper objects extend it.\n * @alias module:net~UrlHelper\n */\nclass UrlHelper {\n\n    /**\n     * Constructor.\n     *\n     * @param {module:net~Environment|object} [environment] the optional initial environment to use;\n     *        if a non-`Environment` object is passed then the properties of that object will\n     *        be used to construct a new `Environment` instance\n     */\n    constructor(environment) {\n        let env = (environment instanceof Environment ? environment\n            : new Environment(environment));\n        \n        /**\n         * The environment associated with this helper.\n         * @member {module:net~Environment}\n         */\n        this.environment = env;\n\n        this._parameters = new Configuration();\n    }\n\n    /**\n     * Get a parameters object that can be used to hold URL variables.\n     * \n     * @readonly\n     * @type {module:util~Configuration}\n     */\n    get parameters() {\n        return this._parameters;\n    }\n\n    /**\n     * Get or set an environment parameter.\n     * \n     * This is a shortcut for calling {@link module:net~Configuration#value} on the\n     * `environment` object.\n     * \n     * @param {string} key the environment parameter name to get\n     * @param {object} [val] the optional value to set\n     * @returns {object} when called as a getter, the environment parameter value;\n     *                   when called as a setter, the environment parameters object\n     */\n    env(...args) {\n        return this.environment.value(...args);\n    }\n\n    /**\n     * Get or set a parameter.\n     * \n     * This is a shortcut for calling {@link module:net~Configuration#value} on the\n     * `parameters` object.\n     * \n     * @param {string} key the parameter name to get\n     * @param {Object} [val] the optional value to set\n     * @returns {Object} when called as a getter, the parameter value;\n     *                   when called as a setter, the parameters object\n     */\n    parameter(...args) {\n        return this._parameters.value(...args);\n    }\n\n    /**\n     * Get a URL for just the SolarNet host, without any path.\n     *\n     * @returns {string} the URL to the SolarNet host\n     */\n    hostUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'http' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n    \n    /**\n     * Get a URL for just the SolarNet host using the WebSocket protocol, without any path.\n     * \n     * @returns {string} the URL to the SolarNet host WebSocket\n     */\n    hostWebSocketUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'ws' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n\n\t/**\n\t * Get the base URL to the REST API.\n\t * \n\t * This implementation is a stub, meant for subclasses to override. This implementation\n     * simply returns {@link module:net~UrlHelper#hostUrl}.\n\t * \n     * @abstract\n\t * @returns {string} the base URL to the REST API\n\t */\n\tbaseUrl() {\n\t\treturn this.hostUrl();\n\t}\n\n    /**\n     * Replace occurances of URL template variables with values from the `parameters`\n     * property and append to the host URL.\n     * \n     * This method provides a way to resolve an absolute URL based on the configured\n     * environment and parameters on this object.\n     * \n     * @param {string} template a URL path template\n     * @returns {string} an absolute URL\n     * @see module:net~UrlHelper#resolveTemplateUrl\n     */\n    resolveTemplatePath(template) {\n        return this.hostUrl() + this.resolveTemplateUrl(template);\n    }\n\n     /**\n     * Replace occurances of URL template variables with values from the `parameters`\n     * property.\n     * \n     * URL template variables are specified as `{<em>name</em>}`. The variable\n     * will be replaced by the value associated with property `name` in the\n     * `parameters` object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @returns {string} the URL with template variables resolved\n     */\n   resolveTemplateUrl(template) {\n        return UrlHelper.resolveTemplateUrl(template, this._parameters);\n    }\n\n    /**\n     * Replace occurances of URL template variables with values from a parameter object.\n     * \n     * URL template variables are specified as `{<em>name</em>}`. The variable\n     * will be replaced by the value associated with property `name` in the\n     * provided parameter object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @param {object} params an object whose properties should serve as template variables\n     * @returns {string} the URL\n     */\n    static resolveTemplateUrl(template, params) {\n        return template.replace(/\\{([^}]+)\\}/g, function(match, variableName) {\n            let variableValue = params[variableName];\n            return (variableValue !== undefined ? encodeURIComponent(variableValue) : '');\n        });\n    }\n\n}\n\nexport default UrlHelper;\n","const LocationIdsKey = 'locationIds';\nconst SourceIdsKey = 'sourceIds';\n\n/**\n * Create a LocationUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~LocationUrlHelperMixin} the mixin class\n */\nconst LocationUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds support for SolarLocation properties to a {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~LocationUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * The first available location ID from the `locationIds` property.\n     * Setting this replaces any existing location IDs with an array of just that value.\n     * @type {number}\n     */\n    get locationId() {\n        const locationIds = this.locationIds;\n        return (Array.isArray(locationIds) && locationIds.length > 0 ? locationIds[0] : null);\n    }\n\n    set locationId(locationId) {\n        this.parameter(LocationIdsKey, locationId ? [locationId] : null);\n    }\n\n    /**\n     * An array of location IDs, set on the `locationIds` parameter\n     * @type {number[]}\n     */\n    get locationIds() {\n        return this.parameter(LocationIdsKey);\n    }\n\n    set locationIds(locationIds) {\n        this.parameter(LocationIdsKey, locationIds);\n    }\n\n    /**\n     * The first available source ID from the `sourceIds` property.\n     * Setting this replaces any existing location IDs with an array of just that value.\n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        this.parameter(SourceIdsKey, sourceId ? [sourceId] : sourceId);\n    }\n\n    /**\n     * An array of source IDs, set on the `sourceIds` parameter\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.parameter(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.parameter(SourceIdsKey, sourceIds);\n    }\n\n    /**\n     * Generate a URL to find locations based on a search criteria.\n     * \n     * @param {module:domain~Location} filter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n     * @returns {string} the generated URL\n     */\n    findLocationsUrl(filter, sorts, pagination) {\n        return this.baseUrl() + '/location?' +filter.toUriEncodingWithSorting(sorts, pagination);\n    }\n\n}\n\nexport default LocationUrlHelperMixin;\n","/** \n * The SolarQuery default path.\n * @type {string}\n * @alias module:net~SolarQueryDefaultPath\n */\nexport const SolarQueryDefaultPath = '/solarquery';\n\n/** \n * The {@link module:net~UrlHelper#parameters} key for the SolarQuery path.\n * @type {string}\n * @alias module:net~SolarQueryPathKey\n */\nexport const SolarQueryPathKey = 'solarQueryPath';\n\n/** \n * The SolarQuery REST API path.\n * @type {string}\n * @alias module:net~SolarQueryApiPathV1\n */\nexport const SolarQueryApiPathV1 = '/api/v1';\n\n/** \n * The {@link module:net~UrlHelper#parameters} key that holds a `boolean` flag to\n * use the public path scheme (`/pub`) when constructing URLs.\n * @type {string}\n * @alias module:net~SolarQueryPublicPathKey\n */\nexport const SolarQueryPublicPathKey = 'publicQuery';\n\n/**\n * Create a QueryUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~QueryUrlHelperMixin} the mixin class\n */\nconst QueryUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarQuery specific support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~QueryUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Flag to set the `publicQuery` environment parameter.\n     * @type {boolean}\n     */\n    get publicQuery() {\n        return !!this.env(SolarQueryPublicPathKey);\n    }\n\n    set publicQuery(value) {\n        this.env(SolarQueryPublicPathKey, !!value);\n    }\n\n\t/**\n\t * Get the base URL to the SolarQuery v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the `hostUrl`, the `solarQueryPath` context path,\n     * and the `publicQuery` boolean flag. If the context path is not \n     * available, it will default to `/solarquery`.\n\t * \n\t * @returns {string} the base URL to SolarQuery\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarQueryPathKey) || SolarQueryDefaultPath;\n        const isPubPath = this.publicQuery;\n\t\treturn this.hostUrl() + path + SolarQueryApiPathV1\n            +(isPubPath ? '/pub' : '/sec');\n\t}\n\n};\n\nexport default QueryUrlHelperMixin;\n","import UrlHelper from './urlHelper';\nimport LocationUrlHelperMixin from './locationUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin'\n\n/**\n * Create a LocationDatumMetadataUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~LocationDatumMetadataUrlHelperMixin} the mixin class\n */\nconst LocationDatumMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum metadata support to {@link module:net~UrlHelper}.\n * \n * <p>Location datum metadata is metadata associated with a specific location and source, i.e. \n * a `locationId` and a `sourceId`.\n * \n * @mixin\n * @alias module:net~LocationDatumMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get a base URL for location datum metadata operations using a specific location ID.\n     * \n     * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n     * @returns {string} the base URL\n     * @private\n     */\n    baseLocationDatumMetadataUrl(locationId) {\n        return this.baseUrl() + '/location/meta/' +(locationId || this.locationId);\n    }\n\n    locationDatumMetadataUrlWithSource(locationId, sourceId) {\n        let result = this.baseLocationDatumMetadataUrl(locationId);\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            result += '?sourceId=' +encodeURIComponent(source);\n        }\n        return result;\n    }\n\n\t/**\n\t * Generate a URL for viewing datum metadata.\n     * \n     * If no `sourceId` is provided, then the API will return all available datum metadata for all sources.\n\t *\n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the `sourceId` property of this class will be used;\n     *                            if `null` then ignore any `sourceId` property of this class\n     * @returns {string} the URL\n\t */\n\tviewLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n    \n\t/**\n\t * Generate a URL for adding (merging) datum metadata via a `POST` request.\n     * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the `sourceId` property of this class will be used\n     * @returns {string} the URL\n\t */\n    addLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for setting datum metadata via a `PUT` request.\n     * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the `sourceId` property of this class will be used\n     * @returns {string} the URL\n\t */\n    replaceLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for deleting datum metadata via a `DELETE` request.\n     * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the `sourceId` property of this class will be used\n     * @returns {string} the URL\n\t */\n    deleteLocationDatumMetadataUrl(locationId, sourceId) {\n        return this.locationDatumMetadataUrlWithSource(locationId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for searching for location metadata.\n\t * \n     * @param {module:domain~DatumFilter} [filter] a search filter; the `locationIds`, `sourceIds`, `tags`,\n\t *                                    `query`, and `location` properties are supported \n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindLocationDatumMetadataUrl(filter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/location/meta'\n\t\tlet params = filter.toUriEncodingWithSorting(sorts, pagination);\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~LocationDatumMetadataUrlHelperMixin},  \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~LocationUrlHelperMixin} mixins.\n * \n * @mixes module:net~LocationDatumMetadataUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~LocationUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~LocationDatumMetadataUrlHelper\n */\nclass LocationDatumMetadataUrlHelper extends LocationDatumMetadataUrlHelperMixin(QueryUrlHelperMixin(LocationUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default LocationDatumMetadataUrlHelperMixin;\nexport { LocationDatumMetadataUrlHelper };\n","import { dateTimeUrlFormat } from '../format/date';\nimport UrlHelper from './urlHelper';\nimport LocationUrlHelperMixin from './locationUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin';\n\n/**\n * Create a LocationDatumUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~LocationDatumUrlHelperMixin} the mixin class\n */\nconst LocationDatumUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarLocation datum query support to {@link module:net~UrlHelper}.\n * \n * <p>This mixin is commonly mixed with the {@link module:net~QueryUrlHelperMixin} to pick\n * up support for the SolarQuery base URL.</p>\n * \n * <p>This mixin is commonly mixed with the {@link module:net~LocationUrlHelperMixin} to\n * pick up support for `locationId` and `sourceId` properties.</p>\n * \n * @mixin\n * @alias module:net~LocationDatumUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for the \"reportable interval\" for a location, optionally limited to a specific source ID.\n\t *\n     * If no source IDs are provided, then the reportable interval query will return an interval for\n     * all available sources.\n     *\n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId` property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to limit query to; \n     *                 if not provided the `sourceId` property of this class will be used;\n     *                 if `null` the `sourceId` property of this class will be ignored\n\t * @returns {string} the URL\n\t */\n\treportableIntervalUrl(locationId, sourceId) {\n        let url = this.baseUrl() +'/location/datum/interval?locationId=' \n            +(locationId || this.locationId);\n        let source = (sourceId || this.sourceId);\n\t\tif ( sourceId !== null && source ) {\n\t\t\turl += '&sourceId=' + encodeURIComponent(source);\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Generate a URL for finding the available source IDs for a location or metadata filter.\n\t * \n\t * @param {number} [locationId] a specific location ID to use; if not provided the `locationId`\n     *                              property of this class will be used\n\t * @param {Date} [startDate] a start date to limit the search to\n     * @param {Date} [endDate] an end date to limit the search to\n\t * @returns {string} the URL\n\t */\n\tavailableSourcesUrl(locationId, startDate, endDate) {\n\t\tlet result = this.baseUrl() + '/location/datum/sources?locationId='\n            +(locationId || this.locationId);\n        if ( startDate instanceof Date ) {\n            result += '&start=' +encodeURIComponent(dateTimeUrlFormat(startDate));\n        }\n        if ( endDate instanceof Date ) {\n            result += '&end=' +encodeURIComponent(dateTimeUrlFormat(endDate));\n        }\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate a URL for querying for location datum, in either raw or aggregate form.\n\t * \n\t * If the `datumFilter` has an `aggregate` value set, then aggregate results will be\n\t * returned by SolarNet.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tlistDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/location/datum/list';\n\t\tlet params = (datumFilter ? datumFilter.toUriEncodingWithSorting(sorts, pagination) : '');\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate a URL for querying for the most recent datum.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tmostRecentDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/location/datum/mostRecent';\n\t\tlet params = (datumFilter ? datumFilter.toUriEncodingWithSorting(sorts, pagination) : '');\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~LocationDatumUrlHelperMixin}, \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~LocationUrlHelperMixin} mixins.\n * \n * @mixes module:net~LocationDatumUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~LocationUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~LocationDatumUrlHelper\n */\nclass LocationDatumUrlHelper extends LocationDatumUrlHelperMixin(QueryUrlHelperMixin(LocationUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default LocationDatumUrlHelperMixin;\nexport { LocationDatumUrlHelper };\n","const NodeIdsKey = 'nodeIds';\nconst SourceIdsKey = 'sourceIds';\n\n/**\n * Create a NodeUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeUrlHelperMixin} the mixin class\n */\nconst NodeUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds support for SolarNode properties to a {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * The first available node ID from the `nodeIds` property.\n     * Setting this replaces any existing node IDs with an array of just that value.\n     * @type {number}\n     */\n    get nodeId() {\n        const nodeIds = this.nodeIds;\n        return (Array.isArray(nodeIds) && nodeIds.length > 0 ? nodeIds[0] : null);\n    }\n\n    set nodeId(nodeId) {\n        this.parameter(NodeIdsKey, nodeId ? [nodeId] : null);\n    }\n\n    /**\n     * An array of node IDs, set on the `nodeIds` parameter\n     * @type {number[]}\n     */\n    get nodeIds() {\n        return this.parameter(NodeIdsKey);\n    }\n\n    set nodeIds(nodeIds) {\n        this.parameter(NodeIdsKey, nodeIds);\n    }\n\n    /**\n     * The first available source ID from the `sourceIds` property.\n     * Setting this replaces any existing node IDs with an array of just that value.\n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        this.parameter(SourceIdsKey, sourceId ? [sourceId] : sourceId);\n    }\n\n    /**\n     * An array of source IDs, set on the `sourceIds` parameter\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.parameter(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.parameter(SourceIdsKey, sourceIds);\n    }\n\n}\n\nexport default NodeUrlHelperMixin;\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin'\n\n\n/**\n * Create a NodeDatumUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeDatumMetadataUrlHelperMixin} the mixin class\n */\nconst NodeDatumMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum metadata support to {@link module:net~UrlHelper}.\n * \n * <p>Datum metadata is metadata associated with a specific node and source, i.e. \n * a <code>nodeId</code> and a <code>sourceId</code>.\n * \n * @mixin\n * @alias module:net~NodeDatumMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get a base URL for datum metadata operations using a specific node ID.\n     * \n     * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n     * @returns {string} the base URL\n     * @private\n     */\n    baseNodeDatumMetadataUrl(nodeId) {\n        return this.baseUrl() + '/datum/meta/' +(nodeId || this.nodeId);\n    }\n\n    nodeDatumMetadataUrlWithSource(nodeId, sourceId) {\n        let result = this.baseNodeDatumMetadataUrl(nodeId);\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            result += '?sourceId=' +encodeURIComponent(source);\n        }\n        return result;\n    }\n\n\t/**\n\t * Generate a URL for viewing datum metadata.\n     * \n     * If no <code>sourceId</code> is provided, then the API will return all available datum metadata for all sources.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n     * @returns {string} the URL\n\t */\n\tviewNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n    \n\t/**\n\t * Generate a URL for adding (merging) datum metadata via a <code>POST</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    addNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for setting datum metadata via a <code>PUT</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    replaceNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for deleting datum metadata via a <code>DELETE</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    deleteNodeDatumMetadataUrl(nodeId, sourceId) {\n        return this.nodeDatumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for searching for datum metadata.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n\t * @param {SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindNodeDatumMetadataUrl(nodeId, sourceId, sorts, pagination) {\n        let result = this.baseNodeDatumMetadataUrl(nodeId);\n\t\tlet params = '';\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            params += 'sourceId=' +encodeURIComponent(source);\n        }\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n    userMetadataUrl(userId) {\n        let result = this.baseUrl() +'/users/meta';\n        let userParam = (userId || this.userId);\n        if ( Array.isArray(userParam) ) {\n            if ( userParam.length > 0 ) {\n                userParam = userParam[0];\n            } else {\n                userParam = null;\n            }\n        }\n        if ( userParam && userId !== null ) {\n            result += '/' +userParam;\n        }\n        return result;\n    }\n\n    /**\n\t * Generate a URL for viewing a specific user's metadata via a `GET` request.\n\t * \n\t * Note this URL is similar to {@link module:net~UserMetadataUrlHelperMixin#viewUserMetadataUrl}\n\t * but is for the read-only SolarQuery API, rather than the read-write SolarUser API.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the `userId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n    viewUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeDatumMetadataUrlHelperMixin},  \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeDatumMetadataUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeDatumMetadataUrlHelper\n */\nclass NodeDatumMetadataUrlHelper extends NodeDatumMetadataUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeDatumMetadataUrlHelperMixin;\nexport { NodeDatumMetadataUrlHelper };\n","import DatumFilter from '../domain/datumFilter';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin';\n\n/**\n * Create a NodeDatumUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeDatumUrlHelperMixin} the mixin class\n */\nconst NodeDatumUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum query support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeDatumUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for the \"reportable interval\" for a node, optionally limited to a specific set of source IDs.\n\t *\n     * If no source IDs are provided, then the reportable interval query will return an interval for\n     * all available sources.\n     *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @param {string[]} [sourceIds] an array of source IDs to limit query to; if not provided the `sourceIds` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\treportableIntervalUrl(nodeId, sourceIds) {\n\t\tlet url = (this.baseUrl() +'/range/interval?nodeId=' +(nodeId || this.nodeId));\n        let sources = (sourceIds || this.sourceIds);\n\t\tif ( Array.isArray(sources) && sources.length > 0 ) {\n\t\t\turl += '&sourceIds=' + sources.map(e => encodeURIComponent(e)).join(',');\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Generate a URL for finding the available source IDs for a node or metadata filter.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria, which can define `nodeId`, `startDate`, `endDate`,\n\t *                                                and `metadataFilter` properties to limit the results to; if `nodeId` not\n\t *                                                provided the `nodeIds` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tavailableSourcesUrl(datumFilter) {\n\t\tconst filter = (datumFilter || this.datumFilter());\n\t\tlet result = this.baseUrl() + '/range/sources';\n\t\tconst params = filter.toUriEncoding();\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate a URL for querying for datum, in either raw or aggregate form.\n\t * \n\t * If the `datumFilter` has an `aggregate` value set, then aggregate results will be\n\t * returned by SolarNet.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tlistDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/datum/list';\n\t\tconst filter = (datumFilter || this.datumFilter());\n\t\tconst params = filter.toUriEncodingWithSorting(sorts, pagination);\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get a new {@link module:domain~DatumFilter} configured with properties of this instance.\n\t * \n\t * This will configure the following properties:\n\t * \n\t *  * `nodeIds`\n\t *  * `sourceIds`\n\t * \n\t * @returns {module:domain~DatumFilter} the filter\n\t */\n\tdatumFilter() {\n\t\tconst filter = new DatumFilter();\n\t\tlet v;\n\t\t\n\t\tv = this.nodeIds;\n\t\tif ( v ) {\n\t\t\tfilter.nodeIds = v;\n\t\t}\n\n\t\tv = this.sourceIds;\n\t\tif ( v ) {\n\t\t\tfilter.sourceIds = v;\n\t\t}\n\n\t\treturn filter;\n\t}\n\n\t/**\n\t * Generate a URL for querying for the most recent datum.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tmostRecentDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/datum/mostRecent';\n\t\tconst filter = (datumFilter || this.datumFilter());\n\t\tconst params = filter.toUriEncodingWithSorting(sorts, pagination);\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeDatumUrlHelperMixin}, \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeDatumUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeDatumUrlHelper\n */\nclass NodeDatumUrlHelper extends NodeDatumUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeDatumUrlHelperMixin;\nexport { NodeDatumUrlHelper };\n","/** \n * The SolarUser default path.\n * @type {string}\n * @alias module:net~SolarUserDefaultPath\n */\nexport const SolarUserDefaultPath = '/solaruser';\n\n/**\n * The {@link module:net~UrlHelper} parameters key for the SolarUser path.\n * @type {string}\n * @alias module:net~SolarUserPathKey\n */\nexport const SolarUserPathKey = 'solarUserPath';\n\n/** \n * The SolarUser REST API path.\n * @type {string}\n * @alias module:net~SolarUserApiPathV1\n */\nexport const SolarUserApiPathV1 = '/api/v1/sec';\n\nconst UserIdsKey = 'userIds';\n\n/**\n * Create a UserUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserUrlHelperMixin} the mixin class\n */\nconst UserUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarUser specific support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get the default user ID.\n     * \n     * This gets the first available user ID from the `userIds` property.\n     * \n     * @returns {number} the default user ID, or `null`\n     */\n    get userId() {\n        const userIds = this.parameter(UserIdsKey);\n        return (Array.isArray(userIds) && userIds.length > 0 ? userIds[0] : null);\n    }\n\n    /**\n     * Set the user ID.\n     * \n     * This will set the `userIds` property to a new array of just the given value.\n     * \n     * @param {number} userId the user ID to set\n     */\n    set userId(userId) {\n        this.parameter(UserIdsKey, [userId]);\n    }\n\n    get userIds() {\n        return this.parameter(UserIdsKey);\n    }\n\n    set userIds(userIds) {\n        this.parameter(UserIdsKey, userIds);\n    }\n\n\t/**\n\t * Get the base URL to the SolarUser v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the `hostUrl` and a `solarUserPath` context path.\n\t * If the context path is not available, it will default to \n\t * `/solaruser`.\n\t * \n\t * @returns {string} the base URL to SolarUser\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarUserPathKey) || SolarUserDefaultPath;\n\t\treturn super.baseUrl() + path + SolarUserApiPathV1;\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all active nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's active nodes\n\t */\n\tviewNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all pending nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's pending nodes\n\t */\n\tviewPendingNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/pending';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all archived nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's archived nodes\n\t */\n\tviewArchivedNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/archived';\n\t}\n\n\t/**\n\t * Generate a URL to update the archived status of a set of nodes via a `POST` request.\n\t *\n\t * @param {number|number[]|null} nodeId a specific node ID, or array of node IDs, to update; if not provided the \n\t *                                      `nodeIds` property of this class will be used\n\t * @param {boolean} archived `true` to mark the nodes as archived; `false` to un-mark\n\t *                           and return to normal status\n\t * @return {string} the URL to update the nodes archived status\n\t */\n\tupdateNodeArchivedStatusUrl(nodeId, archived) {\n\t\tconst nodeIds = Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : this.nodeIds;\n\t\tlet result = this.baseUrl() + '/nodes/archived?nodeIds='\n\t\t\t+nodeIds.join(',') +'&archived='\n\t\t\t+(archived ? 'true' : 'false');\n\t\treturn result;\n\t}\n\n}\n\nexport default UserUrlHelperMixin;\n","import UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a NodeInstructionUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeInstructionUrlHelperMixin} the mixin class\n */\nconst NodeInstructionUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode instruction support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeInstructionUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL to get all details for a specific instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to get\n\t * @returns {string} the URL\n\t */\n\tviewInstructionUrl(instructionId) {\n\t\treturn (this.baseUrl() +'/instr/view?id=' +encodeURIComponent(instructionId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing active instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewActiveInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewActive?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing pending instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewPendingInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewPending?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for changing the state of an instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to update\n\t * @param {InstructionState} state the instruction state to set\n\t * @returns {string} the URL\n\t * @see the {@link InstructionStates} enum for possible state values\n\t */\n\tupdateInstructionStateUrl(instructionId, state) {\n\t\treturn (this.baseUrl()\n\t\t\t+'/instr/updateState?id=' +encodeURIComponent(instructionId)\n\t\t\t+'&state=' +encodeURIComponent(state.name));\n\t}\n\n\t/**\n\t * Generate a URL for posting an instruction request.\n\t *\n\t * @param {string} topic the instruction topic.\n\t * @param {Object[]} [parameters] an array of parameter objects in the form <code>{name:n1, value:v1}</code>.\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tqueueInstructionUrl(topic, parameters, nodeId) {\n\t\tvar url = (this.baseUrl()\n\t\t\t+'/instr/add?nodeId=' +(nodeId || this.nodeId)\n\t\t\t+'&topic=' +encodeURIComponent(topic));\n\t\tvar i, len;\n\t\tif ( Array.isArray(parameters) ) {\n\t\t\tfor ( i = 0, len = parameters.length; i < len; i++ ) {\n\t\t\t\turl += '&' +encodeURIComponent('parameters['+i+'].name') +'=' +encodeURIComponent(parameters[i].name)\n\t\t\t\t\t+ '&' +encodeURIComponent('parameters['+i+'].value') +'=' +encodeURIComponent(parameters[i].value);\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Create an instruction parameter suitable to passing to {@link NodeInstructionUrlHelperMixin#queueInstructionUrl}.\n\t * \n\t * @param {string} name the parameter name \n\t * @param {*} value the parameter value\n\t * @returns {object} with <code>name</code> and <code>value</code> properties\n\t */\n\tstatic instructionParameter(name, value) {\n\t\treturn {name:name, value:value};\n\t}\n};\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~NodeInstructionUrlHelperMixin},  \n * {@link module:net~UserUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeInstructionUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeInstructionUrlHelper\n */\nclass NodeInstructionUrlHelper extends NodeInstructionUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\n/**\n * The static {@link NodeInstructionUrlHelperMixin#instructionParameter} method so it can be imported directly.\n * \n * @alias module:net~instructionParameter\n */\nconst instructionParameter = NodeInstructionUrlHelper.instructionParameter;\n\nexport default NodeInstructionUrlHelperMixin;\nexport { instructionParameter, NodeInstructionUrlHelper };","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a NodeMetadataUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeMetadataUrlHelperMixin} the mixin class\n */\nconst NodeMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode metadata support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for viewing the configured node's metadata.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewNodeMetadataUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/nodes/meta/' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for adding metadata to a node via a `POST` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\taddNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for setting the metadata of a node via a `PUT` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\treplaceNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for deleting the metadata of a node via a `DELETE` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tdeleteNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for searching for node metadata.\n\t * \n\t * @param {number|number[]} [nodeId] a specific node ID, or array of node IDs, to use; if not provided the \n\t *                                   `nodeIds` property of this class will be used, unless `null`\n\t *                                   is passed in which case no node IDs will be added to the URL so that all available\n\t *                                   node metadata objects will be returned\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindNodeMetadataUrl(nodeId, sorts, pagination) {\n\t\tconst nodeIds = (Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : nodeId !== null ? this.nodeIds : undefined);\n\t\tlet result = this.baseUrl() + '/nodes/meta';\n\t\tlet params = '';\n\t\tif ( Array.isArray(nodeIds) ) {\n\t\t\tparams += 'nodeIds=' +nodeIds.join(',');\n\t\t}\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeMetadataUrlHelperMixin},  \n * {@link module:net~UserUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeMetadataUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeMetadataUrlHelper\n */\nclass NodeMetadataUrlHelper extends NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeMetadataUrlHelperMixin;\nexport { NodeMetadataUrlHelper };\n","import UrlHelper from './urlHelper';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a UserAuthTokenUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserAuthTokenUrlHelperMixin} the mixin class\n */\nconst UserAuthTokenUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds security token support to a SolarUser {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserAuthTokenUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Generate a URL for listing all available auth tokens.\n     * \n\t * @returns {string} the URL\n     */\n    listAllAuthTokensUrl() {\n        return this.baseUrl() + '/user/auth-tokens';\n    }\n\n    /**\n     * Generate a URL for creating a new auth token, via a `POST` request.\n     * \n     * The request body accepts a {@link module:domain~SecurityPolicy} JSON document.\n     * \n     * @param {AuthTokenType} type the auth token type to generate\n\t * @returns {string} the URL\n     */\n    generateAuthTokenUrl(type) {\n        return this.baseUrl() + '/user/auth-tokens/generate/' +type.name;\n    }\n\n    /**\n     * Generate a URL for accessing an auth token.\n     * \n     * @param {string} tokenId the token ID\n\t * @returns {string} the URL\n     * @private\n     */\n    authTokenUrl(tokenId) {\n        return this.baseUrl() + '/user/auth-tokens/' +encodeURIComponent(tokenId);\n    }\n\n    /**\n     * Generate a URL for deleting an auth token, via a `DELETE` request.\n     * \n     * @param {string} tokenId the token ID to delete\n\t * @returns {string} the URL\n     */\n    deleteAuthTokenUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating (merging) a security policy on an auth token,\n     * via a `PATCH` request.\n     * \n     * The request body accepts a {@link module:net~SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     */\n    updateAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for replacing a security policy on an auth token,\n     * via a `PUT` request.\n     * \n     * The request body accepts a {@link module:domain~SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     */\n    replaceAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating the status of an auth token,\n     * via a `POST` request.\n     * \n     * @param {string} tokenId the ID of the token to update\n     * @param {AuthTokenStatus} status the status to change to\n\t * @returns {string} the URL\n     */\n    updateAuthTokenStatusUrl(tokenId, status) {\n        return this.authTokenUrl(tokenId) + '?status=' +encodeURIComponent(status.name);\n    }\n}\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~UserAuthTokenUrlHelperMixin} and  \n * {@link module:net~UserUrlHelperMixin} mixins.\n * \n * @mixes module:net~UserAuthTokenUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~UserAuthTokenUrlHelper\n */\nclass UserAuthTokenUrlHelper extends UserAuthTokenUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {\n\n }\n\nexport default UserAuthTokenUrlHelperMixin;\nexport { UserAuthTokenUrlHelper };\n","import UrlHelper from './urlHelper';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a UserMetadataUrlHelperMixin class.\n *\n * @exports net\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserMetadataUrlHelperMixin} the mixin class\n */\nconst UserMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds user metadata support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n\t * Generate a URL for viewing the configured user's metadata via a <code>GET</code> request.\n\t *\n\t * @param {module:domain~UserMetadataFilter} filter the search criteria\n\t * @returns {string} the URL\n\t */\n\tfindUserMetadataUrl(filter) {\n        let result = this.baseUrl() +'/users/meta';\n        if ( filter ) {\n            const params = filter.toUriEncoding();\n            if ( params.length > 0 ) {\n                result += '?' + params;\n            }\n        }\n        return result;\n    }\n    \n    userMetadataUrl(userId) {\n        let result = this.baseUrl() +'/users/meta';\n        let userParam = (userId || this.userId);\n        if ( Array.isArray(userParam) ) {\n            if ( userParam.length > 0 ) {\n                userParam = userParam[0];\n            } else {\n                userParam = null;\n            }\n        }\n        if ( userParam && userId !== null ) {\n            result += '/' +userParam;\n        }\n        return result;\n    }\n\n    /**\n\t * Generate a URL for viewing a specific user's metadata via a <code>GET</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then view metadata of the requesting user\n\t * @returns {string} the URL\n\t */\n    viewUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n    }\n\n    /**\n\t * Generate a URL for adding user metadata via a <code>POST</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then add metadata to the requesting user\n\t * @returns {string} the URL\n\t */\n\taddUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n    }\n    \n    /**\n\t * Generate a URL for replacing user metadata via a <code>PUT</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then add metadata to the requesting user\n\t * @returns {string} the URL\n\t */\n\treplaceUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n\t}\n    \n    /**\n\t * Generate a URL for deleting user metadata via a <code>DELETE</code> request.\n\t *\n\t * @param {number|null} [userId] a specific user ID;\n     *                               if not provided the <code>userId</code> property of this class will be used;\n     *                               if <code>null</code> then add metadata to the requesting user\n\t * @returns {string} the URL\n\t */\n\tdeleteUserMetadataUrl(userId) {\n        return this.userMetadataUrl(userId);\n\t}\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~UserMetadataUrlHelperMixin}\n * and {@link module:net~UserUrlHelperMixin} mixins.\n * \n * @mixes module:net~UserMetadataUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~UserMetadataUrlHelper\n */\nclass UserMetadataUrlHelper extends UserMetadataUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {\n\n}\n\nexport default UserMetadataUrlHelperMixin;\nexport { UserMetadataUrlHelper };\n","/**\n * Get an appropriate multiplier value for scaling a given value to a more display-friendly form.\n * \n * This will return values suitable for passing to {@link module:format~displayUnitsForScale}.\n * \n * @param {number} value the value to get a display scale factor for, for example the maximum value\n *                       in a range of values\n * @return {number} the display scale factor\n * @alias module:format~displayScaleForValue\n */\nexport function displayScaleForValue(value) {\n    var result = 1,\n        num = Math.abs(Number(value));\n\tif ( isNaN(num) === false ) {\n\t\tif ( num >= 1000000000 ) {\n\t\t\tresult = 1000000000;\n\t\t} else if ( num >= 1000000 ) {\n\t\t\tresult = 1000000;\n\t\t} else if ( num >= 1000 ) {\n\t\t\tresult = 1000;\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Get an appropriate display unit for a given base unit and scale factor.\n * \n * Use this method to render scaled data value units. Typically you would first call\n * {@link module:module:format~displayScaleForValue}, passing in the largest expected value\n * in a set of data, and then pass the result to this method to generate a display unit\n * for the base unit for that data.\n * \n * For example, given a base unit of `W` (watts) and a maximum data value of `10000`:\n * \n * ```\n * const fmt = import { * } from 'format/scale';\n * const displayScale = fmt.displayScaleForValue(10000);\n * const displayUnit = fmt.displayUnitForScale('W', displayScale);\n * ```\n * \n * The `displayUnit` result in that example would be `kW`.\n *\n * @param {string} baseUnit the base unit, for example `W` or `Wh`\n * @param {number} scale the unit scale, which must be a recognized SI scale, such \n *                       as `1000` for `k`\n * @return {string} the display unit value\n * @alias module:format~displayUnitsForScale\n */\nexport function displayUnitsForScale(baseUnit, scale) {\n\treturn (scale === 1000000000 ? 'G' \n\t\t\t: scale === 1000000 ? 'M' \n\t\t\t: scale === 1000 ? 'k' \n\t\t\t: '') + baseUnit;\n}\n"]}