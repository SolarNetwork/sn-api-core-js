{"version":3,"sources":["../src/format/date.js","../src/domain/datumFilter.js","../src/domain/generalMetadata.js","../src/domain/securityPolicy.js","../src/util/multiMap.js","../src/util/configuration.js","../src/net/urlQuery.js","../src/net/authV2.js","../src/util/enum.js","../src/util/comparableEnum.js","../src/domain/aggregation.js","../src/domain/authTokenStatus.js","../src/domain/authTokenType.js","../src/util/propMap.js","../src/domain/instructionState.js","../src/domain/locationPrecision.js","../src/domain/pagination.js","../src/domain/sortDescriptor.js","../src/net/environment.js","../src/net/httpHeaders.js","../src/net/urlHelper.js","../src/net/nodeUrlHelperMixin.js","../src/net/queryUrlHelperMixin.js","../src/net/datumMetadataUrlHelperMixin.js","../src/net/nodeDatumUrlHelperMixin.js","../src/net/userUrlHelperMixin.js","../src/net/nodeInstructionUrlHelperMixin.js","../src/net/nodeMetadataUrlHelperMixin.js","../src/net/userAuthTokenUrlHelperMixin.js"],"names":["dateParser","str","isoParse","timestampParse","dateTimeParse","iso8601Date","date","includeTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","datumFilterUriEncodingPropertyMapper","key","value","NodeIdsKey","SourceIdsKey","UserIdsKey","Array","isArray","length","substring","StartDateKey","EndDateKey","dateTimeUrlFormat","MostRecentKey","stringMapToObject","strMap","obj","Object","create","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","k","_ref2","v","Map","objectToStringMap","_step2","keys","_iteratorNormalCompletion2","_iterator2","set","_typeof","setOrNull","result","Set","size","mergedSets","set1","set2","s1","s2","values","add","addValue","map","replace","keyLc","toLowerCase","mapping","mappings","val","mappingNames","push","len","i","createGetter","me","prop","createSetter","createProperty","defineProperty","urlQueryParse","search","pairs","pair","params","undefined","match","split","decodeURIComponent","urlQueryEncode","parameters","encoderFn","handleValue","encoder","encodeURIComponent","hasOwnProperty","caseInsensitiveEqualsFn","valueLc","e","toString","lowercaseSortedArray","items","sortedItems","sort","_hexEscapeChar","c","charCodeAt","_encodeURIComponent","Enum","name","_name","this","constructor","freeze","enums","reduce","ComparableEnum","_value","_this","other","minEnum","cache","get","enumValues","agg","compareTo","Aggregation","level","AggregationValues","Number","MAX_SAFE_INTEGER","Aggregations","enumsValue","AuthTokenStatus","_Enum","AuthTokenStatusValues","AuthTokenStatuses","AuthTokenType","AuthTokenTypeValues","AuthTokenTypes","PropMap","props","newValue","arguments","newProps","assign","propertyName","callbackFn","kv","forEach","timestampFormat","utcFormat","dateTimeFormat","dateFormat","utcParse","AggregationKey","DataPathKey","DatumFilter","nodeIds","nodeId","sourceIds","sourceId","userIds","userId","path","GeneralMetadata","info","propertyInfo","tags","from","JSON","stringify","json","m","pm","t","parse","InstructionState","InstructionStateValues","InstructionStates","LocationPrecision","precision","LocationPrecisionValues","LocationPrecisions","Pagination","max","offset","_max","_offset","SecurityPolicy","aggregations","minAggregation","locationPrecisions","minLocationPrecision","nodeMetadataPaths","userMetadataPaths","_nodeIds","_sourceIds","_aggregations","_minAggregation","_locationPrecisions","_minLocationPrecision","_nodeMetadataPaths","_userMetadataPaths","MIN_AGGREGATION_CACHE","MIN_LOCATION_PRECISION_CACHE","SecurityPolicyBuilder","policy","withAggregations","withMinAggregation","withLocationPrecisions","withMinLocationPrecision","withNodeIds","withSourceIds","withNodeMetadataPaths","withUserMetadataPaths","addAggregations","addLocationPrecisions","addNodeIds","addSourceIds","addNodeMetadataPaths","addUserMetadataPaths","minimumEnumSet","buildAggregations","buildLocationPrecisions","SortDescriptor","descending","_key","_descending","index","propName","MultiMap","putAll","indexOf","splice","Configuration","initialMap","enabled","newMap","Environment","config","port","protocol","HttpMethod","HttpHeaders","defineProperties","urlQuery","AuthorizationV2Builder","token","environment","tokenId","reset","contentDigest","httpHeaders","signedHeaderNames","host","method","GET","Date","tokenSecret","signingKey","computeSigningKey","httpMethod","put","HOST","requestPath","url","uri","uriParse","scheme","query","queryParams","CONTENT_TYPE","requestDate","useSnDate","headerName","headerValue","headers","digest","Hex","keySet","first","vals","valsLen","j","sortedLowercaseHeaderNames","toUTCString","firstValue","trim","join","EMPTY_STRING_SHA256_HEX","X_SN_DATE","DATE","containsKey","CONTENT_MD5","DIGEST","computeCanonicalRequestData","canonicalHeaderNames","canonicalQueryParameters","canonicalHeaders","canonicalSignedHeaderNames","canonicalContentSHA256","secretKey","datestring","HmacSHA256","canonicalRequestData","SHA256","sortedHeaderNames","canonicalReq","signatureData","computeSignatureData","signature","buildWithKey","signedHeaders","findIndex","existingIndex","concat","remove","UrlHelper","env","_parameters","_environment","apply","tls","useTls","hostUrl","template","resolveTemplateUrl","variableName","variableValue","NodeUrlHelperMixin","superclass","parameter","SolarQueryDefaultPath","SolarQueryPathKey","SolarQueryApiPathV1","SolarQueryPublicPathKey","QueryUrlHelperMixin","isPubPath","DatumMetadataUrlHelperMixin","baseUrl","baseDatumMetadataUrl","source","datumMetadataUrlWithSource","sorts","pagination","toUriEncoding","DatumMetadataUrlHelper","NodeDatumUrlHelperMixin","sources","metadataFilter","datumFilter","NodeDatumUrlHelper","SolarUserDefaultPath","SolarUserPathKey","SolarUserApiPathV1","UserUrlHelperMixin","babelHelpers.get","archived","NodeInstructionUrlHelperMixin","instructionId","state","topic","NodeInstructionUrlHelper","instructionParameter","NodeMetadataUrlHelperMixin","viewNodeMetadataUrl","NodeMetadataUrlHelper","UserAuthTokenUrlHelperMixin","type","authTokenUrl","status","UserAuthTokenUrlHelper"],"mappings":"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","file":"lib/solarnetwork-api-core.es.min.js.map","sourcesContent":["import { utcFormat, utcParse, isoParse } from 'd3-time-format';\n\n/**\n * Format a date into a SolarNet UTC timestamp format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd HH:mm:ss.SSS'Z'`\n * @alias module:format~timestampFormat\n */\nexport const timestampFormat = utcFormat(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\n/**\n * Format a date into a SolarNet UTC date/time format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd HH:mm`\n * @alias module:format~dateTimeFormat\n */\nexport const dateTimeFormat = utcFormat(\"%Y-%m-%d %H:%M\");\n\n/**\n * Format a date into a SolarNet URL UTC date/time format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd'T'HH:mm`\n * @alias module:format~dateTimeUrlFormat\n */\nexport const dateTimeUrlFormat = utcFormat(\"%Y-%m-%dT%H:%M\");\n\n/**\n * Format a date into a SolarNet UTC date format.\n * @function\n * @param {Date} date the date to format\n * @returns {string} the formatted date value - `yyyy-MM-dd`\n * @alias module:format~dateFormat\n */\nexport const dateFormat = utcFormat(\"%Y-%m-%d\");\n\n/**\n * Parse a SolarNet UTC timestamp value.\n * @function\n * @param {string} str the string to parse - `yyyy-MM-dd HH:mm:ss.SSS'Z'\n * @returns {Date} the parsed date, or `null`\n * @alias module:format~timestampParse\n */\nexport const timestampParse = utcParse(\"%Y-%m-%d %H:%M:%S.%LZ\");\n\n/**\n * Parse a SolarNet UTC date/time.\n * @function\n * @param {string} str the string to parse - `yyyy-MM-dd HH:mm\n * @returns {Date} the parsed date, or `null`\n * @alias module:format~dateTimeParse\n */\nexport const dateTimeParse = utcParse(\"%Y-%m-%d %H:%M\");\n\nexport { \n\t/**\n\t * Parse a SolarNet URL UTC date/time value.\n\t * @function\n\t * @param {string} str the string to parse - `yyyy-MM-dd'T'HH:mm`\n\t * @returns {Date} the parsed date, or `null`\n\t * @alias module:format~dateTimeUrlParse\n\t */\n\tisoParse as dateTimeUrlParse, \n\t\n\t/**\n\t * Parse a SolarNet UTC date value.\n\t * @function\n\t * @param {string} str the string to parse - `yyyy-MM-dd`\n\t * @returns {Date} the parsed date, or `null`\n\t * @alias module:format~dateParse\n\t */\n\tisoParse as dateParse } from 'd3-time-format';\n\n/**\n * Parse a UTC date string, from a variety of supported formats.\n *\n * @param {String} str the string to parse into a date\n * @returns {Date} the parsed `Date`, or `null` if the date can't be parsed\n * @alias module:format~dateParser\n */\nexport function dateParser(str) {\n\tvar date = isoParse(str)\n\t\t|| timestampParse(str)\n\t\t|| dateTimeParse(str);\n\treturn date;\n}\n\n/**\n * Format a date into an ISO 8601 timestamp or date string, in the UTC time zone.\n * \n * @param {Date} date the date to format \n * @param {boolean} [includeTime=false] `true` to format as a timestamp, `false` as just a date\n * @returns {string} the formatted date string\n * @alias module:format~iso8601Date\n */\nexport function iso8601Date(date, includeTime) {\n\treturn ''+date.getUTCFullYear()\n\t\t\t+(date.getUTCMonth() < 9 ? '0' : '') +(date.getUTCMonth()+1)\n\t\t\t+(date.getUTCDate() < 10 ? '0' : '') + date.getUTCDate()\n\t\t\t+(includeTime ?\n\t\t\t\t'T'\n\t\t\t\t+(date.getUTCHours() < 10 ? '0' : '') + date.getUTCHours()\n\t\t\t\t+(date.getUTCMinutes() < 10 ? '0' : '') + date.getUTCMinutes()\n\t\t\t\t+(date.getUTCSeconds() < 10 ? '0' : '') +date.getUTCSeconds()\n\t\t\t\t+'Z'\n\t\t\t\t: '');\n}\n","import { Aggregation } from './aggregation';\nimport PropMap from '../util/propMap';\n\nimport { dateTimeUrlFormat } from '../format/date'\n\nconst AggregationKey = 'aggregation';\nconst NodeIdsKey = 'nodeIds';\nconst SourceIdsKey = 'sourceIds';\nconst UserIdsKey = 'userIds';\nconst MostRecentKey = 'mostRecent';\nconst StartDateKey =  'startDate';\nconst EndDateKey = 'endDate';\nconst DataPathKey = 'dataPath';\n\n/**\n * A filter criteria object for datum.\n * \n * @extends module:util~PropMap\n * @alias module:domain~DatumFilter\n */\nclass DatumFilter extends PropMap {\n\n    /**\n     * Constructor.\n     * @param {object} [props] initial property values \n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A node ID.\n     * \n     * This manages the first available node ID from the `nodeIds` property.\n     * \n     * @type {number}\n     */\n    get nodeId() {\n        const nodeIds = this.nodeIds;\n        return (Array.isArray(nodeIds) && nodeIds.length > 0 ? nodeIds[0] : null);\n    }\n\n    set nodeId(nodeId) {\n        if ( nodeId ) {\n            this.nodeIds = [nodeId];\n        } else {\n            this.nodeIds = null;\n        }\n    }\n\n    /**\n     * An array of node IDs.\n     * @type {number[]}\n     */\n    get nodeIds() {\n        return this.prop(NodeIdsKey);\n    }\n\n    set nodeIds(nodeIds) {\n        this.prop(NodeIdsKey, Array.isArray(nodeIds) ? nodeIds : null);\n    }\n\n    /**\n     * A source ID.\n     * \n     * This manages the first available source ID from the `sourceIds` property.\n     * \n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        if ( sourceId ) {\n            this.sourceIds = [sourceId];\n        } else {\n            this.sourceIds = null;\n        }\n    }\n\n    /**\n     * An array of source IDs.\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.prop(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.prop(SourceIdsKey, Array.isArray(sourceIds) ? sourceIds : null);\n    }\n\n    /**\n     * A user ID.\n     * \n     * This manages the first available node ID from the `userIds` property.\n     * \n     * @type {number}\n     */\n    get userId() {\n        const userIds = this.userIds;\n        return (Array.isArray(userIds) && userIds.length > 0 ? userIds[0] : null);\n    }\n\n    set userId(userId) {\n        if ( userId ) {\n            this.userIds = [userId];\n        } else {\n            this.userIds = null;\n        }\n    }\n\n    /**\n     * An array of user IDs.\n     * @type {number[]}\n     */\n    get userIds() {\n        return this.prop(UserIdsKey);\n    }\n\n    set userIds(userIds) {\n        this.prop(UserIdsKey, Array.isArray(userIds) ? userIds : null);\n    }\n\n    /**\n     * The \"most recent\" flag.\n     * @type {boolean}\n     */\n    get mostRecent() {\n        return !!this.prop(MostRecentKey);\n    }\n\n    set mostRecent(value) {\n        this.prop(MostRecentKey, !!value);\n    }\n\n    /**\n     * A minimumin date.\n     * @type {Date}\n     */\n    get startDate() {\n        return this.prop(StartDateKey);\n    }\n\n    set startDate(date) {\n        this.prop(StartDateKey, date);\n    }\n\n    /**\n     * A maximum date.\n     * @type {Date}\n     */\n    get endDate() {\n        return this.prop(EndDateKey);\n    }\n\n    set endDate(date) {\n        this.prop(EndDateKey, date);\n    }\n\n    /**\n     * A data path, in dot-delimited notation like `i.watts`.\n     * @type {string}\n     */\n    get dataPath() {\n        return this.prop(DataPathKey);\n    }\n\n    set dataPath(path) {\n        this.prop(DataPathKey, path);\n    }\n\n    /**\n     * An aggregation.\n     * \n     * Including this in a filter will cause SolarNet to return aggregated results, rather\n     * than raw results.\n     * \n     * @type {module:domain~Aggregation}\n     */\n    get aggregation() {\n        return this.prop(AggregationKey);\n    }\n\n    set aggregation(agg) {\n        this.prop(AggregationKey, agg instanceof Aggregation ? agg : null);\n    }\n\n     /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * @override\n     * @inheritdoc\n     */\n    toUriEncoding(propertyName, callbackFn) {\n        return super.toUriEncoding(propertyName, callbackFn || datumFilterUriEncodingPropertyMapper);\n    }\n\n}\n\n/**\n * Map DatumFilter properties for URI encoding.\n * \n * @param {string} key the property key\n * @param {*} value the property value\n * @returns {*} 2-element array for mapped key+value, `null` to skip, or `key` to keep as-is\n * @private\n */\nfunction datumFilterUriEncodingPropertyMapper(key, value) {\n    if ( key === NodeIdsKey || key === SourceIdsKey || key === UserIdsKey ) {\n        // check for singleton array value, and re-map to singular property by chopping of \"s\"\n        if  ( Array.isArray(value) && value.length === 1 ) {\n            return [key.substring(0, key.length - 1), value[0]];\n        }\n    } else if ( key === StartDateKey || key === EndDateKey ) {\n        return [key, dateTimeUrlFormat(value)];\n    } else if ( key === MostRecentKey && !value ) {\n        return null;\n    }\n    return key;\n}\n\nexport default DatumFilter;\n","/**\n * General metadata with a basic structure.\n * \n * This metadata can be associated with a variety of objects within SolarNetwork, such\n * as users, nodes, and datum.\n * \n * @alias module:domain~GeneralMetadata\n */\nclass GeneralMetadata {\n\n    /**\n     * Constructor.\n     * \n     * @param {Map<string, *>} [info] the general metadata map\n     * @param {Map<string, Map<string, *>>} [propertyInfo] the property metadata map\n     * @param {Set<string>} [tags] the tags\n     */\n    constructor(info, propertyInfo, tags) {\n        this.info = info || null;\n        this.propertyInfo = propertyInfo || null;\n        this.tags = (tags instanceof Set ? tags : Array.isArray(tags) ? new Set(tags) : null);\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        const info = this.info;\n        if ( info ) {\n            result['m'] = stringMapToObject(info);\n        }\n        const propertyInfo = this.propertyInfo;\n        if ( propertyInfo ) {\n            result['pm'] = stringMapToObject(propertyInfo);\n        }\n        const tags = this.tags;\n        if ( tags ) {\n            result['t'] = Array.from(tags);\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~GeneralMetadata} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~GeneralMetadata#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @returns {module:domain~GeneralMetadata} the metadata instance \n     */\n    static fromJsonEncoding(json) {\n        let m, pm, t;\n        if ( json ) {\n            const obj = JSON.parse(json);\n            m = (obj['m'] ? objectToStringMap(obj['m']) : null);\n            pm = (obj['pm'] ? objectToStringMap(obj['pm']) : null);\n            t = (Array.isArray(obj['t']) ? new Set(obj['t']) : null);\n        }\n        return new GeneralMetadata(m, pm, t);\n    }\n}\n\n/**\n * Convert a `Map` into a simple object.\n * \n * The keys are assumed to be strings. Values that are themselves `Map` instances\n * will be converted to simple objects as well.\n * \n * @param {Map<string, *>} strMap a Map with string keys; nested Map objects are also handled\n * @returns {object} a simple object\n * @see {@link objectToStringMap} for the reverse conversion\n * @alias module:domain~stringMapToObject\n */\nfunction stringMapToObject(strMap) {\n    const obj = Object.create(null);\n    if ( strMap ) {\n        for (const [k,v] of strMap) {\n            obj[k] = (v instanceof Map ? stringMapToObject(v) : v);\n        }\n    }\n    return obj;\n}\n\n/**\n * Convert a simple object into a `Map` instance.\n * \n * Property values that are themselves objects will be converted into `Map`\n * instances as well.\n * \n * @param {object} obj a simple object\n * @returns {Map<string, *>} a Map with string keys; nested Map objects are also handled\n * @see {@link module:domain~stringMapToObject} for the reverse conversion\n * @alias module:domain~objectToStringMap\n */\nfunction objectToStringMap(obj) {\n    const strMap = new Map();\n    if ( obj ) {\n        for (const k of Object.keys(obj)) {\n            const v = obj[k];\n            strMap.set(k, (typeof v === 'object' ? objectToStringMap(v) : v));\n        }\n    }\n    return strMap;\n}\n\nexport default GeneralMetadata;\nexport { stringMapToObject, objectToStringMap };\n","import { Aggregation } from './aggregation';\nimport { LocationPrecision } from './locationPrecision';\n\n/**\n * Get a Set from a Set or array or object, returning `null` if the set would be empty.\n * \n * @param {Object[]|Set<*>} obj the array, Set, or singleton object to get as a Set\n * @returns {Set<*>} the Set, or `null`\n * @private\n */\nfunction setOrNull(obj) {\n\tlet result = null;\n\tif ( obj instanceof Set ) {\n\t\tresult = (obj.size > 0 ? obj : null);\n\t} else if ( Array.isArray(obj) ) {\n\t\tresult = (obj.length > 0 ? new Set(obj) : null);\n\t} else if ( obj ) {\n\t\tresult = new Set([obj]);\n\t}\n\treturn result;\n}\n\n/**\n * Merge two sets.\n * \n * @param {Object[]|Set<*>} [set1] the first set \n * @param {Object[]|Set<*>} [set2] the second set \n * @returns {Set<*>} the merged Set, or `null` if neither arguments are sets or \n *                   neither argument have any values\n * @private\n */\nfunction mergedSets(set1, set2) {\n\tlet s1 = setOrNull(set1);\n\tlet s2 = setOrNull(set2);\n\tif ( s1 === null && s2 === null ) {\n\t\treturn null;\n\t} else if ( s2 === null ) {\n\t\treturn s1;\n\t} else if ( s1 === null ) {\n\t\treturn s2;\n\t} else {\n\t\tfor ( let v of s2.values() ) {\n\t\t\ts1.add(v);\n\t\t}\n\t\treturn s1;\n\t}\n}\n\n\n/**\n * An immutable set of security restrictions that can be attached to other objects, like auth tokens.\n * \n * Use the {@link module:domain~SecurityPolicyBuilder} to create instances of this class with a fluent API.\n * @alias module:domain~SecurityPolicy\n */\nclass SecurityPolicy {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {number[]|Set<number>} [nodeIds] the node IDs to restrict to, or `null` for no restriction\n\t * @param {string[]|Set<string>} [sourceIds] the source ID to restrict to, or `null` for no restriction\n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} [aggregations] the aggregation names to restrict to, or `null` for no restriction\n\t * @param {module:domain~Aggregation} [minAggregation] if specified, a minimum aggregation level that is allowed\n\t * @param {Set<module:domain~LocationPrecision>} [locationPrecisions] the location precision names to restrict to, or `null` for no restriction\n\t * @param {module:domain~LocationPrecision} [minLocationPrecision] if specified, a minimum location precision that is allowed\n\t * @param {Set<string>} [nodeMetadataPaths] the `SolarNodeMetadata` paths to restrict to, or `null` for no restriction\n\t * @param {Set<string>} [userMetadataPaths] the `UserNodeMetadata` paths to restrict to, or `null` for no restriction\n\t */\n    constructor(nodeIds, sourceIds, aggregations, minAggregation, locationPrecisions,\n\t\t\tminLocationPrecision, nodeMetadataPaths, userMetadataPaths) {\n\t\tthis._nodeIds = setOrNull(nodeIds);\n\t\tthis._sourceIds = setOrNull(sourceIds);\n\t\tthis._aggregations = setOrNull(aggregations);\n\t\tthis._minAggregation = (minAggregation instanceof Aggregation ? minAggregation : null);\n\t\tthis._locationPrecisions = setOrNull(locationPrecisions);\n\t\tthis._minLocationPrecision = (minLocationPrecision instanceof LocationPrecision ? minLocationPrecision : null);\n\t\tthis._nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n        this._userMetadataPaths = setOrNull(userMetadataPaths);\n        if ( this.constructor === SecurityPolicy ) {\n            Object.freeze(this);\n        }\n\t}\n\n\t/**\n\t * Get the node IDs.\n\t * \n\t * @returns {Set<number>} the node IDs, or `null`\n\t */\n\tget nodeIds() {\n\t\treturn this._nodeIds;\n\t}\n\n\t/**\n\t * Get the source IDs.\n\t * \n\t * @returns {Set<string>} the source IDs, or `null`\n\t */\n\tget sourceIds() {\n\t\treturn this._sourceIds;\n\t}\n\n\t/**\n\t * Get the aggregations.\n\t * \n\t * @returns {Set<module:domain~Aggregation>} the aggregations, or `null`\n\t */\n\tget aggregations() {\n\t\treturn this._aggregations;\n\t}\n\n\t/**\n\t * Get the location precisions.\n\t * \n\t * @returns {Set<module:domain~LocationPrecision>} the precisions, or `null`\n\t */\n\tget locationPrecisions() {\n\t\treturn this._locationPrecisions;\n\t}\n\n\t/**\n\t * Get the minimum aggregation.\n\t * \n\t * @returns {module:domain~Aggregation} the minimum aggregation, or `null`\n\t */\n\tget minAggregation() {\n\t\treturn this._minAggregation;\n\t}\n\n\t/**\n\t * Get the minimum location precision.\n\t * \n\t * @returns {module:domain~LocationPrecision} the minimum precision, or `null`\n\t */\n\tget minLocationPrecision() {\n\t\treturn this._minLocationPrecision;\n\t}\n\n\t/**\n\t * Get the node metadata paths.\n\t * \n\t * @returns {Set<string>} the node metadata paths, or `null`\n\t */\n\tget nodeMetadataPaths() {\n\t\treturn this._nodeMetadataPaths;\n\t}\n\n\t/**\n\t * Get the user metadata paths.\n\t * \n\t * @returns {Set<string>} the user metadata paths, or `null`\n\t */\n\tget userMetadataPaths() {\n\t\treturn this._userMetadataPaths;\n\t}\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n\t\tlet result = {};\n\t\tlet val = this.nodeIds;\n\t\tif ( val ) {\n\t\t\tresult.nodeIds = Array.from(val);\n\t\t}\n\t\t\n\t\tval = this.sourceIds;\n\t\tif ( val ) {\n\t\t\tresult.sourceIds = Array.from(val);\n\t\t}\n\n\t\tval = this.aggregations;\n\t\tif ( val ) {\n\t\t\tresult.aggregations = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.locationPrecisions;\n\t\tif ( val ) {\n\t\t\tresult.locationPrecisions = Array.from(val).map(e => e.name);\n\t\t}\n\n\t\tval = this.minAggregation;\n\t\tif ( val ) {\n\t\t\tif ( result.length > 0 ) {\n\t\t\t\tresult += '&';\n\t\t\t}\n\t\t\tresult.minAggregation = val.name;\n\t\t}\n\n\t\tval = this.minLocationPrecision;\n\t\tif ( val ) {\n\t\t\tresult.minLocationPrecision = val.name;\n\t\t}\n\n\t\tval = this.nodeMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.nodeMetadataPaths = Array.from(val);\n\t\t}\n\n\t\tval = this.userMetadataPaths;\n\t\tif ( val ) {\n\t\t\tresult.userMetadataPaths = Array.from(val);\n\t\t}\n\n\t\treturn JSON.stringify(result);\n    }\n}\n\nconst MIN_AGGREGATION_CACHE = new Map(); // Map<string, Set<Aggregation>>\nconst MIN_LOCATION_PRECISION_CACHE = new Map(); // Map<string, Set<LocationPrecision>>\n\n/**\n * A mutable builder object for {@link module:domain~SecurityPolicy} instances.\n * @alias module:domain~SecurityPolicyBuilder\n */\nclass SecurityPolicyBuilder {\n\n\t/**\n\t * Apply all properties from another SecurityPolicy.\n\t * \n\t * @param {module:domain~SecurityPolicy} policy the SecurityPolicy to apply\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.withAggregations(policy.aggregations)\n\t\t\t\t.withMinAggregation(policy.minAggregation)\n\t\t\t\t.withLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t.withMinLocationPrecision(policy.minLocationPrecision)\n\t\t\t\t.withNodeIds(policy.nodeIds)\n\t\t\t\t.withSourceIds(policy.sourceIds)\n\t\t\t\t.withNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t.withUserMetadataPaths(policy.userMetadataPaths);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Merge all properties from another SecurityPolicy.\n\t * \n\t * @param {module:domain~SecurityPolicy} policy the SecurityPolicy to merge\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddPolicy(policy) {\n\t\tif ( policy ) {\n\t\t\tthis.addAggregations(policy.aggregations)\n\t\t\t\t\t.addLocationPrecisions(policy.locationPrecisions)\n\t\t\t\t\t.addNodeIds(policy.nodeIds)\n\t\t\t\t\t.addSourceIds(policy.sourceIds)\n\t\t\t\t\t.addNodeMetadataPaths(policy.nodeMetadataPaths)\n\t\t\t\t\t.addUserMetadataPaths(policy.userMetadataPaths);\n\t\t\tif ( policy.minAggregation ) {\n\t\t\t\tthis.withMinAggregation(policy.minAggregation);\n\t\t\t}\n\t\t\tif ( policy.minLocationPrecision ) {\n\t\t\t\tthis.withMinLocationPrecision(policy.minLocationPrecision);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithNodeIds(nodeIds) {\n\t\tthis.nodeIds = setOrNull(nodeIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node IDs.\n\t * \n\t * @param {number[]|Set<number>} nodeIds the node IDs to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddNodeIds(nodeIds) {\n\t\treturn this.withNodeIds(mergedSets(this.nodeIds, nodeIds));\n\t}\n\n\t/**\n\t * Set the node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithNodeMetadataPaths(nodeMetadataPaths) {\n\t\tthis.nodeMetadataPaths = setOrNull(nodeMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of node metadata paths.\n\t * \n\t * @param {string[]|Set<string>} nodeMetadataPaths the path expressions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddNodeMetadataPaths(nodeMetadataPaths) {\n\t\treturn this.withNodeMetadataPaths(mergedSets(this.nodeMetadataPaths, nodeMetadataPaths));\n\t}\n\n\t/**\n\t * Set the user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithUserMetadataPaths(userMetadataPaths) {\n\t\tthis.userMetadataPaths = setOrNull(userMetadataPaths);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a set of user metadata paths.\n\t * \n\t * @param {string[]|Set<string>} userMetadataPaths the path expressions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddUserMetadataPaths(userMetadataPaths) {\n\t\treturn this.withUserMetadataPaths(mergedSets(this.userMetadataPaths, userMetadataPaths));\n\t}\n\n\t/**\n\t * Set the source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithSourceIds(sourceIds) {\n\t\tthis.sourceIds = setOrNull(sourceIds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add source IDs.\n\t * \n\t * @param {string[]|Set<string>} sourceIds the source IDs to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddSourceIds(sourceIds) {\n\t\treturn this.withSourceIds(mergedSets(this.sourceIds, sourceIds));\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} aggregations the aggregations to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithAggregations(aggregations) {\n\t\tthis.aggregations = setOrNull(aggregations);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the aggregations.\n\t * \n\t * @param {module:domain~Aggregation[]|Set<module:domain~Aggregation>} aggregations the aggregations to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddAggregations(aggregations) {\n\t\treturn this.withAggregations(mergedSets(this.aggregations, aggregations));\n\t}\n\n\t/**\n\t * Set the location precisions.\n\t * \n\t * @param {module:domain~LocationPrecision[]|Set<module:domain~LocationPrecision>} locationPrecisions the precisions to use\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithLocationPrecisions(locationPrecisions) {\n\t\tthis.locationPrecisions = setOrNull(locationPrecisions);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add location precisions.\n\t * \n\t * @param {module:domain~LocationPrecision[]|Set<module:domain~LocationPrecision>} locationPrecisions the precisions to add\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\taddLocationPrecisions(locationPrecisions) {\n\t\treturn this.withLocationPrecisions(mergedSets(this.locationPrecisions, locationPrecisions));\n\t}\n\n\t/**\n\t * Set a minimum aggregation level.\n\t * \n\t * @param {module:domain~Aggregation} minAggregation the minimum aggregation level to set\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithMinAggregation(minAggregation) {\n\t\tthis.minAggregation = minAggregation;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of aggregation levels based on the configured `minAggregation`\n\t * and `aggregations` values.\n\t * \n\t * @returns {Set<module:domain~Aggregation>} the aggregation set\n\t * @private\n\t */\n\tbuildAggregations() {\n\t\tconst minAggregation = this.minAggregation;\n\t\tconst aggregations = this.aggregations;\n\t\tif ( !minAggregation && aggregations && aggregations.size > 0 ) {\n\t\t\treturn aggregations;\n\t\t} else if ( !minAggregation ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn Aggregation.minimumEnumSet(minAggregation, MIN_AGGREGATION_CACHE);\n\t}\n\n\t/**\n\t * Treat the configured `locationPrecisions` set as a single\n\t * minimum value or a list of exact values.\n\t * \n\t * By default if `locationPrecisions` is configured with a single\n\t * value it will be treated as a <em>minimum</em> value, and any\n\t * {@link module:domain~LocationPrecision} with a {@link module:domain~LocationPrecision#precision} equal \n\t * to or higher than that value's level will be included in the generated\n\t * {@link module:domain~SecurityPolicy#locationPrecisions} set. Set this to\n\t * `null` to disable that behavior and treat\n\t * `locationPrecisions` as the exact values to include in the\n\t * generated {@link module:domain~SecurityPolicy#locationPrecisions} set.\n\t * \n\t * @param {module:domain~LocationPrecision|null} minLocationPrecision\n\t *        `null` to treat configured location precision values\n\t *        as-is, or else the minimum threshold\n\t * @returns {module:domain~SecurityPolicyBuilder} this object\n\t */\n\twithMinLocationPrecision(minLocationPrecision) {\n\t\tthis.minLocationPrecision = minLocationPrecision;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Build the effective aggregation level set from the policy settings.\n\t * \n\t * This computes a set of location precision levels based on the configured `minLocationPrecision`\n\t * and `locationPrecisions` values.\n\t * \n\t * @returns {Set<module:domain~LocationPrecision>} the precision set\n\t * @private\n\t */\n\tbuildLocationPrecisions() {\n\t\tconst minLocationPrecision = this.minLocationPrecision;\n\t\tconst locationPrecisions = this.locationPrecisions;\n\t\tif ( !minLocationPrecision && locationPrecisions && locationPrecisions.size > 0 ) {\n\t\t\treturn locationPrecisions;\n\t\t} else if ( !minLocationPrecision ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn LocationPrecision.minimumEnumSet(minLocationPrecision, MIN_LOCATION_PRECISION_CACHE);\n\t}\n\n\t/**\n\t * Create a new {@link SecurityPolicy} out of the properties configured on this builder.\n\t * \n\t * @returns {module:domain~SecurityPolicy} the new policy instance\n\t */\n\tbuild() {\n\t\treturn new SecurityPolicy(this.nodeIds, this.sourceIds, \n\t\t\t\tthis.buildAggregations(), this.minAggregation,\n\t\t\t\tthis.buildLocationPrecisions(), this.minLocationPrecision,\n\t\t\t\tthis.nodeMetadataPaths, this.userMetadataPaths);\n\t}\n}\n\nexport default SecurityPolicy;\nexport { SecurityPolicyBuilder };","/**\n * A case-insensitive string key multi-value map object.\n * @alias module:util~MultiMap\n */\nclass MultiMap {\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {*} [values] an object who's enumerable properties will be added to this map\n\t */\n\tconstructor(values) {\n\t\tthis.mappings = {}; // map of lower-case header names to {name:X, val:[]} values\n\t\tthis.mappingNames = []; // to keep insertion order\n\t\tif ( values ) {\n\t\t\tthis.putAll(values);\n\t\t}\n\t}\n\n\t/**\n\t * Add a value.\n\t * \n\t * This method will append values to existing keys.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to add\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tadd(key, value) {\n\t\treturn addValue(this, key, value);\n\t}\n\n\t/**\n\t * Set a value.\n\t * \n\t * This method will replace any existing values with just <code>value</code>.\n\t * \n\t * @param {string} key the key to use\n\t * @param {*} value the value to set\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tput(key, value) {\n\t\treturn addValue(this, key, value, true);\n\t}\n\n\t/**\n\t * Set multiple values.\n\t * \n\t * This method will replace any existing values with those provided on <code>values</code>.\n\t * \n\t * @param {*} values an object who's enumerable properties will be added to this map\n\t * @returns {module:util~MutliMap} this object\n\t */\n\tputAll(values) {\n\t\tfor ( let key in values ) {\n\t\t\tif ( values.hasOwnProperty(key) ) {\n                addValue(this, key, values[key], true);\n            }\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the values associated with a key.\n\t * \n\t * @param {string} key the key of the values to get\n\t * @returns {object[]} the array of values associated with the key, or <code>undefined</code> if not available\n\t */\n\tvalue(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst mapping = this.mappings[keyLc];\n\t\treturn (mapping ? mapping.val : undefined);\n\t}\n\n\t/**\n\t * Get the first avaialble value assocaited with a key.\n\t * \n\t * @param {string} key the key of the value to get\n\t * @returns {*} the first available value associated with the key, or <code>undefined</code> if not available\n\t */\n\tfirstValue(key) {\n\t\tconst values = this.value(key);\n\t\treturn (values && values.length > 0 ? values[0] : undefined);\n\t}\n\n\t/**\n\t * Remove all properties from this map.\n\t * \n\t * @returns {module:util~MutliMap} this object\n\t */\n\tclear() {\n\t\tthis.mappingNames.length = 0;\n\t\tthis.mappings = {};\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all values associated with a key.\n\t * \n\t * @param {string} key the key of the values to remove\n\t * @returns {object[]} the removed values, or <code>undefined</code> if no values were present for the given key\n\t */\n\tremove(key) {\n\t\tconst keyLc = key.toLowerCase();\n\t\tconst index = this.mappingNames.indexOf(keyLc);\n\t\tconst result = this.mappings[keyLc];\n\t\tif ( result ) {\n\t\t\tdelete this.mappings[keyLc];\n\t\t\tthis.mappingNames.splice(index, 1);\n\t\t}\n\t\treturn (result ? result.val : undefined);\n\t}\n\n\t/**\n\t * Get the number of entries in this map.\n\t * \n\t * @returns {number} the number of entries in the map\n\t */\n\tsize() {\n\t\treturn this.mappingNames.length;\n\t}\n\n\t/**\n\t * Test if the map is empty.\n\t * \n\t * @returns {boolean} <code>true</code> if there are no entries in this map\n\t */\n\tisEmpty() {\n\t\treturn this.size() < 1;\n\t}\n\n\t/**\n\t * Test if there are any values associated with a key.\n\t * \n\t * @param {string} key the key to test\n\t * @returns {boolean} <code>true</code> if there is at least one value associated with the key\n\t */\n\tcontainsKey(key) {\n\t\treturn (this.value(key) !== undefined);\n\t}\n\n\t/**\n\t * Get an array of all keys in this map.\n\t * \n\t * @returns {string[]} array of keys in this map, or an empty array if the map is empty\n\t */\n\tkeySet() {\n\t\tconst result = [];\n\t\tconst len = this.size();\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tresult.push(this.mappings[this.mappingNames[i]].key);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * Add/replace values on a map.\n * \n * @param {module:util~MutliMap} map the map to mutate \n * @param {string} key the key to change \n * @param {*} value the value to add\n * @param {boolean} replace if <code>true</code> then replace all existing values;\n *                          if <code>false</code> append to any existing values\n * @returns {module:util~MutliMap} the passed in <code>map</code>\n * @private\n */\nfunction addValue(map, key, value, replace) {\n\tconst keyLc = key.toLowerCase();\n\tlet mapping = map.mappings[keyLc];\n\tif ( !mapping ) {\n\t\tmapping = {key:key, val:[]};\n\t\tmap.mappings[keyLc] = mapping;\n\t\tmap.mappingNames.push(keyLc);\n\t}\n\tif ( replace ) {\n\t\tmapping.val.length = 0;\n\t}\n\tif ( Array.isArray(value) ) {\n\t\tconst len = value.length;\n\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\tmapping.val.push(value[i]);\n\t\t}\n\t} else {\n\t\tmapping.val.push(value);\n\t}\n\treturn map;\n}\n\nexport default MultiMap;\n","function createGetter(me, prop) {\n\treturn function() { return me.map[prop]; };\n}\n\nfunction createSetter(me, prop) {\n\treturn function(value) { me.map[prop] = value; };\n}\n\nfunction createProperty(me, prop) {\n\tObject.defineProperty(me, prop, {\n\t\tenumerable : true,\n\t\tconfigurable : true,\n\t\tget : createGetter(me, prop),\n\t\tset : createSetter(me, prop)\n\t});\n}\n\n/**\n * A configuration utility object.\n *\n * Properties can be get/set by using the {@link module:util~Configuration#value} function.\n * @alias module:util~Configuration\n */\nclass Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * For any properties passed on `initialMap`, {@link module:util~Configuration#value} will\n\t * be called so those properties are defined on this instance.\n\t *\n\t * @param {object} initialMap the optional initial properties to store\n\t */\n\tconstructor(initialMap) {\n\t\tthis.map = {};\n\t\tif ( initialMap !== undefined ) {\n\t\t\tthis.values(initialMap);\n\t\t}\n\t}\n\n\t/**\n\t * Test if a key is truthy.\n\t *\n\t * @param {string} key the key to test\n\t * @returns {boolean} `true` if the key is enabled\n\t */\n\tenabled(key) {\n\t\tif ( key === undefined ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !!this.map[key];\n\t}\n\n\t/**\n\t * Set or toggle the enabled status of a given key.\n\t *\n\t * <p>If the `enabled` parameter is not passed, then the enabled\n\t * status will be toggled to its opposite value.</p>\n\t *\n\t * @param {string} key they key to set\n\t * @param {boolean} enabled the optional enabled value to set\n\t * @returns {module:util~Configuration} this object to allow method chaining\n\t */\n\ttoggle(key, enabled) {\n\t\tvar val = enabled;\n\t\tif ( key === undefined ) {\n\t\t\treturn this;\n\t\t}\n\t\tif ( val === undefined ) {\n\t\t\t// in 1-argument mode, toggle current value\n\t\t\tval = (this.map[key] === undefined);\n\t\t}\n\t\treturn this.value(key, (val === true ? true : null));\n\t}\n\n\t/**\n\t * Get or set a configuration value.\n\t *\n\t * @param {string} key The key to get or set the value for\n\t * @param {object} [newValue] If defined, the new value to set for the given `key`.\n\t *                            If `null` then the value will be removed.\n\t * @returns {object} If called as a getter, the associated value for the given `key`,\n\t *                   otherwise this object.\n\t */\n\tvalue(key, newValue) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn this.map[key];\n\t\t}\n\t\tif ( newValue === null ) {\n\t\t\tdelete this.map[key];\n\t\t\tif ( this.hasOwnProperty(key) ) {\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t} else {\n\t\t\tthis.map[key] = newValue;\n\t\t\tif ( !this.hasOwnProperty(key) ) {\n\t\t\t\tcreateProperty(this, key);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set multiple properties.\n\t * \n\t * @param {object} [newMap] a map of values to set\n\t * @returns {object} if called as a getter, all properties of this object copied into a simple object;\n\t *                   otherwise this object\n\t */\n\tvalues(newMap) {\n\t\tif ( newMap ) {\n\t\t\tfor ( let prop in newMap ) {\n\t\t\t\tif ( newMap.hasOwnProperty(prop) ) {\n\t\t\t\t\tthis.value(prop, newMap[prop]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn Object.assign({}, this.map);\n\t}\n\n}\n\nexport default Configuration;\n","/**\n * Parse the query portion of a URL string, and return a parameter object for the\n * parsed key/value pairs.\n *\n * <p>Multiple parameters of the same name will be stored as an array on the returned object.</p>\n *\n * @param {string} search the query portion of the URL, which may optionally include\n *                        the leading `?` character\n * @return {object} the parsed query parameters, as a parameter object\n * @alias module:net~urlQueryParse\n */\nfunction urlQueryParse(search) {\n    var params = {};\n    var pairs;\n    var pair;\n    var i, len, k, v;\n    if ( search !== undefined && search.length > 0 ) {\n        // remove any leading ? character\n        if ( search.match(/^\\?/) ) {\n            search = search.substring(1);\n        }\n        pairs = search.split('&');\n        for ( i = 0, len = pairs.length; i < len; i++ ) {\n            pair = pairs[i].split('=', 2);\n            if ( pair.length === 2 ) {\n                k = decodeURIComponent(pair[0]);\n                v = decodeURIComponent(pair[1]);\n                if ( params[k] ) {\n                    if ( !Array.isArray(params[k]) ) {\n                        params[k] = [params[k]]; // turn into array;\n                    }\n                    params[k].push(v);\n                } else {\n                    params[k] = v;\n                }\n            }\n        }\n    }\n    return params;\n}\n\n/**\n * Encode the properties of an object as a URL query string.\n *\n * <p>If an object property has an array value, multiple URL parameters will be encoded for that property.</p>\n *\n * <p>The optional `encoderFn` argument is a function that accepts a string value\n * and should return a URI-safe string for that value.</p>\n *\n * @param {object} parameters an object to encode as URL parameters\n * @param {function} encoderFn an optional function to encode each URI component with;\n *                             if not provided the built-in `encodeURIComponent()` function\n *                             will be used\n * @return {string} the encoded query parameters\n * @alias module:net~urlQueryEncode\n */\nfunction urlQueryEncode(parameters, encoderFn) {\n    var result = '',\n        prop,\n        val,\n        i,\n        len;\n    const encoder = (encoderFn || encodeURIComponent);\n    function handleValue(k, v) {\n        if ( result.length ) {\n            result += '&';\n        }\n        result += encoder(k) + '=' + encoder(v);\n    }\n    if ( parameters ) {\n        for ( prop in parameters ) {\n            if ( parameters.hasOwnProperty(prop) ) {\n                val = parameters[prop];\n                if ( Array.isArray(val) ) {\n                    for ( i = 0, len = val.length; i < len; i++ ) {\n                        handleValue(prop, val[i]);\n                    }\n                } else {\n                    handleValue(prop, val);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport { urlQueryParse, urlQueryEncode };\n\nexport default {\n    urlQueryParse : urlQueryParse,\n    urlQueryEncode : urlQueryEncode,\n}\n","import Hex from 'crypto-js/enc-hex';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport SHA256 from 'crypto-js/sha256';\nimport { parse as uriParse } from 'uri-js';\n\nimport { iso8601Date } from '../format/date';\nimport MultiMap from '../util/multiMap';\nimport Environment from './environment';\nimport { HttpMethod, default as HttpHeaders } from './httpHeaders';\nimport { urlQueryParse } from './urlQuery';\n\n/**\n * A builder object for the SNWS2 HTTP authorization scheme.\n *\n * This builder can be used to calculate a one-off header value, for example:\n *\n * ```\n * let authHeader = new AuthorizationV2Builder(\"my-token\")\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n * \n * Or the builder can be re-used for a given token:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .build(\"my-token-secret\");\n * ```\n *\n * Additionally, a signing key can be generated and re-used for up to 7 days:\n *\n * ```\n * // create a builder for a token\n * let builder = new AuthorizationV2Builder(\"my-token\")\n *   .saveSigningKey(\"my-token-secret\");\n *\n * // elsewhere, re-use the builder for repeated requests\n * builder.reset()\n *     .path(\"/solarquery/api/v1/pub/...\")\n *     .buildWithSavedKey(); // note previously generated key used\n * ```\n * @alias module:net~AuthorizationV2Builder\n */\nclass AuthorizationV2Builder {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} token the auth token to use\n     * @param {module:net~Environment} [environment] the environment to use; if not provided a default environment will be created \n     */\n    constructor(token, environment) {\n\n        /**\n         * The SolarNet auth token value.\n         * @member {string}\n         */\n        this.tokenId = token;\n\n        /**\n         * The SolarNet environment.\n         * @member {module:net~Environment}\n         */\n        this.environment = (environment || new Environment());\n\n        this.reset();\n    }\n\n    /**\n     * Reset to defalut property values.\n     *\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    reset() {\n        this.contentDigest = null;\n        this.httpHeaders = new HttpHeaders();\n        this.parameters = new MultiMap();\n        this.signedHeaderNames = [];\n        var host = this.environment.host;\n        if ( this.environment.protocol === 'https' || this.environment.port != 80 ) {\n            host += ':' +this.environment.port;\n        }\n        return this.method(HttpMethod.GET).host(host).path('/').date(new Date());\n    }\n\n    /**\n     * Compute and cache the signing key.\n     *\n     * Signing keys are derived from the token secret and valid for 7 days, so\n     * this method can be used to compute a signing key so that {@link module:net~AuthorizationV2Builder#build}\n     * can be called later. The signing date will be set to whatever date is\n     * currently configured via {@link module:net~AuthorizationV2Builder#date}, which defaults to the\n     * current time for newly created builder instances.\n     *\n     * @param {string} tokenSecret the secret to sign the digest with\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    saveSigningKey(tokenSecret) {\n        this.signingKey = this.computeSigningKey(tokenSecret);\n        return this;\n    }\n\n    /**\n     * Set the HTTP method (verb) to use.\n     *\n     * @param {string} val the method to use; see the {@link HttpMethod} enum for possible values\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    method(val) {\n        this.httpMethod = val;\n        return this;\n    }\n\n    /**\n     * Set the HTTP host.\n     *\n     * This is a shortcut for calling `HttpHeaders#put(HttpHeaders.HOST, val)`.\n     *\n     * @param {string} val the HTTP host value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    host(val) {\n        this.httpHeaders.put(HttpHeaders.HOST, val);\n        return this;\n    }\n\n    /**\n     * Set the HTTP request path to use.\n     *\n     * @param {string} val the request path to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    path(val) {\n        this.requestPath = val;\n        return this;\n    }\n\n    /**\n     * Set the host, path, and query parameters via a URL string.\n     *\n     * @param {string} url the URL value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    url(url) {\n        const uri = uriParse(url);\n        let host = uri.host;\n        if ( uri.port && ((uri.scheme === 'https' && uri.port !== 443) || (uri.scheme === 'http' && uri.port !== 80)) ) {\n            host += ':' + uri.port;\n        }\n        if ( uri.query ) {\n            this.queryParams(urlQueryParse(uri.query));\n        }\n        return this.host(host).path(uri.path);\n    }\n\n    /**\n     * Set the HTTP content type.\n     *\n     * This is a shortcut for calling {@link HttpHeaders#put} with the key {@link HttpHeaders#CONTENT_TYPE}.\n     *\n     * @param {string} val the HTTP content type value to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    contentType(val) {\n        this.httpHeaders.put(HttpHeaders.CONTENT_TYPE, val);\n        return this;\n    }\n\n    /**\n     * Set the authorization request date.\n     *\n     * @param {Date} val the date to use; typically the current time, e.g. `new Date()`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    date(val) {\n        this.requestDate = (val ? val : new Date());\n        return this;\n    }\n\n    /**\n     * The authorization request date as a HTTP header string value.\n     *\n     * @readonly\n     * @type {string}\n     */\n    get requestDateHeaderValue() {\n        return this.requestDate.toUTCString();\n    }\n\n    /**\n     * Control using the `X-SN-Date` HTTP header versus the `Date` header.\n     *\n     * <p>Set to `true` to use the `X-SN-Date` header, `false` to use \n     * the `Date` header. This will return `true` if `X-SN-Date` has been\n     * added to the `signedHeaderNames` property or has been added to the `httpHeaders`\n     * property.</p>\n     *\n     * @type {boolean}\n     */\n    get useSnDate() {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        return existingIndex >= 0 || this.httpHeaders.containsKey(HttpHeaders.X_SN_DATE);\n    }\n\n    set useSnDate(enabled) {\n        let signedHeaders = this.signedHeaderNames;\n        let existingIndex = (Array.isArray(signedHeaders)\n            ? signedHeaders.findIndex(caseInsensitiveEqualsFn(HttpHeaders.X_SN_DATE))\n            : -1);\n        if ( enabled && existingIndex < 0 ) {\n            signedHeaders = (signedHeaders\n                ? signedHeaders.concat(HttpHeaders.X_SN_DATE)\n                : [HttpHeaders.X_SN_DATE]);\n            this.signedHeaderNames = signedHeaders;\n        } else if ( !enabled && existingIndex >= 0 ) {\n            signedHeaders.splice(existingIndex, 1);\n            this.signedHeaderNames = signedHeaders;\n        }\n\n        // also clear from httpHeaders\n        this.httpHeaders.remove(HttpHeaders.X_SN_DATE);\n    }\n\n    /**\n     * Set the `useSnDate` property.\n     *\n     * @param {boolean} enabled `true` to use the `X-SN-Date` header, `false` to use `Date`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    snDate(enabled) {\n        this.useSnDate = enabled;\n        return this;\n    }\n\n    /**\n     * Set a HTTP header value.\n     *\n     * This is a shortcut for calling `HttpHeaders#put(headerName, val)`.\n     *\n     * @param {string} headerName the header name to set\n     * @param {string} headerValue the header value to set\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    header(headerName, headerValue) {\n        this.httpHeaders.put(headerName, headerValue);\n        return this;\n    }\n\n    /**\n     * Set the HTTP headers to use with the request.\n     *\n     * The headers object must include all headers necessary by the\n     * authentication scheme, and any additional headers also configured via\n     * {@link module:net~AuthorizationV2Builder#signedHttpHeaders}.\n     *\n     * @param {HttpHeaders} headers the HTTP headers to use\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    headers(headers) {\n        this.httpHeaders = headers;\n        return this;\n    }\n\n    /**\n     * Set the HTTP `GET` query parameters, or `POST` form-encoded\n     * parameters.\n     *\n     * @param {MultiMap|Object} params the parameters to use, as either a {@link MultiMap} or simple `Object`\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    queryParams(params) {\n        if ( params instanceof MultiMap ) {\n            this.parameters = params;\n        } else {\n            this.parameters.putAll(params);\n        }\n        return this;\n    }\n\n    /**\n     * Set additional HTTP header names to sign with the authentication.\n     *\n     * @param {sring[]} signedHeaderNames additional HTTP header names to include in the signature\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    signedHttpHeaders(signedHeaderNames) {\n        this.signedHeaderNames = signedHeaderNames;\n        return this;\n    }\n\n    /**\n     * Set the HTTP request body content SHA-256 digest value.\n     *\n     * @param {string|module:crypto-js/enc-hex~WordArray} digest the digest value to use; if a string it is assumed to be Hex encoded\n     * @returns {module:net~AuthorizationV2Builder} this object\n     */\n    contentSHA256(digest) {\n        var contentDigest;\n        if ( typeof digest === 'string' ) {\n            contentDigest = Hex.parse(digest);\n        } else {\n            contentDigest = digest;\n        }\n        this.contentDigest = contentDigest;\n        return this;\n    }\n\n    /**\n     * Compute the canonical query parameters.\n     * \n     * @returns {string} the canonical query parameters string value\n     */\n    canonicalQueryParameters() {\n        const keys = this.parameters.keySet();\n        if ( keys.length < 1 ) {\n            return '';\n        }\n        keys.sort();\n        const len = keys.length;\n        var first = true,\n            result = '';\n        for ( let i = 0; i < len; i += 1 ) {\n            let key = keys[i];\n            let vals = this.parameters.value(key);\n            const valsLen = vals.length;\n            for ( let j = 0; j < valsLen; j += 1 ) {\n                if ( first ) {\n                    first = false;\n                } else {\n                    result += '&';\n                }\n                result += _encodeURIComponent(key) + '=' + _encodeURIComponent(vals[j]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical HTTP headers string value.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical headers string value\n     */\n    canonicalHeaders(sortedLowercaseHeaderNames) {\n        var result = '',\n            headerName,\n            headerValue;\n        const len = sortedLowercaseHeaderNames.length;\n        for ( let i = 0; i < len; i += 1 ) {\n            headerName = sortedLowercaseHeaderNames[i];\n            if ( \"date\" === headerName ||  \"x-sn-date\" === headerName ) {\n                headerValue = this.requestDate.toUTCString();\n            } else {\n                headerValue = this.httpHeaders.firstValue(headerName);\n            }\n            result += headerName +':' + (headerValue ? headerValue.trim() : '') + '\\n';\n        }\n        return result;\n    }\n\n    /**\n     * Compute the canonical signed header names value from an array of HTTP header names.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to include\n     * @returns {string} the canonical signed header names string value\n     * @private\n     */\n    canonicalSignedHeaderNames(sortedLowercaseHeaderNames) {\n        return sortedLowercaseHeaderNames.join(';');\n    }\n\n    /**\n     * Get the canonical request content SHA256 digest, hex encoded.\n     * \n     * @returns {string} the hex-encoded SHA256 digest of the request content\n     */\n    canonicalContentSHA256() {\n        return (this.contentDigest\n            ? Hex.stringify(this.contentDigest)\n            : AuthorizationV2Builder.EMPTY_STRING_SHA256_HEX);\n    }\n\n    /**\n     * Compute the canonical HTTP header names to include in the signature.\n     * \n     * @returns {string[]} the sorted, lower-cased HTTP header names to include\n     */\n    canonicalHeaderNames() {\n        const httpHeaders = this.httpHeaders;\n        const signedHeaderNames = this.signedHeaderNames;\n\n        // use a MultiMap to take advantage of case-insensitive keys\n        const map = new MultiMap();\n\n        map.put(HttpHeaders.HOST, true);\n        if ( this.useSnDate ) {\n            map.put(HttpHeaders.X_SN_DATE, true);\n        } else {\n            map.put(HttpHeaders.DATE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_MD5) ) {\n            map.put(HttpHeaders.CONTENT_MD5, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.CONTENT_TYPE) ) {\n            map.put(HttpHeaders.CONTENT_TYPE, true);\n        }\n        if ( httpHeaders.containsKey(HttpHeaders.DIGEST) ) {\n            map.put(HttpHeaders.DIGEST, true);\n        }\n        if ( signedHeaderNames && signedHeaderNames.length > 0 ) {\n            signedHeaderNames.forEach(e => map.put(e, true));\n        }\n        return lowercaseSortedArray(map.keySet());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request.\n     * \n     * @returns {string} the canonical request data\n     */\n    buildCanonicalRequestData() {\n        return this.computeCanonicalRequestData(this.canonicalHeaderNames());\n    }\n\n    /**\n     * Compute the canonical request data that will be included in the data to sign with the request,\n     * using a specific set of HTTP header names to sign.\n     * \n     * @param {string[]} sortedLowercaseHeaderNames the sorted, lower-cased HTTP header names to sign with the request\n     * @returns {string} the canonical request data\n     * @private\n     */\n    computeCanonicalRequestData(sortedLowercaseHeaderNames) {\n        // 1: HTTP verb\n        var result = this.httpMethod +'\\n';\n\n        // 2: Canonical URI\n        result += this.requestPath + '\\n';\n\n        // 3: Canonical query string\n        result += this.canonicalQueryParameters() + '\\n';\n\n        // 4: Canonical headers\n        result += this.canonicalHeaders(sortedLowercaseHeaderNames); // already includes newline\n\n        // 5: Signed header names\n        result += this.canonicalSignedHeaderNames(sortedLowercaseHeaderNames) + '\\n';\n\n        // 6: Content SHA256, hex encoded\n        result += this.canonicalContentSHA256();\n\n        return result;\n    }\n\n    /**\n     * Compute the signing key, from a secret key.\n     * \n     * @param {string} secretKey the secret key string \n     * @returns {CryptoJS#Hash} the computed key\n     * @private\n     */\n    computeSigningKey(secretKey) {\n        const datestring = iso8601Date(this.requestDate);\n        const key = HmacSHA256('snws2_request', HmacSHA256(datestring, 'SNWS2' + secretKey));\n        return key;\n    }\n\n    /**\n     * Compute the data to be signed by the signing key.\n     * \n     * @param {string} canonicalRequestData the request data, returned from {@link module:net~AuthorizationV2Builder#buildCanonicalRequestData}\n     * @returns {string} the data to sign\n     * @private\n     */\n    computeSignatureData(canonicalRequestData) {\n        /*- signature data is like:\n\n            SNWS2-HMAC-SHA256\\n\n            20170301T120000Z\\n\n            Hex(SHA256(canonicalRequestData))\n        */\n        return \"SNWS2-HMAC-SHA256\\n\" + iso8601Date(this.requestDate, true) + \"\\n\"\n                + Hex.stringify(SHA256(canonicalRequestData));\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured properties\n     * on the builder, using the provided signing key.\n     * \n     * @param {CryptoJS#Hash} signingKey the key to sign the computed signature data with\n     * @returns {string} the SNWS2 HTTP Authorization header value\n     * @private\n     */\n    buildWithKey(signingKey) {\n        const sortedHeaderNames = this.canonicalHeaderNames();\n        const canonicalReq = this.computeCanonicalRequestData(sortedHeaderNames);\n        const signatureData = this.computeSignatureData(canonicalReq);\n        const signature = Hex.stringify(HmacSHA256(signatureData, signingKey));\n        let result = 'SNWS2 Credential=' + this.tokenId\n            + ',SignedHeaders=' + sortedHeaderNames.join(';')\n            + ',Signature=' +signature;\n        return result;\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured\n     * properties on the builder, computing a new signing key based on the\n     * configured {@link module:net~AuthorizationV2Builder#date}.\n     *\n     * @param {string} tokenSecret the secret to sign the authorization with\n     * @return {string} the SNWS2 HTTP Authorization header value\n     */\n    build(tokenSecret) {\n        const signingKey = this.computeSigningKey(tokenSecret);\n        return this.buildWithKey(signingKey);\n    }\n\n    /**\n     * Compute a HTTP `Authorization` header value from the configured\n     * properties on the builder, using a signing key configured from a previous\n     * call to {@link module:net~AuthorizationV2Builder#saveSigningKey}.\n     *\n     * @return {string} the SNWS2 HTTP Authorization header value.\n     */\n    buildWithSavedKey() {\n        return this.buildWithKey(this.signingKey);\n    }\n\n}\n\n/**\n * @function stringMatchFn\n * @param {string} e the element to test\n * @returns {boolean} `true` if the element matches\n * @private\n */\n\n\n/**\n * Create a case-insensitive string matching function.\n * \n * @param {string} value the string to perform the case-insensitive comparison against\n * @returns {stringMatchFn} a matching function that performs a case-insensitive comparison\n * @private\n */\nfunction caseInsensitiveEqualsFn(value) {\n    const valueLc = value.toLowerCase();\n    return e => valueLc === e.toString().toLowerCase();\n}\n\n/**\n * Create a new array of lower-cased and sorted strings from another array.\n * \n * @param {string[]} items the items to lower-case and sort\n * @returns {string[]} a new array of the lower-cased and sorted items\n * @private\n */\nfunction lowercaseSortedArray(items) {\n    const sortedItems = [];\n    const len = items.length;\n    for ( let i = 0; i < len; i += 1 ) {\n        sortedItems.push(items[i].toLowerCase());\n    }\n    sortedItems.sort();\n    return sortedItems;\n}\n\nfunction _hexEscapeChar(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n}\n\nfunction _encodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, _hexEscapeChar);\n}\n\nObject.defineProperties(AuthorizationV2Builder, {\n    /**\n     * The hex-encoded value for an empty SHA256 digest value.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    EMPTY_STRING_SHA256_HEX:    { value: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' },\n\n    /**\n     * The SolarNetwork V2 authorization scheme.\n     * \n     * @memberof AuthorizationV2Builder\n     * @readonly\n     * @type {string}\n     */\n    SNWS2_AUTH_SCHEME:          { value: 'SNWS2' },\n});\n\nexport default AuthorizationV2Builder;\n","/**\n * An enumerated object base class.\n * \n * This class is essentially abstract, and must be extended by another\n * class that overrides the {@link module:util~Enum.enumValues} method.\n * \n * @abstract\n * @alias module:util~Enum\n */\nclass Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        this._name = name;\n        if ( this.constructor === Enum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the enum name.\n     * \n     * @returns {string} the  name\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Get all enum values.\n     * \n     * This method must be overridden by subclasses to return something meaningful.\n     * This implementation returns an empty array.\n     * \n     * @abstract\n     * @returns {module:util~Enum[]} get all enum values\n     */\n    static enumValues() {\n        return [];\n    }\n\n    /**\n     * This method takes an array of enums and turns them into a mapped object, using the enum\n     * `name` as object property names.\n     * \n     * @param {module:util~Enum[]} enums the enum list to turn into a value object\n     * @returns {object} an object with enum `name` properties with associated enum values \n     */\n    static enumsValue(enums) {\n        return Object.freeze(enums.reduce((obj, e) => {\n            obj[e.name] = e;\n            return obj;\n        }, {}));\n    }\n}\n\nexport default Enum;\n","import Enum from './enum';\n\n/**\n * An immutable enum-like object with an associated comparable value.\n *\n * This class is essentially abstract, and must be extended by another\n * class that overrides the inerited {@link module:util~Enum.enumValues} method.\n * \n * @abstract\n * @extends module:util~Enum\n * @alias module:util~ComparableEnum\n */\nclass ComparableEnum extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     * @param {number} value the comparable value\n     */\n    constructor(name, value) {\n        super(name);\n        this._value = value;\n        if ( this.constructor === ComparableEnum ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the comparable value.\n     * \n     * @returns {number} the value\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * Compare two ComparableEnum objects based on their <code>value</code> values.\n     * \n     * @param {ComparableEnum} other the object to compare to\n     * @returns {number} <code>-1</code> if <code>this.value</code> is less than <code>other.value</code>, \n     *                   <code>1</code> if <code>this.value</code> is greater than <code>other.value</code>,\n     *                   <code>0</code> otherwise (when the values are equal) \n     */\n    compareTo(other) {\n        return this.value < other.value ? -1 : this.value > other.value ? 1 : 0;\n    }\n\n    /**\n     * Compute a complete set of enum values based on a minimum enum and/or set of enums.\n     * \n     * If <code>cache</code> is provided, then results computed via <code>minAggregation</code> \n     * will be cached there, and subsequent calls will returned the cached result when appropriate.\n     * \n     * @param {ComparableEnum} [minEnum] a minimum enum value\n     * @param {Map<string, Set<ComparableEnum>>} [cache] a cache of computed values\n     * @returns {Set<ComparableEnum>|null} the computed set, or <code>null</code> if no values match\n     */\n    static minimumEnumSet(minEnum, cache) {\n        if ( !minEnum ) {\n            return null;\n        }\n        let result = (cache ? cache.get(minEnum.name) : undefined);\n        if ( result ) {\n            return result;\n        }\n        result = new Set();\n        for ( const agg of minEnum.constructor.enumValues() ) {\n            if ( agg.compareTo(minEnum) > -1 ) {\n                result.add(agg);\n            }\n        }\n        if ( cache ) {\n            cache.set(minEnum.name, result);\n        }\n        return (result.size > 0 ? result : null);\n    }\n\n}\n\nexport default ComparableEnum;\n","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A named aggregation.\n * \n * @extends module:util~ComparableEnum\n * @alias module:domain~Aggregation\n */\nclass Aggregation extends ComparableEnum {\n\n\t/**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} level a relative aggregation level value \n     */\n    constructor(name, level) {\n\t\tsuper(name, level);\n\t\tif ( this.constructor === Aggregation ) {\n\t\t\tObject.freeze(this);\n\t\t}\n    }\n\n    /**\n     * Get the aggregate level value.\n\t * \n\t * This is an alias for {@link module:util~ComparableEnum#value}.\n     */\n    get level() {\n        return this.value;\n\t}\n\t\n\t/**\n\t * Get the {@link module:domain~Aggregations} values.\n\t * \n\t * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AggregationValues;\n\t}\n\n}\n\n\nconst AggregationValues = Object.freeze([\n\tnew Aggregation('Minute', 60),\n\tnew Aggregation('FiveMinute', 60 * 5),\n\tnew Aggregation('TenMinute', 60 * 10),\n\tnew Aggregation('FifteenMinute', 60 * 15),\n\tnew Aggregation('ThirtyMinute', 60 * 30),\n\tnew Aggregation('Hour', 3600),\n\tnew Aggregation('HourOfDay', 3600),\n\tnew Aggregation('SeasonalHourOfDay', 3600),\n\tnew Aggregation('Day', 86400),\n\tnew Aggregation('DayOfWeek', 86400),\n\tnew Aggregation('SeasonalDayOfWeek', 86400),\n\tnew Aggregation('Week', 604800),\n\tnew Aggregation('WeekOfYear', 604800),\n\tnew Aggregation('Month', 2419200),\n\tnew Aggregation('RunningTotal', Number.MAX_SAFE_INTEGER),\n]);\n\n/**\n * The enumeration of supported Aggregation values.\n * \n * @readonly\n * @enum {module:domain~Aggregation}\n * @property {module:domain~Aggregation} Minute minute\n * @property {module:domain~Aggregation} FiveMinute 5 minutes\n * @property {module:domain~Aggregation} TenMinute 10 minutes\n * @property {module:domain~Aggregation} FifeteenMinute 15 minutes\n * @property {module:domain~Aggregation} ThirtyMinute 30 minutes\n * @property {module:domain~Aggregation} Hour an hour\n * @property {module:domain~Aggregation} HourOfDay an hour of a day, e.g. 1-24\n * @property {module:domain~Aggregation} SeasonalHourOfDay an hour of a day, further grouped into 4 seasons\n * @property {module:domain~Aggregation} Day a day\n * @property {module:domain~Aggregation} DayOfWeek a day of the week, e.g. Monday - Sunday\n * @property {module:domain~Aggregation} SeasonalDayOfWeek a day of the week, further grouped into 4 seasons\n * @property {module:domain~Aggregation} Week a week\n * @property {module:domain~Aggregation} WeekOfYear the week within a year, e.g. 1 - 52\n * @property {module:domain~Aggregation} Month a month\n * @property {module:domain~Aggregation} RunningTotal a complete running total over a time span\n * @alias module:domain~Aggregations\n */\nconst Aggregations = Aggregation.enumsValue(AggregationValues);\n\nexport default Aggregations;\nexport { Aggregation };","import Enum from '../util/enum';\n\n/**\n * An auth token status.\n * \n * @extends module:util~Enum\n * @alias module:domain~AuthTokenStatus\n */\nexport class AuthTokenStatus extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenStatus ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link module:domain~AuthTokenStatuses} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenStatusValues;\n\t}\n\n}\n\nconst AuthTokenStatusValues = Object.freeze([\n\tnew AuthTokenStatus('Active'),\n    new AuthTokenStatus('Disabled'),\n]);\n\n/**\n * The enumeration of supported AuthTokenStatus values.\n * \n * @readonly\n * @enum {module:domain~AuthTokenStatus}\n * @property {module:domain~AuthTokenStatus} Active the token is active and usable\n * @property {module:domain~AuthTokenStatus} Disabled the token is disabled and not usable\n * @alias module:domain~AuthTokenStatuses\n */\nconst AuthTokenStatuses = AuthTokenStatus.enumsValue(AuthTokenStatusValues);\n\nexport default AuthTokenStatuses;\n","import Enum from '../util/enum';\n\n/**\n * A named auth token type.\n * \n * @extends module:util~Enum\n * @alias module:domain~AuthTokenType\n */\nexport class AuthTokenType extends Enum {\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === AuthTokenType ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link AuthTokenTypes} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn AuthTokenTypeValues;\n\t}\n\n}\n\nconst AuthTokenTypeValues = Object.freeze([\n\tnew AuthTokenType('ReadNodeData'),\n    new AuthTokenType('User'),\n]);\n\n/**\n * The enumeration of supported AuthTokenType values.\n * \n * @readonly\n * @enum {module:domain~AuthTokenType}\n * @property {module:domain~AuthTokenType} ReadNodeData a read-only token for reading SolarNode data\n * @property {module:domain~AuthTokenType} User full access as the user that owns the token\n * @alias module:domain~AuthTokenTypes\n */\nconst AuthTokenTypes = AuthTokenType.enumsValue(AuthTokenTypeValues);\n\nexport default AuthTokenTypes;\n","import Enum from './enum';\n\n/**\n * A basic map-like object.\n * @alias module:util~PropMap\n */\nclass PropMap {\n    /**\n     * Constructor.\n     * @param {object} props the initial properties \n     */\n    constructor(props) {\n        /**\n         * The object that all properties are stored on. \n         * @member {object} \n         */\n        this.props = (typeof props === 'object' ? props : {});\n    }\n\n    /**\n\t * Get, set, or remove a property value.\n\t *\n\t * @param {string} key the key to get or set the value for\n\t * @param {*} [newValue] if defined, the new value to set for the given `key`;\n\t *                       if `null` then the `key` property will be removed\n\t * @returns {*} if called as a getter, the associated value for the given `key`,\n\t *              otherwise this object\n\t */\n\tprop(key, newValue) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn this.props[key];\n\t\t}\n\t\tif ( newValue === null ) {\n\t\t\tdelete this.props[key];\n\t\t} else {\n\t\t\tthis.props[key] = newValue;\n\t\t}\n\t\treturn this;\n\t}\n\n    /**\n\t * Get, set, or remove multiple properties.\n\t * \n\t * @param {object} [newProps] the new values to set; if any value is `null` that property\n     *                            will be deleted\n\t * @returns {object} if called as a getter, all properties of this object copied into a \n     *                   simple object; otherwise this object\n\t */\n\tproperties(newProps) {\n\t\tif ( newProps ) {\n\t\t\tfor ( const k of Object.keys(newProps) ) {\n\t\t\t\tthis.prop(k, newProps[k]);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn Object.assign({}, this.props);\n\t}\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * All enumerable properties of the <code>props</code> property will be added to the\n     * result. If any property value is an array, the values of the array will be joined\n     * by a comma. Any {@link module:util~Enum} values will have their `name` property used.\n     * \n     * @param {string} [propertyName] an optional object property prefix to add to all properties\n     * @param {function} [callbackFn] An optional function that will be called for each property.\n     *                   The function will be passed property name and value arguments, and must\n     *                   return either `null` to skip the property, a 2-element array with the property\n     *                   name and value to use, or anything else to use the property as- is.\n     * @return {string} the URI encoded string\n     */\n    toUriEncoding(propertyName, callbackFn) {\n        let result = '';\n        for ( let k of Object.keys(this.props) ) {\n            if ( result.length > 0 ) {\n                result += '&';\n            }\n            if ( propertyName ) {\n                result += encodeURIComponent(propertyName) + '.';\n            }\n            let v = this.props[k];\n            if ( callbackFn ) {\n                const kv = callbackFn(k, v);\n                if ( kv === null ) {\n                    continue;\n                } else if ( Array.isArray(kv) && kv.length > 1 ) {\n                    k = kv[0];\n                    v = kv[1];\n                }\n            }\n            result += encodeURIComponent(k) + '=';\n            if ( Array.isArray(v) ) {\n                v.forEach((e, i) => {\n                    if ( i > 0 ) {\n                        result += ',';\n                    }\n                    if ( e instanceof Enum ) {\n                        e = e.name;\n                    }\n                    result += encodeURIComponent(e);\n                });\n            } else {\n                if ( v instanceof Enum ) {\n                    v = v.name;\n                }\n                result += encodeURIComponent(v);\n            }\n        }\n        return result;\n    }\n}\n\nexport default PropMap;\n","import Enum from '../util/enum';\n\n/**\n * A named instruction state.\n * \n * @extends module:util~Enum\n * @alias module:domain~InstructionState\n */\nclass InstructionState extends Enum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     */\n    constructor(name) {\n        super(name);\n        if ( this.constructor === InstructionState ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link module:domain~InstructionStates} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn InstructionStateValues;\n\t}\n\n}\n\nconst InstructionStateValues = Object.freeze([\n\tnew InstructionState('Unknown'),\n\tnew InstructionState('Queued'),\n    new InstructionState('Received'),\n    new InstructionState('Executing'),\n    new InstructionState('Declined'),\n    new InstructionState('Completed'),\n]);\n\n/**\n * The enumeration of supported InstructionState values.\n * \n * @readonly\n * @enum {module:domain~InstructionState}\n * @property {module:domain~InstructionState} Unknown an unknown state\n * @property {module:domain~InstructionState} Queued the instruction has been received by SolarNet but not yet delivered to its destination\n * @property {module:domain~InstructionState} Received the instruction has been delivered to its destination but not yet acted upon\n * @property {module:domain~InstructionState} Executed the instruction is currently being acted upon\n * @property {module:domain~InstructionState} Declined the destination has declined to execute the instruction, or the execution failed\n * @property {module:domain~InstructionState} Completed the destination has executed successfully\n * @alias module:domain~InstructionStates\n */\nconst InstructionStates = InstructionState.enumsValue(InstructionStateValues);\n\nexport default InstructionStates;\nexport { InstructionState };","import ComparableEnum from '../util/comparableEnum';\n\n/**\n * A location precision object for use with defining named geographic precision.\n * \n * @extends module:util~ComparableEnum\n * @alias module:domain~LocationPrecision\n */\nclass LocationPrecision extends ComparableEnum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the unique name for this precision \n     * @param {number} precision a relative precision value for this precision \n     */\n    constructor(name, precision) {\n        super(name, precision);\n        if ( this.constructor === LocationPrecision ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get the relative precision value.\n     * \n     * This is an alias for {@link #name}.\n     * \n     * @returns {number} the precision\n     */\n    get precision() {\n        return this.value;\n    }\n\n\t/**\n\t * Get the {@link module:domain~LocationPrecisions} values.\n\t * \n     * @override\n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn LocationPrecisionValues;\n\t}\n}\n\nconst LocationPrecisionValues = Object.freeze([\n    new LocationPrecision('LatLong', 1),\n    new LocationPrecision('Block', 5),\n    new LocationPrecision('Street', 10),\n    new LocationPrecision('PostalCode', 20),\n    new LocationPrecision('Locality', 30),\n    new LocationPrecision('StateOrProvince', 40),\n    new LocationPrecision('Region', 50),\n    new LocationPrecision('TimeZone', 60),\n    new LocationPrecision('Country', 70),\n]);\n\n/**\n * The enumeration of supported LocationPrecision values.\n * \n * @readonly\n * @enum {module:domain~LocationPrecision}\n * @property {module:domain~LocationPrecision} LatLong GPS coordinates\n * @property {module:domain~LocationPrecision} Block a city block\n * @property {module:domain~LocationPrecision} Street a street\n * @property {module:domain~LocationPrecision} PostalCode a postal code (or \"zip code\")\n * @property {module:domain~LocationPrecision} Locality a town or city\n * @property {module:domain~LocationPrecision} StateOrProvince a state or province\n * @property {module:domain~LocationPrecision} Region a large region\n * @property {module:domain~LocationPrecision} TimeZone a time zone\n * @property {module:domain~LocationPrecision} Country a country\n * @alias module:domain~LocationPrecisions\n */\nconst LocationPrecisions = LocationPrecision.enumsValue(LocationPrecisionValues);\n\nexport default LocationPrecisions;\nexport { LocationPrecision };","/**\n * A pagination criteria object.\n * @alias module:domain~Pagination\n */\nclass Pagination {\n\n    /**\n     * Construct a pagination object.\n     * \n     * @param {number} max the maximum number of results to return \n     * @param {number} [offset] the 0-based starting offset \n     */\n    constructor(max, offset) {\n        this._max = (max > 0 ? +max : 0);\n        this._offset = (offset > 0 ? +offset : 0);\n    }\n\n    /**\n     * Get the maximum number of results to return.\n     * \n     * @returns {number} the maximum number of results\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     * Get the results starting offset.\n     * \n     * The first available result starts at offset <code>0</code>. Note this is \n     * a raw offset value, not a \"page\" offset.\n     * \n     * @returns {number} the starting result offset\n     */\n    get offset() {\n        return this._offset;\n    }\n\n    /**\n     * Copy constructor with a new <code>offset</code> value.\n     * \n     * @param {number} offset the new offset to use\n     * @return {Pagination} a new instance\n     */\n    withOffset(offset) {\n        return new Pagination(this.max, offset);\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * @return {string} the URI encoded string\n     */\n    toUriEncoding() {\n        let result = '';\n        if ( this.max > 0 ) {\n            result += 'max=' +this.max;\n        }\n        if ( this.offset > 0 ) {\n            if ( result.length > 0 ) {\n                result += '&';\n            }\n            result += 'offset=' +this.offset;\n        }\n        return result;\n    }\n}\n\nexport default Pagination;\n","/**\n * A description of a sort applied to a property of a collection.\n * @alias module:domain~SortDescriptor\n */\nclass SortDescriptor {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} key the property to sort on\n     * @param {boolean} [descending] `true` to sort in descending order, `false` for ascending\n     */\n    constructor(key, descending) {\n        this._key = key;\n        this._descending = !!descending;\n    }\n\n    /**\n     * Get the sort property name.\n     * \n     * @returns {string} the sort key\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * Get the sorting direction.\n     * \n     * @returns {boolean} `true` if descending order, `false` for ascending\n     */\n    get descending() {\n        return this._descending;\n    }\n\n    /**\n     * Get this object as a standard URI encoded (query parameters) string value.\n     * \n     * If `index` is provided and non-negative, then the query parameters will\n     * be encoded as an array property named `sorts`. Otherwise just\n     * bare `key` and `descending` properties will be used. The \n     * `descending` property is only added if it is `true`.\n     * \n     * @param {number} [index] an optional array property index\n     * @param {string} [propertyName=sorts] an optional array property name, only used if `index` is also provided\n     * @return {string} the URI encoded string\n     */\n    toUriEncoding(index, propertyName) {\n        let result,\n            propName = (propertyName || 'sorts');\n        if ( index !== undefined && index >= 0 ) {\n            result = encodeURIComponent(propName +'[' +index +'].key') + '=';\n        } else {\n            result = 'key=';\n        }\n        result += encodeURIComponent(this.key);\n        if ( this.descending ) {\n            if ( index !== undefined && index >= 0 ) {\n                result += '&' +encodeURIComponent(propName +'[' +index +'].descending') + '=true';\n            } else {\n                result += '&descending=true';\n            }\n        }\n        return result;\n    }\n\n}\n\nexport default SortDescriptor;\n","import Configuration from '../util/configuration';\n\n/**\n * An environment configuration utility object.\n *\n * This extends {@link module:util~Configuration} to add support for standard properties\n * needed to access the SolarNetwork API, such as host and protocol values.\n *\n * @extends module:util~Configuration\n * @alias module:net~Environment\n */\nclass Environment extends Configuration {\n\n\t/**\n\t * Constructor.\n\t *\n\t * This will define the following default properties, if not supplied on the\n\t * `config` argument:\n\t *\n\t * <dl>\n\t * <dt>host</dt><dd>`data.solarnetwork.net`</dd>\n\t * <dt>protocol</dt><dd>`https`</dd>\n\t * <dt>port</dt><dd>`443`</dd>\n\t * </dl>\n\t *\n\t * @param {Object} [config] an optional set of properties to start with\n\t */\n\tconstructor(config) {\n\t\tsuper(Object.assign({\n\t\t\tprotocol: 'https',\n\t\t\thost: 'data.solarnetwork.net',\n\t\t\tport: (config && config.port ? config.port : (config && config.protocol ? (config.protocol === 'https' ? 443 : 80) : 443)),\n\t\t}, config));\n\t}\n\n    /**\n\t * Check if TLS is in use via the `https` protocol.\n\t *\n     * @returns {boolean} `true` if the `protocol` is set to `https`\n     */\n\tuseTls() {\n\t\treturn (this.value('protocol') === 'https');\n\t}\n\n}\n\nexport default Environment;\n","import MultiMap from '../util/multiMap';\n\nconst HttpMethod = Object.freeze(\t\n\t/**\n\t * Enumeration of HTTP methods (verbs).\n\t * @enum {string}\n\t * @alias module:net~HttpMethod\n\t * @constant\n\t */\n\t{\n\tGET: 'GET',\n\tHEAD: 'HEAD',\n\tPOST: 'POST',\n\tPUT: 'PUT',\n\tPATCH: 'PATCH',\n\tDELETE: 'DELETE',\n\tOPTIONS: 'OPTIONS',\n\tTRACE: 'TRACE',\n});\n\n/**\n * Support for HTTP headers.\n * \n * @extends module:util~MultiMap\n * @alias module:net~HttpHeaders\n */\nclass HttpHeaders extends MultiMap {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n\nObject.defineProperties(HttpHeaders, {\n\t/**\n\t * The `Content-MD5` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_MD5':\t\t{ value: 'Content-MD5' },\n\n\t/**\n\t * The `Content-Type` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'CONTENT_TYPE': \t{ value: 'Content-Type' },\n\n\t/**\n\t * The `Date` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DATE':\t\t\t\t{ value: 'Date' },\n\n\t/**\n\t * The `Digest` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'DIGEST':\t\t\t{ value: 'Digest' },\n\n\t/**\n\t * The `Host` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'HOST': \t\t\t{ value: 'Host' },\n\n\t/**\n\t * The `X-SN-Date` header.\n\t * \n\t * @memberof module:net~HttpHeaders\n\t * @readonly\n\t * @type {string}\n\t */\n\t'X_SN_DATE': \t\t{ value: 'X-SN-Date' },\n});\n\nexport default HttpHeaders;\nexport { HttpMethod };","import Configuration from '../util/configuration';\nimport Environment from './environment';\n\n/**\n * A utility class for helping to compose SolarNet URLs for the REST API.\n *\n * This class is essentially abstract and meant to have mixin helper objects extend it.\n * @alias module:net~UrlHelper\n */\nclass UrlHelper {\n\n    /**\n     * Constructor.\n     *\n     * @param {module:net~Environment|object} [environment] the optional initial environment to use;\n     *        if a non-`Environment` object is passed then the properties of that object will\n     *        be used to construct a new `Environment` instance\n     */\n    constructor(environment) {\n        let env = (environment instanceof Environment ? environment\n            : new Environment(environment));\n        \n        /**\n         * The environment associated with this helper.\n         * @member {module:net~Environment}\n         */\n        this.environment = env;\n\n        this._parameters = new Configuration();\n    }\n\n    /**\n     * Get a parameters object that can be used to hold URL variables.\n     * \n     * @readonly\n     * @type {module:util~Configuration}\n     */\n    get parameters() {\n        return this._parameters;\n    }\n\n    /**\n     * Get or set an environment parameter.\n     * \n     * This is a shortcut for calling {@link module:net~Configuration#value} on the\n     * `environment` object.\n     * \n     * @param {string} key the environment parameter name to get\n     * @param {object} [val] the optional value to set\n     * @returns {object} when called as a getter, the environment parameter value;\n     *                   when called as a setter, the environment parameters object\n     */\n    env(...args) {\n        return this.environment.value(...args);\n    }\n\n    /**\n     * Get or set a parameter.\n     * \n     * This is a shortcut for calling {@link module:net~Configuration#value} on the\n     * `parameters` object.\n     * \n     * @param {string} key the parameter name to get\n     * @param {Object} [val] the optional value to set\n     * @returns {Object} when called as a getter, the parameter value;\n     *                   when called as a setter, the parameters object\n     */\n    parameter(...args) {\n        return this._parameters.value(...args);\n    }\n\n    /**\n     * Get a URL for just the SolarNet host, without any path.\n     *\n     * @returns {string} the URL to the SolarNet host\n     */\n    hostUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'http' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n    \n    /**\n     * Get a URL for just the SolarNet host using the WebSocket protocol, without any path.\n     * \n     * @returns {string} the URL to the SolarNet host WebSocket\n     */\n    hostWebSocketUrl() {\n        const tls = this.environment.useTls();\n        const port = +this.environment.value('port');\n\t\tlet url = 'ws' +(tls ? 's' : '') +'://' +this.environment.value('host');\n        if ( (tls && port > 0 && port !== 443) || (!tls && port > 0 && port !== 80) ) {\n            url += ':' +port;\n        }\n        return url;\n    }\n\n\t/**\n\t * Get the base URL to the REST API.\n\t * \n\t * This implementation is a stub, meant for subclasses to override. This implementation\n     * simply returns {@link module:net~UrlHelper#hostUrl}.\n\t * \n     * @abstract\n\t * @returns {string} the base URL to the REST API\n\t */\n\tbaseUrl() {\n\t\treturn this.hostUrl();\n\t}\n\n    /**\n     * Replace occurances of URL template variables with values from the `parameters`\n     * property and append to the host URL.\n     * \n     * This method provides a way to resolve an absolute URL based on the configured\n     * environment and parameters on this object.\n     * \n     * @param {string} template a URL path template\n     * @returns {string} an absolute URL\n     * @see module:net~UrlHelper#resolveTemplateUrl\n     */\n    resolveTemplatePath(template) {\n        return this.hostUrl() + this.resolveTemplateUrl(template);\n    }\n\n     /**\n     * Replace occurances of URL template variables with values from the `parameters`\n     * property.\n     * \n     * URL template variables are specified as `{<em>name</em>}`. The variable\n     * will be replaced by the value associated with property `name` in the\n     * `parameters` object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @returns {string} the URL with template variables resolved\n     */\n   resolveTemplateUrl(template) {\n        return UrlHelper.resolveTemplateUrl(template, this._parameters);\n    }\n\n    /**\n     * Replace occurances of URL template variables with values from a parameter object.\n     * \n     * URL template variables are specified as `{<em>name</em>}`. The variable\n     * will be replaced by the value associated with property `name` in the\n     * provided parameter object. The value will be URI encoded.\n     * \n     * @param {string} template a URL template\n     * @param {object} params an object whose properties should serve as template variables\n     * @returns {string} the URL\n     */\n    static resolveTemplateUrl(template, params) {\n        return template.replace(/\\{([^}]+)\\}/g, function(match, variableName) {\n            let variableValue = params[variableName];\n            return (variableValue !== undefined ? encodeURIComponent(variableValue) : '');\n        });\n    }\n\n}\n\nexport default UrlHelper;\n","const NodeIdsKey = 'nodeIds';\nconst SourceIdsKey = 'sourceIds';\n\n/**\n * Create a NodeUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeUrlHelperMixin} the mixin class\n */\nconst NodeUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds support for SolarNode properties to a {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * The first available node ID from the `nodeIds` property.\n     * Setting this replaces any existing node IDs with an array of just that value.\n     * @type {number}\n     */\n    get nodeId() {\n        const nodeIds = this.nodeIds;\n        return (Array.isArray(nodeIds) && nodeIds.length > 0 ? nodeIds[0] : null);\n    }\n\n    set nodeId(nodeId) {\n        this.parameter(NodeIdsKey, nodeId ? [nodeId] : null);\n    }\n\n    /**\n     * An array of node IDs, set on the `nodeIds` parameter\n     * @type {number[]}\n     */\n    get nodeIds() {\n        return this.parameter(NodeIdsKey);\n    }\n\n    set nodeIds(nodeIds) {\n        this.parameter(NodeIdsKey, nodeIds);\n    }\n\n    /**\n     * The first available source ID from the `sourceIds` property.\n     * Setting this replaces any existing node IDs with an array of just that value.\n     * @type {string}\n     */\n    get sourceId() {\n        const sourceIds = this.sourceIds;\n        return (Array.isArray(sourceIds) && sourceIds.length > 0 ? sourceIds[0] : null);\n    }\n\n    set sourceId(sourceId) {\n        this.parameter(SourceIdsKey, sourceId ? [sourceId] : sourceId);\n    }\n\n    /**\n     * An array of source IDs, set on the `sourceIds` parameter\n     * @type {string[]}\n     */\n    get sourceIds() {\n        return this.parameter(SourceIdsKey);\n    }\n\n    set sourceIds(sourceIds) {\n        this.parameter(SourceIdsKey, sourceIds);\n    }\n\n}\n\nexport default NodeUrlHelperMixin;\n","/** \n * The SolarQuery default path.\n * @type {string}\n * @alias module:net~SolarQueryDefaultPath\n */\nexport const SolarQueryDefaultPath = '/solarquery';\n\n/** \n * The {@link module:net~UrlHelper#parameters} key for the SolarQuery path.\n * @type {string}\n * @alias module:net~SolarQueryPathKey\n */\nexport const SolarQueryPathKey = 'solarQueryPath';\n\n/** \n * The SolarQuery REST API path.\n * @type {string}\n * @alias module:net~SolarQueryApiPathV1\n */\nexport const SolarQueryApiPathV1 = '/api/v1';\n\n/** \n * The {@link module:net~UrlHelper#parameters} key that holds a `boolean` flag to\n * use the public path scheme (`/pub`) when constructing URLs.\n * @type {string}\n * @alias module:net~SolarQueryPublicPathKey\n */\nexport const SolarQueryPublicPathKey = 'publicQuery';\n\n/**\n * Create a QueryUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~QueryUrlHelperMixin} the mixin class\n */\nconst QueryUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarQuery specific support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~QueryUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Get the base URL to the SolarQuery v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the `hostUrl`, the `solarQueryPath` context path,\n     * and the `publicQuery` boolean flag. If the context path is not \n     * available, it will default to `/solarquery`.\n\t * \n\t * @returns {string} the base URL to SolarQuery\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarQueryPathKey) || SolarQueryDefaultPath;\n        const isPubPath = !!this.env(SolarQueryPublicPathKey);\n\t\treturn this.hostUrl() + path + SolarQueryApiPathV1\n            +(isPubPath ? '/pub' : '/sec');\n\t}\n\n};\n\nexport default QueryUrlHelperMixin;\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin'\n\n\n/**\n * Create a NodeDatumUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~DatumMetadataUrlHelperMixin} the mixin class\n */\nconst DatumMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum metadata support to {@link module:net~UrlHelper}.\n * \n * <p>Datum metadata is metadata associated with a specific node and source, i.e. \n * a <code>nodeId</code> and a <code>sourceId</code>.\n * \n * @mixin\n * @alias module:net~DatumMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get a base URL for datum metadata operations using a specific node ID.\n     * \n     * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n     * @returns {string} the base URL\n     * @private\n     */\n    baseDatumMetadataUrl(nodeId) {\n        return this.baseUrl() + '/datum/meta/' +(nodeId || this.nodeId);\n    }\n\n    datumMetadataUrlWithSource(nodeId, sourceId) {\n        let result = this.baseDatumMetadataUrl(nodeId);\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            result += '?sourceId=' +encodeURIComponent(source);\n        }\n        return result;\n    }\n\n\t/**\n\t * Generate a URL for viewing datum metadata.\n     * \n     * If no <code>sourceId</code> is provided, then the API will return all available datum metadata for all sources.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n     * @returns {string} the URL\n\t */\n\tviewDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n    \n\t/**\n\t * Generate a URL for adding (merging) datum metadata via a <code>POST</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    addDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for setting datum metadata via a <code>PUT</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    replaceDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for deleting datum metadata via a <code>DELETE</code> request.\n     * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; if not provided the <code>sourceId</code> property of this class will be used\n     * @returns {string} the URL\n\t */\n    deleteDatumMetadataUrl(nodeId, sourceId) {\n        return this.datumMetadataUrlWithSource(nodeId, sourceId);\n    }\n\n\t/**\n\t * Generate a URL for searching for datum metadata.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string} [sourceId] a specific source ID to use; \n     *                            if not provided the <code>sourceId</code> property of this class will be used;\n     *                            if <code>null</code> then ignore any <code>sourceId</code> property of this class\n\t * @param {SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindDatumMetadataUrl(nodeId, sourceId, sorts, pagination) {\n        let result = this.baseDatumMetadataUrl(nodeId);\n\t\tlet params = '';\n        let source = (sourceId || this.sourceId);\n        if ( sourceId !== null && source ) {\n            params += 'sourceId=' +encodeURIComponent(source);\n        }\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~DatumMetadataUrlHelperMixin},  \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~DatumMetadataUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~DatumMetadataUrlHelper\n */\nclass DatumMetadataUrlHelper extends DatumMetadataUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default DatumMetadataUrlHelperMixin;\nexport { DatumMetadataUrlHelper };\n","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport QueryUrlHelperMixin from './queryUrlHelperMixin';\n\n/**\n * Create a NodeDatumUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeDatumUrlHelperMixin} the mixin class\n */\nconst NodeDatumUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode datum query support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeDatumUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for the \"reportable interval\" for a node, optionally limited to a specific set of source IDs.\n\t *\n     * If no source IDs are provided, then the reportable interval query will return an interval for\n     * all available sources.\n     *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @param {string[]} [sourceIds] an array of source IDs to limit query to; if not provided the <code>sourceIds</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\treportableIntervalUrl(nodeId, sourceIds) {\n\t\tlet url = (this.baseUrl() +'/range/interval?nodeId=' +(nodeId || this.nodeId));\n        let sources = (sourceIds || this.sourceIds);\n\t\tif ( Array.isArray(sources) && sources.length > 0 ) {\n\t\t\turl += '&sourceIds=' + sources.map(e => encodeURIComponent(e)).join(',');\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Generate a URL for finding the available source IDs for a node or metadata filter.\n\t * \n\t * @param {number|number[]} [nodeId] a specific node ID, or array of node IDs, to use; if not provided the \n\t *                                   <code>nodeIds</code> property of this class will be used, unless <code>null</code>\n\t *                                   is passed in which case no node IDs will be added to the URL\n\t * @param {string} [metadataFilter] the LDAP-style metadata filter\n\t * @returns {string} the URL\n\t */\n\tavailableSourcesUrl(nodeId, metadataFilter) {\n\t\tconst nodeIds = (Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : nodeId !== null ? this.nodeIds : undefined);\n\t\tlet result = this.baseUrl() + '/range/sources';\n\t\tlet params = '';\n\t\tif ( Array.isArray(nodeIds) ) {\n\t\t\tparams += 'nodeIds=' +nodeIds.join(',');\n\t\t}\n\t\tif ( metadataFilter ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += 'metadataFilter=' +encodeURIComponent(metadataFilter);\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' +params;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate a URL for querying for datum, in either raw or aggregate form.\n\t * \n\t * If the `datumFilter` has an `aggregate` value set, then aggregate results will be\n\t * returned by SolarNet.\n\t * \n\t * @param {module:domain~DatumFilter} datumFilter the search criteria\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tlistDatumUrl(datumFilter, sorts, pagination) {\n\t\tlet result = this.baseUrl() + '/datum/list';\n\t\tlet params = (datumFilter ? datumFilter.toUriEncoding() : '');\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n}\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeDatumUrlHelperMixin}, \n * {@link module:net~QueryUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeDatumUrlHelperMixin\n * @mixes module:net~QueryUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeDatumUrlHelper\n */\nclass NodeDatumUrlHelper extends NodeDatumUrlHelperMixin(QueryUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeDatumUrlHelperMixin;\nexport { NodeDatumUrlHelper };\n","/** \n * The SolarUser default path.\n * @type {string}\n * @alias module:net~SolarUserDefaultPath\n */\nexport const SolarUserDefaultPath = '/solaruser';\n\n/**\n * The {@link module:net~UrlHelper} parameters key for the SolarUser path.\n * @type {string}\n * @alias module:net~SolarUserPathKey\n */\nexport const SolarUserPathKey = 'solarUserPath';\n\n/** \n * The SolarUser REST API path.\n * @type {string}\n * @alias module:net~SolarUserApiPathV1\n */\nexport const SolarUserApiPathV1 = '/api/v1/sec';\n\nconst UserIdsKey = 'userIds';\n\n/**\n * Create a UserUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserUrlHelperMixin} the mixin class\n */\nconst UserUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarUser specific support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Get the default user ID.\n     * \n     * This gets the first available user ID from the `userIds` property.\n     * \n     * @returns {number} the default user ID, or `null`\n     */\n    get userId() {\n        const userIds = this.parameter(UserIdsKey);\n        return (Array.isArray(userIds) && userIds.length > 0 ? userIds[0] : null);\n    }\n\n    /**\n     * Set the user ID.\n     * \n     * This will set the `userIds` property to a new array of just the given value.\n     * \n     * @param {number} userId the user ID to set\n     */\n    set userId(userId) {\n        this.parameter(UserIdsKey, [userId]);\n    }\n\n    get userIds() {\n        return this.parameter(UserIdsKey);\n    }\n\n    set userIds(userIds) {\n        this.parameter(UserIdsKey, userIds);\n    }\n\n\t/**\n\t * Get the base URL to the SolarUser v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the `hostUrl` and a `solarUserPath` context path.\n\t * If the context path is not available, it will default to \n\t * `/solaruser`.\n\t * \n\t * @returns {string} the base URL to SolarUser\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarUserPathKey) || SolarUserDefaultPath;\n\t\treturn super.baseUrl() + path + SolarUserApiPathV1;\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all active nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's active nodes\n\t */\n\tviewNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all pending nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's pending nodes\n\t */\n\tviewPendingNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/pending';\n\t}\n\n\t/**\n\t * Generate a URL to get a list of all archived nodes for the user account.\n\t *\n\t * @return {string} the URL to access the user's archived nodes\n\t */\n\tviewArchivedNodesUrl() {\n\t\treturn this.baseUrl() + '/nodes/archived';\n\t}\n\n\t/**\n\t * Generate a URL to update the archived status of a set of nodes via a `POST` request.\n\t *\n\t * @param {number|number[]|null} nodeId a specific node ID, or array of node IDs, to update; if not provided the \n\t *                                      `nodeIds` property of this class will be used\n\t * @param {boolean} archived `true` to mark the nodes as archived; `false` to un-mark\n\t *                           and return to normal status\n\t * @return {string} the URL to update the nodes archived status\n\t */\n\tupdateNodeArchivedStatusUrl(nodeId, archived) {\n\t\tconst nodeIds = Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : this.nodeIds;\n\t\tlet result = this.baseUrl() + '/nodes/archived?nodeIds='\n\t\t\t+nodeIds.join(',') +'&archived='\n\t\t\t+(archived ? 'true' : 'false');\n\t\treturn result;\n\t}\n\n}\n\nexport default UserUrlHelperMixin;\n","import UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a NodeInstructionUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeInstructionUrlHelperMixin} the mixin class\n */\nconst NodeInstructionUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode instruction support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeInstructionUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL to get all details for a specific instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to get\n\t * @returns {string} the URL\n\t */\n\tviewInstructionUrl(instructionId) {\n\t\treturn (this.baseUrl() +'/instr/view?id=' +encodeURIComponent(instructionId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing active instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewActiveInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewActive?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for viewing pending instructions.\n\t * \n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewPendingInstructionsUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/instr/viewPending?nodeId=' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for changing the state of an instruction.\n\t * \n\t * @param {number} instructionId the instruction ID to update\n\t * @param {InstructionState} state the instruction state to set\n\t * @returns {string} the URL\n\t * @see the {@link InstructionStates} enum for possible state values\n\t */\n\tupdateInstructionStateUrl(instructionId, state) {\n\t\treturn (this.baseUrl()\n\t\t\t+'/instr/updateState?id=' +encodeURIComponent(instructionId)\n\t\t\t+'&state=' +encodeURIComponent(state.name));\n\t}\n\n\t/**\n\t * Generate a URL for posting an instruction request.\n\t *\n\t * @param {string} topic the instruction topic.\n\t * @param {Object[]} [parameters] an array of parameter objects in the form <code>{name:n1, value:v1}</code>.\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the <code>nodeId</code> property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tqueueInstructionUrl(topic, parameters, nodeId) {\n\t\tvar url = (this.baseUrl()\n\t\t\t+'/instr/add?nodeId=' +(nodeId || this.nodeId)\n\t\t\t+'&topic=' +encodeURIComponent(topic));\n\t\tvar i, len;\n\t\tif ( Array.isArray(parameters) ) {\n\t\t\tfor ( i = 0, len = parameters.length; i < len; i++ ) {\n\t\t\t\turl += '&' +encodeURIComponent('parameters['+i+'].name') +'=' +encodeURIComponent(parameters[i].name)\n\t\t\t\t\t+ '&' +encodeURIComponent('parameters['+i+'].value') +'=' +encodeURIComponent(parameters[i].value);\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Create an instruction parameter suitable to passing to {@link NodeInstructionUrlHelperMixin#queueInstructionUrl}.\n\t * \n\t * @param {string} name the parameter name \n\t * @param {*} value the parameter value\n\t * @returns {object} with <code>name</code> and <code>value</code> properties\n\t */\n\tstatic instructionParameter(name, value) {\n\t\treturn {name:name, value:value};\n\t}\n};\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~NodeInstructionUrlHelperMixin},  \n * {@link module:net~UserUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeInstructionUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeInstructionUrlHelper\n */\nclass NodeInstructionUrlHelper extends NodeInstructionUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\n/**\n * The static {@link NodeInstructionUrlHelperMixin#instructionParameter} method so it can be imported directly.\n * \n * @alias module:net~instructionParameter\n */\nconst instructionParameter = NodeInstructionUrlHelper.instructionParameter;\n\nexport default NodeInstructionUrlHelperMixin;\nexport { instructionParameter, NodeInstructionUrlHelper };","import Pagination from '../domain/pagination';\nimport SortDescriptor from '../domain/sortDescriptor';\nimport UrlHelper from './urlHelper';\nimport NodeUrlHelperMixin from './nodeUrlHelperMixin';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a NodeMetadataUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NodeMetadataUrlHelperMixin} the mixin class\n */\nconst NodeMetadataUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarNode metadata support to {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~NodeMetadataUrlHelperMixin\n */\nclass extends superclass {\n\n\t/**\n\t * Generate a URL for viewing the configured node's metadata.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tviewNodeMetadataUrl(nodeId) {\n\t\treturn (this.baseUrl() +'/nodes/meta/' \n\t\t\t+(nodeId || this.nodeId));\n\t}\n\n\t/**\n\t * Generate a URL for adding metadata to a node via a `POST` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\taddNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for setting the metadata of a node via a `PUT` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\treplaceNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for deleting the metadata of a node via a `DELETE` request.\n\t *\n\t * @param {number} [nodeId] a specific node ID to use; if not provided the `nodeId` property of this class will be used\n\t * @returns {string} the URL\n\t */\n\tdeleteNodeMetadataUrl(nodeId) {\n\t\treturn this.viewNodeMetadataUrl(nodeId);\n\t}\n\n\t/**\n\t * Generate a URL for searching for node metadata.\n\t * \n\t * @param {number|number[]} [nodeId] a specific node ID, or array of node IDs, to use; if not provided the \n\t *                                   `nodeIds` property of this class will be used, unless `null`\n\t *                                   is passed in which case no node IDs will be added to the URL so that all available\n\t *                                   node metadata objects will be returned\n\t * @param {module:domain~SortDescriptor[]} [sorts] optional sort settings to use\n\t * @param {module:domain~Pagination} [pagination] optional pagination settings to use\n\t * @returns {string} the URL\n\t */\n\tfindNodeMetadataUrl(nodeId, sorts, pagination) {\n\t\tconst nodeIds = (Array.isArray(nodeId) ? nodeId : nodeId ? [nodeId] : nodeId !== null ? this.nodeIds : undefined);\n\t\tlet result = this.baseUrl() + '/nodes/meta';\n\t\tlet params = '';\n\t\tif ( Array.isArray(nodeIds) ) {\n\t\t\tparams += 'nodeIds=' +nodeIds.join(',');\n\t\t}\n\t\tif ( Array.isArray(sorts) ) {\n\t\t\tsorts.forEach((sort, i) => {\n\t\t\t\tif ( sort instanceof SortDescriptor ) {\n\t\t\t\t\tif ( params.length > 0 ) {\n\t\t\t\t\t\tparams += '&';\n\t\t\t\t\t}\n\t\t\t\t\tparams += sort.toUriEncoding(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif ( pagination instanceof Pagination ) {\n\t\t\tif ( params.length > 0 ) {\n\t\t\t\tparams += '&';\n\t\t\t}\n\t\t\tparams += pagination.toUriEncoding();\n\t\t}\n\t\tif ( params.length > 0 ) {\n\t\t\tresult += '?' + params;\n\t\t}\n\t\treturn result;\n\t}\n\n};\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~NodeMetadataUrlHelperMixin},  \n * {@link module:net~UserUrlHelperMixin}, and {@link module:net~NodeUrlHelperMixin} mixins.\n * \n * @mixes module:net~NodeMetadataUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @mixes module:net~NodeUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~NodeMetadataUrlHelper\n */\nclass NodeMetadataUrlHelper extends NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper))) {\n\n}\n\nexport default NodeMetadataUrlHelperMixin;\nexport { NodeMetadataUrlHelper };\n","import UrlHelper from './urlHelper';\nimport UserUrlHelperMixin from './userUrlHelperMixin'\n\n/**\n * Create a UserAuthTokenUrlHelperMixin class.\n *\n * @param {module:net~UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~UserAuthTokenUrlHelperMixin} the mixin class\n */\nconst UserAuthTokenUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds security token support to a SolarUser {@link module:net~UrlHelper}.\n * \n * @mixin\n * @alias module:net~UserAuthTokenUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Generate a URL for listing all available auth tokens.\n     * \n\t * @returns {string} the URL\n     */\n    listAllAuthTokensUrl() {\n        return this.baseUrl() + '/user/auth-tokens';\n    }\n\n    /**\n     * Generate a URL for creating a new auth token, via a `POST` request.\n     * \n     * The request body accepts a {@link module:domain~SecurityPolicy} JSON document.\n     * \n     * @param {AuthTokenType} type the auth token type to generate\n\t * @returns {string} the URL\n     */\n    generateAuthTokenUrl(type) {\n        return this.baseUrl() + '/user/auth-tokens/generate/' +type.name;\n    }\n\n    /**\n     * Generate a URL for accessing an auth token.\n     * \n     * @param {string} tokenId the token ID\n\t * @returns {string} the URL\n     * @private\n     */\n    authTokenUrl(tokenId) {\n        return this.baseUrl() + '/user/auth-tokens/' +encodeURIComponent(tokenId);\n    }\n\n    /**\n     * Generate a URL for deleting an auth token, via a `DELETE` request.\n     * \n     * @param {string} tokenId the token ID to delete\n\t * @returns {string} the URL\n     */\n    deleteAuthTokenUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating (merging) a security policy on an auth token,\n     * via a `PATCH` request.\n     * \n     * The request body accepts a {@link module:net~SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     */\n    updateAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for replacing a security policy on an auth token,\n     * via a `PUT` request.\n     * \n     * The request body accepts a {@link module:domain~SecurityPolicy} JSON document.\n     * \n     * @param {string} tokenId the ID of the token to update\n\t * @returns {string} the URL\n     */\n    replaceAuthTokenSecurityPolicyUrl(tokenId) {\n        return this.authTokenUrl(tokenId);\n    }\n\n    /**\n     * Generate a URL for updating the status of an auth token,\n     * via a `POST` request.\n     * \n     * @param {string} tokenId the ID of the token to update\n     * @param {AuthTokenStatus} status the status to change to\n\t * @returns {string} the URL\n     */\n    updateAuthTokenStatusUrl(tokenId, status) {\n        return this.authTokenUrl(tokenId) + '?status=' +encodeURIComponent(status.name);\n    }\n}\n\n/**\n * A concrete {@link module:net~UrlHelper} with the {@link module:net~UserAuthTokenUrlHelperMixin} and  \n * {@link module:net~UserUrlHelperMixin} mixins.\n * \n * @mixes module:net~UserAuthTokenUrlHelperMixin\n * @mixes module:net~UserUrlHelperMixin\n * @extends module:net~UrlHelper\n * @alias module:net~UserAuthTokenUrlHelper\n */\nclass UserAuthTokenUrlHelper extends UserAuthTokenUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {\n\n }\n\nexport default UserAuthTokenUrlHelperMixin;\nexport { UserAuthTokenUrlHelper };\n"]}